<?xml version="1.0"?>
<rules>
	<rule key="BD-MISC-TRANS" priority="BLOCKER">
		<name><![CDATA[Always close transactions]]></name>
		<configKey><![CDATA[Always close transactions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Always close transactions]]></description>
	</rule>
	<rule key="BD-PB-ARRAY" priority="BLOCKER">
		<name><![CDATA[Avoid accessing arrays out of bounds]]></name>
		<configKey><![CDATA[Avoid accessing arrays out of bounds]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid accessing arrays out of bounds]]></description>
	</rule>
	<rule key="BD-PB-CC" priority="CRITICAL">
		<name><![CDATA[Avoid conditions that always evaluate to the same value]]></name>
		<configKey><![CDATA[Avoid conditions that always evaluate to the same value]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid conditions that always evaluate to the same value]]></description>
	</rule>
	<rule key="BD-PB-DEREF" priority="CRITICAL">
		<name><![CDATA[Avoid dereferencing before checking for null]]></name>
		<configKey><![CDATA[Avoid dereferencing before checking for null]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid dereferencing before checking for null]]></description>
	</rule>
	<rule key="BD-PB-NOTINIT" priority="BLOCKER">
		<name><![CDATA[Avoid use before initialization]]></name>
		<configKey><![CDATA[Avoid use before initialization]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid use before initialization]]></description>
	</rule>
	<rule key="BD-PB-NP" priority="BLOCKER">
		<name><![CDATA[Avoid null pointer dereferencing]]></name>
		<configKey><![CDATA[Avoid null pointer dereferencing]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid null pointer dereferencing]]></description>
	</rule>
	<rule key="BD-PB-OVERFFMT" priority="BLOCKER">
		<name><![CDATA[Avoid buffer overflow due to defining incorrect format limits]]></name>
		<configKey><![CDATA[Avoid buffer overflow due to defining incorrect format limits]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid buffer overflow due to defining incorrect format limits]]></description>
	</rule>
	<rule key="BD-PB-OVERFNZT" priority="BLOCKER">
		<name><![CDATA[Avoid overflow due to reading a not zero terminated string]]></name>
		<configKey><![CDATA[Avoid overflow due to reading a not zero terminated string]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid overflow due to reading a not zero terminated string]]></description>
	</rule>
	<rule key="BD-PB-OVERFRD" priority="BLOCKER">
		<name><![CDATA[Avoid overflow when reading from a buffer]]></name>
		<configKey><![CDATA[Avoid overflow when reading from a buffer]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid overflow when reading from a buffer]]></description>
	</rule>
	<rule key="BD-PB-OVERFWR" priority="BLOCKER">
		<name><![CDATA[Avoid overflow when writing to a buffer]]></name>
		<configKey><![CDATA[Avoid overflow when writing to a buffer]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid overflow when writing to a buffer]]></description>
	</rule>
	<rule key="BD-PB-SWITCH" priority="CRITICAL">
		<name><![CDATA[Avoid switch with unreachable branches]]></name>
		<configKey><![CDATA[Avoid switch with unreachable branches]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid switch with unreachable branches]]></description>
	</rule>
	<rule key="BD-PB-ZERO" priority="BLOCKER">
		<name><![CDATA[Avoid division by zero]]></name>
		<configKey><![CDATA[Avoid division by zero]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid division by zero]]></description>
	</rule>
	<rule key="BD-RES-BADFREEF" priority="BLOCKER">
		<name><![CDATA[Ensure deallocation functions guarantee resource freeing]]></name>
		<configKey><![CDATA[Ensure deallocation functions guarantee resource freeing]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Ensure deallocation functions guarantee resource freeing]]></description>
	</rule>
	<rule key="BD-RES-FREE" priority="BLOCKER">
		<name><![CDATA[Do not use resources that have been freed]]></name>
		<configKey><![CDATA[Do not use resources that have been freed]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use resources that have been freed]]></description>
	</rule>
	<rule key="BD-RES-INVFREE" priority="BLOCKER">
		<name><![CDATA[Do not free resources using invalid pointers]]></name>
		<configKey><![CDATA[Do not free resources using invalid pointers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not free resources using invalid pointers]]></description>
	</rule>
	<rule key="BD-RES-LEAKS" priority="BLOCKER">
		<name><![CDATA[Ensure resources are freed]]></name>
		<configKey><![CDATA[Ensure resources are freed]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Ensure resources are freed]]></description>
	</rule>
	<rule key="BD-SECURITY-ARRAY" priority="BLOCKER">
		<name><![CDATA[Avoid tainted data in array indexes]]></name>
		<configKey><![CDATA[Avoid tainted data in array indexes]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid tainted data in array indexes]]></description>
	</rule>
	<rule key="BD-SECURITY-INTOVERF" priority="BLOCKER">
		<name><![CDATA[Protect against integer overflow/underflow from tainted data]]></name>
		<configKey><![CDATA[Protect against integer overflow/underflow from tainted data]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Protect against integer overflow/underflow from tainted data]]></description>
	</rule>
	<rule key="BD-SECURITY-OVERFRD" priority="BLOCKER">
		<name><![CDATA[Avoid buffer read overflow from tainted data]]></name>
		<configKey><![CDATA[Avoid buffer read overflow from tainted data]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid buffer read overflow from tainted data]]></description>
	</rule>
	<rule key="BD-SECURITY-OVERFWR" priority="BLOCKER">
		<name><![CDATA[Avoid buffer write overflow from tainted data]]></name>
		<configKey><![CDATA[Avoid buffer write overflow from tainted data]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid buffer write overflow from tainted data]]></description>
	</rule>
	<rule key="BD-SECURITY-TDCMD" priority="BLOCKER">
		<name><![CDATA[Protect against command injection]]></name>
		<configKey><![CDATA[Protect against command injection]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Protect against command injection]]></description>
	</rule>
	<rule key="BD-SECURITY-TDFNAMES" priority="BLOCKER">
		<name><![CDATA[Protect against file name injection]]></name>
		<configKey><![CDATA[Protect against file name injection]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Protect against file name injection]]></description>
	</rule>
	<rule key="BD-SECURITY-TDSQL" priority="BLOCKER">
		<name><![CDATA[Protect against SQL injection]]></name>
		<configKey><![CDATA[Protect against SQL injection]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Protect against SQL injection]]></description>
	</rule>
	<rule key="BD-TRS-MUTEX" priority="BLOCKER">
		<name><![CDATA[Do not abandon unreleased mutexes]]></name>
		<configKey><![CDATA[Do not abandon unreleased mutexes]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not abandon unreleased mutexes]]></description>
	</rule>
	<rule key="BD-TRS-SLEEP" priority="BLOCKER">
		<name><![CDATA[Do not use blocking functions in critical sections]]></name>
		<configKey><![CDATA[Do not use blocking functions in critical sections]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use blocking functions in critical sections]]></description>
	</rule>
	<rule key="CODSTA-01" priority="MAJOR">
		<name><![CDATA[Array elements shall be accessed by the array operator [ ]]]></name>
		<configKey><![CDATA[Array elements shall be accessed by the array operator [ ]]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Array elements shall be accessed by the array operator [ ]]]></description>
	</rule>
	<rule key="CODSTA-02" priority="INFO">
		<name><![CDATA[Do not declare member variables as bit-fields]]></name>
		<configKey><![CDATA[Do not declare member variables as bit-fields]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not declare member variables as bit-fields]]></description>
	</rule>
	<rule key="CODSTA-03" priority="MAJOR">
		<name><![CDATA[Do not define constants via #define]]></name>
		<configKey><![CDATA[Do not define constants via #define]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not define constants via #define]]></description>
	</rule>
	<rule key="CODSTA-04" priority="INFO">
		<name><![CDATA[Do not declare local variables with the 'static' keyword]]></name>
		<configKey><![CDATA[Do not declare local variables with the 'static' keyword]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not declare local variables with the 'static' keyword]]></description>
	</rule>
	<rule key="CODSTA-05" priority="MAJOR">
		<name><![CDATA[Pointers to pointers should be avoided whenever possible]]></name>
		<configKey><![CDATA[Pointers to pointers should be avoided whenever possible]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Pointers to pointers should be avoided whenever possible]]></description>
	</rule>
	<rule key="CODSTA-06" priority="MAJOR">
		<name><![CDATA[Avoid using the '?:' operator]]></name>
		<configKey><![CDATA[Avoid using the '?:' operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using the '?:' operator]]></description>
	</rule>
	<rule key="CODSTA-07" priority="MAJOR">
		<name><![CDATA[If a function has no parameters, use ( ) instead of ( void )]]></name>
		<configKey><![CDATA[If a function has no parameters, use ( ) instead of ( void )]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If a function has no parameters, use ( ) instead of ( void )]]></description>
	</rule>
	<rule key="CODSTA-08" priority="CRITICAL">
		<name><![CDATA[Do not use break in for loops]]></name>
		<configKey><![CDATA[Do not use break in for loops]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use break in for loops]]></description>
	</rule>
	<rule key="CODSTA-09" priority="MAJOR">
		<name><![CDATA[Do not cast pointers to functions to pointers to primitive types]]></name>
		<configKey><![CDATA[Do not cast pointers to functions to pointers to primitive types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not cast pointers to functions to pointers to primitive types]]></description>
	</rule>
	<rule key="CODSTA-10" priority="MAJOR">
		<name><![CDATA[Storage type modifiers shall be associated with the type, not the variable or the function]]></name>
		<configKey><![CDATA[Storage type modifiers shall be associated with the type, not the variable or the function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Storage type modifiers shall be associated with the type, not the variable or the function]]></description>
	</rule>
	<rule key="CODSTA-11" priority="INFO">
		<name><![CDATA[Assert liberally to document internal assumptions and invariants]]></name>
		<configKey><![CDATA[Assert liberally to document internal assumptions and invariants]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Assert liberally to document internal assumptions and invariants]]></description>
	</rule>
	<rule key="CODSTA-12" priority="MAJOR">
		<name><![CDATA[Avoid using shift operations instead of arithmetic operations]]></name>
		<configKey><![CDATA[Avoid using shift operations instead of arithmetic operations]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using shift operations instead of arithmetic operations]]></description>
	</rule>
	<rule key="CODSTA-13" priority="MAJOR">
		<name><![CDATA[Avoid pointer arithmetic]]></name>
		<configKey><![CDATA[Avoid pointer arithmetic]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid pointer arithmetic]]></description>
	</rule>
	<rule key="CODSTA-14" priority="MAJOR">
		<name><![CDATA[Never convert consts to non-consts]]></name>
		<configKey><![CDATA[Never convert consts to non-consts]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Never convert consts to non-consts]]></description>
	</rule>
	<rule key="CODSTA-15" priority="CRITICAL">
		<name><![CDATA[Do not declare the size of an array when the array is passed into a function as a parameter]]></name>
		<configKey><![CDATA[Do not declare the size of an array when the array is passed into a function as a parameter]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not declare the size of an array when the array is passed into a function as a parameter]]></description>
	</rule>
	<rule key="CODSTA-16" priority="CRITICAL">
		<name><![CDATA[Do not declare the size of an array when the array is initialized]]></name>
		<configKey><![CDATA[Do not declare the size of an array when the array is initialized]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not declare the size of an array when the array is initialized]]></description>
	</rule>
	<rule key="CODSTA-17" priority="MAJOR">
		<name><![CDATA[Do not compare a pointer to NULL or assign NULL to a pointer; use 0 instead]]></name>
		<configKey><![CDATA[Do not compare a pointer to NULL or assign NULL to a pointer; use 0 instead]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not compare a pointer to NULL or assign NULL to a pointer; use 0 instead]]></description>
	</rule>
	<rule key="CODSTA-18" priority="INFO">
		<name><![CDATA[Prefer while statements over do statements]]></name>
		<configKey><![CDATA[Prefer while statements over do statements]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer while statements over do statements]]></description>
	</rule>
	<rule key="CODSTA-19" priority="MAJOR">
		<name><![CDATA[Use the ctype.h facilities for character test]]></name>
		<configKey><![CDATA[Use the ctype.h facilities for character test]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use the ctype.h facilities for character test]]></description>
	</rule>
	<rule key="CODSTA-20" priority="CRITICAL">
		<name><![CDATA[EOS should be used to terminate a string rather than NULL]]></name>
		<configKey><![CDATA[EOS should be used to terminate a string rather than NULL]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[EOS should be used to terminate a string rather than NULL]]></description>
	</rule>
	<rule key="CODSTA-21" priority="INFO">
		<name><![CDATA[When using enum, the values of each member should be explicitly declared]]></name>
		<configKey><![CDATA[When using enum, the values of each member should be explicitly declared]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[When using enum, the values of each member should be explicitly declared]]></description>
	</rule>
	<rule key="CODSTA-22" priority="BLOCKER">
		<name><![CDATA[Local variable or parameter names and class member variable or parent class/struct member variable names shall differ by more than a single character]]></name>
		<configKey><![CDATA[Local variable or parameter names and class member variable or parent class/struct member variable names shall differ by more than a single character]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Local variable or parameter names and class member variable or parent class/struct member variable names shall differ by more than a single character]]></description>
	</rule>
	<rule key="CODSTA-23" priority="MAJOR">
		<name><![CDATA[All 'if' statements should have an 'else' clause]]></name>
		<configKey><![CDATA[All 'if' statements should have an 'else' clause]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All 'if' statements should have an 'else' clause]]></description>
	</rule>
	<rule key="CODSTA-24" priority="INFO">
		<name><![CDATA[If FALSE is to be defined, and is not already defined, #define FALSE should be 0]]></name>
		<configKey><![CDATA[If FALSE is to be defined, and is not already defined, #define FALSE should be 0]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If FALSE is to be defined, and is not already defined, #define FALSE should be 0]]></description>
	</rule>
	<rule key="CODSTA-25" priority="INFO">
		<name><![CDATA[If FALSE is to be defined, and is not already defined, enum value FALSE should be 0]]></name>
		<configKey><![CDATA[If FALSE is to be defined, and is not already defined, enum value FALSE should be 0]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If FALSE is to be defined, and is not already defined, enum value FALSE should be 0]]></description>
	</rule>
	<rule key="CODSTA-26" priority="MAJOR">
		<name><![CDATA[Avoid magic numbers]]></name>
		<configKey><![CDATA[Avoid magic numbers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid magic numbers]]></description>
	</rule>
	<rule key="CODSTA-27" priority="MAJOR">
		<name><![CDATA[Avoid functions that modify global variables]]></name>
		<configKey><![CDATA[Avoid functions that modify global variables]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid functions that modify global variables]]></description>
	</rule>
	<rule key="CODSTA-28" priority="INFO">
		<name><![CDATA[Define fields for union declarations]]></name>
		<configKey><![CDATA[Define fields for union declarations]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Define fields for union declarations]]></description>
	</rule>
	<rule key="CODSTA-29" priority="MAJOR">
		<name><![CDATA["#define" or enum constants should be used instead of hard coded values whenever possible]]></name>
		<configKey><![CDATA["#define" or enum constants should be used instead of hard coded values whenever possible]]></configKey>
		<category name="Reliability" />
		<description><![CDATA["#define" or enum constants should be used instead of hard coded values whenever possible]]></description>
	</rule>
	<rule key="CODSTA-30" priority="MAJOR">
		<name><![CDATA[Avoid returning handles to function parameters]]></name>
		<configKey><![CDATA[Avoid returning handles to function parameters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid returning handles to function parameters]]></description>
	</rule>
	<rule key="CODSTA-31" priority="MAJOR">
		<name><![CDATA[Never use explicit type conversions (casts)]]></name>
		<configKey><![CDATA[Never use explicit type conversions (casts)]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Never use explicit type conversions (casts)]]></description>
	</rule>
	<rule key="CODSTA-32" priority="MAJOR">
		<name><![CDATA[Do not write logical expressions of the type if(test) or if(!test)  when test is a pointer]]></name>
		<configKey><![CDATA[Do not write logical expressions of the type if(test) or if(!test)  when test is a pointer]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not write logical expressions of the type if(test) or if(!test)  when test is a pointer]]></description>
	</rule>
	<rule key="CODSTA-33" priority="MAJOR">
		<name><![CDATA[Do not use operator ++ or -- in the conditional expression of if, while, or switch]]></name>
		<configKey><![CDATA[Do not use operator ++ or -- in the conditional expression of if, while, or switch]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use operator ++ or -- in the conditional expression of if, while, or switch]]></description>
	</rule>
	<rule key="CODSTA-34" priority="MAJOR">
		<name><![CDATA[Use a typedef to simplify program syntax when declaring function pointers]]></name>
		<configKey><![CDATA[Use a typedef to simplify program syntax when declaring function pointers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use a typedef to simplify program syntax when declaring function pointers]]></description>
	</rule>
	<rule key="CODSTA-35" priority="MAJOR">
		<name><![CDATA[Always provide a default branch for switch statements]]></name>
		<configKey><![CDATA[Always provide a default branch for switch statements]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Always provide a default branch for switch statements]]></description>
	</rule>
	<rule key="CODSTA-36" priority="MAJOR">
		<name><![CDATA[Pass built-in-types by value unless you are modifying them]]></name>
		<configKey><![CDATA[Pass built-in-types by value unless you are modifying them]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Pass built-in-types by value unless you are modifying them]]></description>
	</rule>
	<rule key="CODSTA-37" priority="MAJOR">
		<name><![CDATA[Do not use a #define that prevents the compiler from checking types except ones used only in #ifs and #elifs conditions]]></name>
		<configKey><![CDATA[Do not use a #define that prevents the compiler from checking types except ones used only in #ifs and #elifs conditions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use a #define that prevents the compiler from checking types except ones used only in #ifs and #elifs conditions]]></description>
	</rule>
	<rule key="CODSTA-38" priority="MAJOR">
		<name><![CDATA[Do not use a #define that prevents the compiler from checking types]]></name>
		<configKey><![CDATA[Do not use a #define that prevents the compiler from checking types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use a #define that prevents the compiler from checking types]]></description>
	</rule>
	<rule key="CODSTA-39" priority="BLOCKER">
		<name><![CDATA[Avoid internal or external name conflict with a C++ reserved word]]></name>
		<configKey><![CDATA[Avoid internal or external name conflict with a C++ reserved word]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid internal or external name conflict with a C++ reserved word]]></description>
	</rule>
	<rule key="CODSTA-40" priority="MAJOR">
		<name><![CDATA['void' should be used when a function is passed or returns no values]]></name>
		<configKey><![CDATA['void' should be used when a function is passed or returns no values]]></configKey>
		<category name="Reliability" />
		<description><![CDATA['void' should be used when a function is passed or returns no values]]></description>
	</rule>
	<rule key="CODSTA-41" priority="MINOR">
		<name><![CDATA[Avoid switch statements with only one case]]></name>
		<configKey><![CDATA[Avoid switch statements with only one case]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid switch statements with only one case]]></description>
	</rule>
	<rule key="CODSTA-42" priority="INFO">
		<name><![CDATA[If TRUE is to be defined, and is not already defined, #define TRUE should be 1]]></name>
		<configKey><![CDATA[If TRUE is to be defined, and is not already defined, #define TRUE should be 1]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If TRUE is to be defined, and is not already defined, #define TRUE should be 1]]></description>
	</rule>
	<rule key="CODSTA-43" priority="INFO">
		<name><![CDATA[If TRUE is to be defined, and is not already defined, enum value TRUE should be 1]]></name>
		<configKey><![CDATA[If TRUE is to be defined, and is not already defined, enum value TRUE should be 1]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If TRUE is to be defined, and is not already defined, enum value TRUE should be 1]]></description>
	</rule>
	<rule key="CODSTA-44" priority="BLOCKER">
		<name><![CDATA[Local variables and variables of class/parent classes/parent structs should have different name]]></name>
		<configKey><![CDATA[Local variables and variables of class/parent classes/parent structs should have different name]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Local variables and variables of class/parent classes/parent structs should have different name]]></description>
	</rule>
	<rule key="CODSTA-45" priority="BLOCKER">
		<name><![CDATA[Parameters and variables of class/parent classes/parent structs should have different name]]></name>
		<configKey><![CDATA[Parameters and variables of class/parent classes/parent structs should have different name]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Parameters and variables of class/parent classes/parent structs should have different name]]></description>
	</rule>
	<rule key="CODSTA-46" priority="INFO">
		<name><![CDATA[Use positive logic rather than negative logic whenever practical]]></name>
		<configKey><![CDATA[Use positive logic rather than negative logic whenever practical]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use positive logic rather than negative logic whenever practical]]></description>
	</rule>
	<rule key="CODSTA-47" priority="MAJOR">
		<name><![CDATA[All structures should have typedefs]]></name>
		<configKey><![CDATA[All structures should have typedefs]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All structures should have typedefs]]></description>
	</rule>
	<rule key="CODSTA-48" priority="MAJOR">
		<name><![CDATA[The following digraphs will not be used &lt;%, %&gt;, &lt;:, :&gt;, %:, %:%:]]></name>
		<configKey><![CDATA[The following digraphs will not be used &lt;%, %&gt;, &lt;:, :&gt;, %:, %:%:]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The following digraphs will not be used &lt;%, %&gt;, &lt;:, :&gt;, %:, %:%:]]></description>
	</rule>
	<rule key="CODSTA-49" priority="MAJOR">
		<name><![CDATA[Null initialize or increment expressions in for loops will not be used; a while loop will be used instead]]></name>
		<configKey><![CDATA[Null initialize or increment expressions in for loops will not be used; a while loop will be used instead]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Null initialize or increment expressions in for loops will not be used; a while loop will be used instead]]></description>
	</rule>
	<rule key="CODSTA-50" priority="MAJOR">
		<name><![CDATA[Hexadecimal constants will be represented using all uppercase letters]]></name>
		<configKey><![CDATA[Hexadecimal constants will be represented using all uppercase letters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hexadecimal constants will be represented using all uppercase letters]]></description>
	</rule>
	<rule key="CODSTA-51" priority="CRITICAL">
		<name><![CDATA[Literal suffixes shall use uppercase rather than lowercase letters]]></name>
		<configKey><![CDATA[Literal suffixes shall use uppercase rather than lowercase letters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Literal suffixes shall use uppercase rather than lowercase letters]]></description>
	</rule>
	<rule key="CODSTA-52" priority="MAJOR">
		<name><![CDATA[The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter]]></name>
		<configKey><![CDATA[The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter]]></description>
	</rule>
	<rule key="CODSTA-53" priority="MAJOR">
		<name><![CDATA[The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop]]></name>
		<configKey><![CDATA[The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop]]></description>
	</rule>
	<rule key="CODSTA-54" priority="MAJOR">
		<name><![CDATA[Every switch statement will have at least two cases and a potential default]]></name>
		<configKey><![CDATA[Every switch statement will have at least two cases and a potential default]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Every switch statement will have at least two cases and a potential default]]></description>
	</rule>
	<rule key="CODSTA-55" priority="CRITICAL">
		<name><![CDATA[Enumeration types shall be used instead of integer types (and constants) as case labels]]></name>
		<configKey><![CDATA[Enumeration types shall be used instead of integer types (and constants) as case labels]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Enumeration types shall be used instead of integer types (and constants) as case labels]]></description>
	</rule>
	<rule key="CODSTA-56" priority="MAJOR">
		<name><![CDATA[All 'case' and 'default' labels of switch statement should have an explicit break or a return statement, or 'fall through' comment]]></name>
		<configKey><![CDATA[All 'case' and 'default' labels of switch statement should have an explicit break or a return statement, or 'fall through' comment]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All 'case' and 'default' labels of switch statement should have an explicit break or a return statement, or 'fall through' comment]]></description>
	</rule>
	<rule key="CODSTA-57" priority="MINOR">
		<name><![CDATA[Suspicious use of semicolon]]></name>
		<configKey><![CDATA[Suspicious use of semicolon]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Suspicious use of semicolon]]></description>
	</rule>
	<rule key="CODSTA-58" priority="MINOR">
		<name><![CDATA[Cast to void is not allowed]]></name>
		<configKey><![CDATA[Cast to void is not allowed]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Cast to void is not allowed]]></description>
	</rule>
	<rule key="CODSTA-59" priority="MINOR">
		<name><![CDATA[Hardcoded array declarations and 'malloc' calls should not be used]]></name>
		<configKey><![CDATA[Hardcoded array declarations and 'malloc' calls should not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hardcoded array declarations and 'malloc' calls should not be used]]></description>
	</rule>
	<rule key="CODSTA-60" priority="MAJOR">
		<name><![CDATA[Avoid comparing values with TRUE macro/enum constant using equality operators ("==", "!=")]]></name>
		<configKey><![CDATA[Avoid comparing values with TRUE macro/enum constant using equality operators ("==", "!=")]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid comparing values with TRUE macro/enum constant using equality operators ("==", "!=")]]></description>
	</rule>
	<rule key="CODSTA-61" priority="MAJOR">
		<name><![CDATA[The final clause of a switch statement shall be the default-clause]]></name>
		<configKey><![CDATA[The final clause of a switch statement shall be the default-clause]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The final clause of a switch statement shall be the default-clause]]></description>
	</rule>
	<rule key="CODSTA-62" priority="MAJOR">
		<name><![CDATA[A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type]]></name>
		<configKey><![CDATA[A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type]]></description>
	</rule>
	<rule key="CODSTA-63" priority="MAJOR">
		<name><![CDATA[Bitwise operators shall only be applied to operands of unsigned underlying type]]></name>
		<configKey><![CDATA[Bitwise operators shall only be applied to operands of unsigned underlying type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Bitwise operators shall only be applied to operands of unsigned underlying type]]></description>
	</rule>
	<rule key="CODSTA-64" priority="MAJOR">
		<name><![CDATA[An unconditional throw or break statement shall terminate every non-empty switch-clause]]></name>
		<configKey><![CDATA[An unconditional throw or break statement shall terminate every non-empty switch-clause]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An unconditional throw or break statement shall terminate every non-empty switch-clause]]></description>
	</rule>
	<rule key="CODSTA-65" priority="MAJOR">
		<name><![CDATA[An object with integer type or pointer to void type shall not be converted to an object with pointer type]]></name>
		<configKey><![CDATA[An object with integer type or pointer to void type shall not be converted to an object with pointer type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An object with integer type or pointer to void type shall not be converted to an object with pointer type]]></description>
	</rule>
	<rule key="CODSTA-66" priority="MAJOR">
		<name><![CDATA[Non-constant operands to a binary bitwise operator shall have the same underlying type]]></name>
		<configKey><![CDATA[Non-constant operands to a binary bitwise operator shall have the same underlying type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Non-constant operands to a binary bitwise operator shall have the same underlying type]]></description>
	</rule>
	<rule key="CODSTA-67" priority="MAJOR">
		<name><![CDATA[The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations]]></name>
		<configKey><![CDATA[The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations]]></description>
	</rule>
	<rule key="CODSTA-68" priority="MAJOR">
		<name><![CDATA[A "U" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type]]></name>
		<configKey><![CDATA[A "U" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A "U" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type]]></description>
	</rule>
	<rule key="CODSTA-69" priority="MAJOR">
		<name><![CDATA[Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator]]></name>
		<configKey><![CDATA[Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator]]></description>
	</rule>
	<rule key="CODSTA-70" priority="MAJOR">
		<name><![CDATA[Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, &lt;, &lt;=, &gt;, &gt;=, and the unary &amp; operator]]></name>
		<configKey><![CDATA[Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, &lt;, &lt;=, &gt;, &gt;=, and the unary &amp; operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, &lt;, &lt;=, &gt;, &gt;=, and the unary &amp; operator]]></description>
	</rule>
	<rule key="CODSTA-71" priority="MAJOR">
		<name><![CDATA[Named bit-fields with signed integer type shall have a length of more than one bit]]></name>
		<configKey><![CDATA[Named bit-fields with signed integer type shall have a length of more than one bit]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Named bit-fields with signed integer type shall have a length of more than one bit]]></description>
	</rule>
	<rule key="CODSTA-73" priority="MAJOR">
		<name><![CDATA[Assembler instructions shall only be introduced using the asm declaration]]></name>
		<configKey><![CDATA[Assembler instructions shall only be introduced using the asm declaration]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Assembler instructions shall only be introduced using the asm declaration]]></description>
	</rule>
	<rule key="CODSTA-74" priority="MAJOR">
		<name><![CDATA[Bit-fields shall not have enum type]]></name>
		<configKey><![CDATA[Bit-fields shall not have enum type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Bit-fields shall not have enum type]]></description>
	</rule>
	<rule key="CODSTA-75" priority="MAJOR">
		<name><![CDATA[Bit-fields shall be either bool type or an explicitly unsigned or signed integral type]]></name>
		<configKey><![CDATA[Bit-fields shall be either bool type or an explicitly unsigned or signed integral type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Bit-fields shall be either bool type or an explicitly unsigned or signed integral type]]></description>
	</rule>
	<rule key="CODSTA-76" priority="MAJOR">
		<name><![CDATA[The identifier main shall not be used for a function other than the global function main]]></name>
		<configKey><![CDATA[The identifier main shall not be used for a function other than the global function main]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The identifier main shall not be used for a function other than the global function main]]></description>
	</rule>
	<rule key="CODSTA-77" priority="MAJOR">
		<name><![CDATA[The goto statement shall jump to a label declared later in the same function body]]></name>
		<configKey><![CDATA[The goto statement shall jump to a label declared later in the same function body]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The goto statement shall jump to a label declared later in the same function body]]></description>
	</rule>
	<rule key="CODSTA-78" priority="MAJOR">
		<name><![CDATA[Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement]]></name>
		<configKey><![CDATA[Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement]]></description>
	</rule>
	<rule key="CODSTA-79" priority="MAJOR">
		<name><![CDATA[For any iteration statement there shall be no more than one break or goto statement used for loop termination]]></name>
		<configKey><![CDATA[For any iteration statement there shall be no more than one break or goto statement used for loop termination]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[For any iteration statement there shall be no more than one break or goto statement used for loop termination]]></description>
	</rule>
	<rule key="CODSTA-80" priority="MAJOR">
		<name><![CDATA[The continue statement shall only be used within a well formed for loop]]></name>
		<configKey><![CDATA[The continue statement shall only be used within a well formed for loop]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The continue statement shall only be used within a well formed for loop]]></description>
	</rule>
	<rule key="CODSTA-81" priority="MAJOR">
		<name><![CDATA[If a function has internal linkage then all redeclarations shall include the static storage class specifier]]></name>
		<configKey><![CDATA[If a function has internal linkage then all redeclarations shall include the static storage class specifier]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If a function has internal linkage then all redeclarations shall include the static storage class specifier]]></description>
	</rule>
	<rule key="CODSTA-82" priority="MAJOR">
		<name><![CDATA[Avoid infinite loops]]></name>
		<configKey><![CDATA[Avoid infinite loops]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid infinite loops]]></description>
	</rule>
	<rule key="CODSTA-83" priority="MAJOR">
		<name><![CDATA[All loops must have a fixed upper or lower bound]]></name>
		<configKey><![CDATA[All loops must have a fixed upper or lower bound]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All loops must have a fixed upper or lower bound]]></description>
	</rule>
	<rule key="CODSTA-85" priority="MAJOR">
		<name><![CDATA[Avoid exit points within infinite loops]]></name>
		<configKey><![CDATA[Avoid exit points within infinite loops]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid exit points within infinite loops]]></description>
	</rule>
	<rule key="CODSTA-86" priority="MAJOR">
		<name><![CDATA[The validity of parameters must be checked inside each function]]></name>
		<configKey><![CDATA[The validity of parameters must be checked inside each function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The validity of parameters must be checked inside each function]]></description>
	</rule>
	<rule key="CODSTA-87" priority="MAJOR">
		<name><![CDATA[Use no more than one level of dereferencing]]></name>
		<configKey><![CDATA[Use no more than one level of dereferencing]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use no more than one level of dereferencing]]></description>
	</rule>
	<rule key="CODSTA-88" priority="MAJOR">
		<name><![CDATA[Function pointers are not permitted]]></name>
		<configKey><![CDATA[Function pointers are not permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Function pointers are not permitted]]></description>
	</rule>
	<rule key="CODSTA-89" priority="MAJOR">
		<name><![CDATA[The declaration should not contain more than one level of pointer indirection]]></name>
		<configKey><![CDATA[The declaration should not contain more than one level of pointer indirection]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The declaration should not contain more than one level of pointer indirection]]></description>
	</rule>
	<rule key="CODSTA-90" priority="MAJOR">
		<name><![CDATA[Each operand of a logical '&amp;&amp;' or '||' shall be a postfix-expression]]></name>
		<configKey><![CDATA[Each operand of a logical '&amp;&amp;' or '||' shall be a postfix-expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each operand of a logical '&amp;&amp;' or '||' shall be a postfix-expression]]></description>
	</rule>
	<rule key="CODSTA-91" priority="MAJOR">
		<name><![CDATA[A function shall have at most one exit point]]></name>
		<configKey><![CDATA[A function shall have at most one exit point]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A function shall have at most one exit point]]></description>
	</rule>
	<rule key="CODSTA-CPP-01" priority="INFO">
		<name><![CDATA[Prefer iostream.h to stdio.h]]></name>
		<configKey><![CDATA[Prefer iostream.h to stdio.h]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer iostream.h to stdio.h]]></description>
	</rule>
	<rule key="CODSTA-CPP-02" priority="MAJOR">
		<name><![CDATA[Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type]]></name>
		<configKey><![CDATA[Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type]]></description>
	</rule>
	<rule key="CODSTA-CPP-03" priority="MAJOR">
		<name><![CDATA[Bitwise operators, comparison operators, logical operators, comma operator should be const]]></name>
		<configKey><![CDATA[Bitwise operators, comparison operators, logical operators, comma operator should be const]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Bitwise operators, comparison operators, logical operators, comma operator should be const]]></description>
	</rule>
	<rule key="CODSTA-CPP-04" priority="BLOCKER">
		<name><![CDATA[Constructors allowing for conversion should be made explicit]]></name>
		<configKey><![CDATA[Constructors allowing for conversion should be made explicit]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Constructors allowing for conversion should be made explicit]]></description>
	</rule>
	<rule key="CODSTA-CPP-05" priority="BLOCKER">
		<name><![CDATA[Do not use user-defined conversion functions]]></name>
		<configKey><![CDATA[Do not use user-defined conversion functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use user-defined conversion functions]]></description>
	</rule>
	<rule key="CODSTA-CPP-06" priority="MAJOR">
		<name><![CDATA[Avoid returning handles to class data from member functions]]></name>
		<configKey><![CDATA[Avoid returning handles to class data from member functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid returning handles to class data from member functions]]></description>
	</rule>
	<rule key="CODSTA-CPP-07" priority="MAJOR">
		<name><![CDATA[Postfix increment and decrement should be implemented in terms of their prefix counterparts]]></name>
		<configKey><![CDATA[Postfix increment and decrement should be implemented in terms of their prefix counterparts]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Postfix increment and decrement should be implemented in terms of their prefix counterparts]]></description>
	</rule>
	<rule key="CODSTA-CPP-08" priority="MAJOR">
		<name><![CDATA[Avoid overloading &amp;&amp;, || or , (comma)]]></name>
		<configKey><![CDATA[Avoid overloading &amp;&amp;, || or , (comma)]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid overloading &amp;&amp;, || or , (comma)]]></description>
	</rule>
	<rule key="CODSTA-CPP-09" priority="MAJOR">
		<name><![CDATA[Avoid using reinterpret_cast]]></name>
		<configKey><![CDATA[Avoid using reinterpret_cast]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using reinterpret_cast]]></description>
	</rule>
	<rule key="CODSTA-CPP-10" priority="MAJOR">
		<name><![CDATA[Do not define structs that contain member functions]]></name>
		<configKey><![CDATA[Do not define structs that contain member functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not define structs that contain member functions]]></description>
	</rule>
	<rule key="CODSTA-CPP-11" priority="MAJOR">
		<name><![CDATA[Prefer C++-style casts]]></name>
		<configKey><![CDATA[Prefer C++-style casts]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer C++-style casts]]></description>
	</rule>
	<rule key="CODSTA-CPP-12" priority="MAJOR">
		<name><![CDATA[Put classes that are used as base classes and classes that are used as member variables into separate include files]]></name>
		<configKey><![CDATA[Put classes that are used as base classes and classes that are used as member variables into separate include files]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Put classes that are used as base classes and classes that are used as member variables into separate include files]]></description>
	</rule>
	<rule key="CODSTA-CPP-13" priority="MAJOR">
		<name><![CDATA[Put classes that are used as function return type into separate include files]]></name>
		<configKey><![CDATA[Put classes that are used as function return type into separate include files]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Put classes that are used as function return type into separate include files]]></description>
	</rule>
	<rule key="CODSTA-CPP-14" priority="MAJOR">
		<name><![CDATA[Put classes that are used as argument types in function prototypes into separate include files]]></name>
		<configKey><![CDATA[Put classes that are used as argument types in function prototypes into separate include files]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Put classes that are used as argument types in function prototypes into separate include files]]></description>
	</rule>
	<rule key="CODSTA-CPP-15" priority="MAJOR">
		<name><![CDATA[Put functions that are used in the body of inline member function into separate include file]]></name>
		<configKey><![CDATA[Put functions that are used in the body of inline member function into separate include file]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Put functions that are used in the body of inline member function into separate include file]]></description>
	</rule>
	<rule key="CODSTA-CPP-16" priority="MAJOR">
		<name><![CDATA[When two operators are opposites (such as == and !=), it is appropriate to define both]]></name>
		<configKey><![CDATA[When two operators are opposites (such as == and !=), it is appropriate to define both]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[When two operators are opposites (such as == and !=), it is appropriate to define both]]></description>
	</rule>
	<rule key="CODSTA-CPP-17" priority="MAJOR">
		<name><![CDATA[Do not use the 'struct' keyword to declare a variable in C++]]></name>
		<configKey><![CDATA[Do not use the 'struct' keyword to declare a variable in C++]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use the 'struct' keyword to declare a variable in C++]]></description>
	</rule>
	<rule key="CODSTA-CPP-18" priority="INFO">
		<name><![CDATA[Encapsulate global variables and constants, enumerated types, and typedefs in a class]]></name>
		<configKey><![CDATA[Encapsulate global variables and constants, enumerated types, and typedefs in a class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Encapsulate global variables and constants, enumerated types, and typedefs in a class]]></description>
	</rule>
	<rule key="CODSTA-CPP-19" priority="CRITICAL">
		<name><![CDATA[Declare at least one constructor to prevent the compiler from doing so]]></name>
		<configKey><![CDATA[Declare at least one constructor to prevent the compiler from doing so]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Declare at least one constructor to prevent the compiler from doing so]]></description>
	</rule>
	<rule key="CODSTA-CPP-20" priority="MAJOR">
		<name><![CDATA[If you'd like to support mixed-mode operations make operators a non-member functions]]></name>
		<configKey><![CDATA[If you'd like to support mixed-mode operations make operators a non-member functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If you'd like to support mixed-mode operations make operators a non-member functions]]></description>
	</rule>
	<rule key="CODSTA-CPP-21" priority="INFO">
		<name><![CDATA[Assignment operator must return const reference]]></name>
		<configKey><![CDATA[Assignment operator must return const reference]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Assignment operator must return const reference]]></description>
	</rule>
	<rule key="CODSTA-CPP-22" priority="MAJOR">
		<name><![CDATA[Prefer non-member non-friend functions to member functions]]></name>
		<configKey><![CDATA[Prefer non-member non-friend functions to member functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer non-member non-friend functions to member functions]]></description>
	</rule>
	<rule key="CODSTA-CPP-23" priority="INFO">
		<name><![CDATA[Whenever a global function  is  referenced, use the :: operator]]></name>
		<configKey><![CDATA[Whenever a global function  is  referenced, use the :: operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Whenever a global function  is  referenced, use the :: operator]]></description>
	</rule>
	<rule key="CODSTA-CPP-24" priority="MAJOR">
		<name><![CDATA[Avoid making any assignment operator virtual. Do not return const T&amp; from assignment operator]]></name>
		<configKey><![CDATA[Avoid making any assignment operator virtual. Do not return const T&amp; from assignment operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid making any assignment operator virtual. Do not return const T&amp; from assignment operator]]></description>
	</rule>
	<rule key="CODSTA-CPP-25" priority="MAJOR">
		<name><![CDATA[Consider making virtual functions nonpublic, and public functions nonvirtual]]></name>
		<configKey><![CDATA[Consider making virtual functions nonpublic, and public functions nonvirtual]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Consider making virtual functions nonpublic, and public functions nonvirtual]]></description>
	</rule>
	<rule key="CODSTA-CPP-26" priority="MAJOR">
		<name><![CDATA[Keep types and functions in separate namespaces unless they're specifically intended to work together]]></name>
		<configKey><![CDATA[Keep types and functions in separate namespaces unless they're specifically intended to work together]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Keep types and functions in separate namespaces unless they're specifically intended to work together]]></description>
	</rule>
	<rule key="CODSTA-CPP-27" priority="MAJOR">
		<name><![CDATA[Keep a type and its nonmember function interface in the same namespace]]></name>
		<configKey><![CDATA[Keep a type and its nonmember function interface in the same namespace]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Keep a type and its nonmember function interface in the same namespace]]></description>
	</rule>
	<rule key="CODSTA-CPP-28" priority="MAJOR">
		<name><![CDATA[When binary arithmetic operators are defined  ( + , - , * , / , ^ , % , | , &amp; , &gt;&gt; , &lt;&lt; ), assignment versions should be provided too]]></name>
		<configKey><![CDATA[When binary arithmetic operators are defined  ( + , - , * , / , ^ , % , | , &amp; , &gt;&gt; , &lt;&lt; ), assignment versions should be provided too]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[When binary arithmetic operators are defined  ( + , - , * , / , ^ , % , | , &amp; , &gt;&gt; , &lt;&lt; ), assignment versions should be provided too]]></description>
	</rule>
	<rule key="CODSTA-CPP-29" priority="MAJOR">
		<name><![CDATA[Prefer the canonical forms of arithmetic and assignment operators]]></name>
		<configKey><![CDATA[Prefer the canonical forms of arithmetic and assignment operators]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer the canonical forms of arithmetic and assignment operators]]></description>
	</rule>
	<rule key="CODSTA-CPP-30" priority="MAJOR">
		<name><![CDATA[Prefer non-member operators than member ones to support mixed-mode arithmetic]]></name>
		<configKey><![CDATA[Prefer non-member operators than member ones to support mixed-mode arithmetic]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer non-member operators than member ones to support mixed-mode arithmetic]]></description>
	</rule>
	<rule key="CODSTA-CPP-31" priority="INFO">
		<name><![CDATA[Do not use the keyword 'explicit' for a constructor]]></name>
		<configKey><![CDATA[Do not use the keyword 'explicit' for a constructor]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use the keyword 'explicit' for a constructor]]></description>
	</rule>
	<rule key="CODSTA-CPP-32" priority="MAJOR">
		<name><![CDATA[Member functions shall not be defined within the no-template class definition]]></name>
		<configKey><![CDATA[Member functions shall not be defined within the no-template class definition]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Member functions shall not be defined within the no-template class definition]]></description>
	</rule>
	<rule key="CODSTA-CPP-33" priority="MAJOR">
		<name><![CDATA[Member functions shall not be defined within the template class definition]]></name>
		<configKey><![CDATA[Member functions shall not be defined within the template class definition]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Member functions shall not be defined within the template class definition]]></description>
	</rule>
	<rule key="CODSTA-CPP-34" priority="MAJOR">
		<name><![CDATA[Avoid using static_cast on pointers]]></name>
		<configKey><![CDATA[Avoid using static_cast on pointers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using static_cast on pointers]]></description>
	</rule>
	<rule key="CODSTA-CPP-35" priority="MAJOR">
		<name><![CDATA[Avoid dynamic_casts]]></name>
		<configKey><![CDATA[Avoid dynamic_casts]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid dynamic_casts]]></description>
	</rule>
	<rule key="CODSTA-CPP-36" priority="MAJOR">
		<name><![CDATA[Avoid using global variables, global functions, and class in file outside namespaces]]></name>
		<configKey><![CDATA[Avoid using global variables, global functions, and class in file outside namespaces]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using global variables, global functions, and class in file outside namespaces]]></description>
	</rule>
	<rule key="CODSTA-CPP-37" priority="MAJOR">
		<name><![CDATA[Do not define class/struct/union inside function implementation]]></name>
		<configKey><![CDATA[Do not define class/struct/union inside function implementation]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not define class/struct/union inside function implementation]]></description>
	</rule>
	<rule key="CODSTA-CPP-38" priority="MAJOR">
		<name><![CDATA[Conversion operator, operator-&gt;, operator(), operator[] should be const]]></name>
		<configKey><![CDATA[Conversion operator, operator-&gt;, operator(), operator[] should be const]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Conversion operator, operator-&gt;, operator(), operator[] should be const]]></description>
	</rule>
	<rule key="CODSTA-CPP-39" priority="MAJOR">
		<name><![CDATA[Don't write namespace usings in a header file or before an #include]]></name>
		<configKey><![CDATA[Don't write namespace usings in a header file or before an #include]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't write namespace usings in a header file or before an #include]]></description>
	</rule>
	<rule key="CODSTA-CPP-40" priority="INFO">
		<name><![CDATA[Limiting the number of objects of a class]]></name>
		<configKey><![CDATA[Limiting the number of objects of a class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Limiting the number of objects of a class]]></description>
	</rule>
	<rule key="CODSTA-CPP-41" priority="MAJOR">
		<name><![CDATA[Do not use the 'enum' keyword to declare a variable in C++]]></name>
		<configKey><![CDATA[Do not use the 'enum' keyword to declare a variable in C++]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use the 'enum' keyword to declare a variable in C++]]></description>
	</rule>
	<rule key="CODSTA-CPP-42" priority="MAJOR">
		<name><![CDATA[Do not declare member variables with the 'mutable' keyword]]></name>
		<configKey><![CDATA[Do not declare member variables with the 'mutable' keyword]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not declare member variables with the 'mutable' keyword]]></description>
	</rule>
	<rule key="CODSTA-CPP-43" priority="MAJOR">
		<name><![CDATA[Declare reference parameters as const references whenever possible]]></name>
		<configKey><![CDATA[Declare reference parameters as const references whenever possible]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Declare reference parameters as const references whenever possible]]></description>
	</rule>
	<rule key="CODSTA-CPP-44" priority="MAJOR">
		<name><![CDATA[Have the non-const version call the const version of member function instead of duplicating the const version definition]]></name>
		<configKey><![CDATA[Have the non-const version call the const version of member function instead of duplicating the const version definition]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Have the non-const version call the const version of member function instead of duplicating the const version definition]]></description>
	</rule>
	<rule key="CODSTA-CPP-45" priority="MAJOR">
		<name><![CDATA[In the private section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others]]></name>
		<configKey><![CDATA[In the private section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[In the private section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others]]></description>
	</rule>
	<rule key="CODSTA-CPP-46" priority="MAJOR">
		<name><![CDATA[Order of scopes in class: public before all others]]></name>
		<configKey><![CDATA[Order of scopes in class: public before all others]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Order of scopes in class: public before all others]]></description>
	</rule>
	<rule key="CODSTA-CPP-47" priority="MAJOR">
		<name><![CDATA[Order of scopes in classes: protected before private]]></name>
		<configKey><![CDATA[Order of scopes in classes: protected before private]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Order of scopes in classes: protected before private]]></description>
	</rule>
	<rule key="CODSTA-CPP-48" priority="MAJOR">
		<name><![CDATA[In the protected section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others]]></name>
		<configKey><![CDATA[In the protected section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[In the protected section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others]]></description>
	</rule>
	<rule key="CODSTA-CPP-49" priority="MAJOR">
		<name><![CDATA[In the public section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others]]></name>
		<configKey><![CDATA[In the public section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[In the public section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others]]></description>
	</rule>
	<rule key="CODSTA-CPP-50" priority="MAJOR">
		<name><![CDATA[Do not use static keyword except inside functions and classes]]></name>
		<configKey><![CDATA[Do not use static keyword except inside functions and classes]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use static keyword except inside functions and classes]]></description>
	</rule>
	<rule key="CODSTA-CPP-51" priority="MAJOR">
		<name><![CDATA[Do not define inline functions in source files]]></name>
		<configKey><![CDATA[Do not define inline functions in source files]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not define inline functions in source files]]></description>
	</rule>
	<rule key="CODSTA-CPP-52" priority="MAJOR">
		<name><![CDATA[Consider using the natural relationship between the assignment version of an operator and the stand-alone version]]></name>
		<configKey><![CDATA[Consider using the natural relationship between the assignment version of an operator and the stand-alone version]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Consider using the natural relationship between the assignment version of an operator and the stand-alone version]]></description>
	</rule>
	<rule key="CODSTA-CPP-53" priority="MAJOR">
		<name><![CDATA[Declare parameters or local variable as const whenever possible]]></name>
		<configKey><![CDATA[Declare parameters or local variable as const whenever possible]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Declare parameters or local variable as const whenever possible]]></description>
	</rule>
	<rule key="CODSTA-CPP-54" priority="MAJOR">
		<name><![CDATA[Member functions shall be declared const whenever possible]]></name>
		<configKey><![CDATA[Member functions shall be declared const whenever possible]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Member functions shall be declared const whenever possible]]></description>
	</rule>
	<rule key="CODSTA-CPP-55" priority="CRITICAL">
		<name><![CDATA[Arrays shall not be used in interfaces]]></name>
		<configKey><![CDATA[Arrays shall not be used in interfaces]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Arrays shall not be used in interfaces]]></description>
	</rule>
	<rule key="CODSTA-CPP-56" priority="MAJOR">
		<name><![CDATA[A class, structure, or enumeration will not be declared in the definition of its type]]></name>
		<configKey><![CDATA[A class, structure, or enumeration will not be declared in the definition of its type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A class, structure, or enumeration will not be declared in the definition of its type]]></description>
	</rule>
	<rule key="CODSTA-CPP-57" priority="MAJOR">
		<name><![CDATA[Namespaces will not be nested more than two levels deep]]></name>
		<configKey><![CDATA[Namespaces will not be nested more than two levels deep]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Namespaces will not be nested more than two levels deep]]></description>
	</rule>
	<rule key="CODSTA-CPP-58" priority="MAJOR">
		<name><![CDATA[The value returned by a function having a non-void return type that is not an overloaded operator shall always be used]]></name>
		<configKey><![CDATA[The value returned by a function having a non-void return type that is not an overloaded operator shall always be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The value returned by a function having a non-void return type that is not an overloaded operator shall always be used]]></description>
	</rule>
	<rule key="CODSTA-CPP-59" priority="MAJOR">
		<name><![CDATA[The C library shall not be used]]></name>
		<configKey><![CDATA[The C library shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The C library shall not be used]]></description>
	</rule>
	<rule key="CODSTA-CPP-60" priority="MAJOR">
		<name><![CDATA[Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used]]></name>
		<configKey><![CDATA[Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used]]></description>
	</rule>
	<rule key="CODSTA-CPP-61" priority="MAJOR">
		<name><![CDATA[Objects or functions with external linkage shall be declared in a header file]]></name>
		<configKey><![CDATA[Objects or functions with external linkage shall be declared in a header file]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Objects or functions with external linkage shall be declared in a header file]]></description>
	</rule>
	<rule key="CODSTA-CPP-62" priority="MAJOR">
		<name><![CDATA[NULL shall not be used as an integer value]]></name>
		<configKey><![CDATA[NULL shall not be used as an integer value]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[NULL shall not be used as an integer value]]></description>
	</rule>
	<rule key="CODSTA-CPP-63" priority="MAJOR">
		<name><![CDATA[Literal zero (0) shall not be used as the null-pointer-constant]]></name>
		<configKey><![CDATA[Literal zero (0) shall not be used as the null-pointer-constant]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Literal zero (0) shall not be used as the null-pointer-constant]]></description>
	</rule>
	<rule key="CODSTA-CPP-64" priority="MAJOR">
		<name><![CDATA[The condition of an if-statement and the condition of an iteration-statement shall have type bool]]></name>
		<configKey><![CDATA[The condition of an if-statement and the condition of an iteration-statement shall have type bool]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The condition of an if-statement and the condition of an iteration-statement shall have type bool]]></description>
	</rule>
	<rule key="CODSTA-CPP-65" priority="BLOCKER">
		<name><![CDATA[The first operand of a conditional-operator shall have type bool]]></name>
		<configKey><![CDATA[The first operand of a conditional-operator shall have type bool]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The first operand of a conditional-operator shall have type bool]]></description>
	</rule>
	<rule key="CODSTA-CPP-66" priority="MAJOR">
		<name><![CDATA[C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used]]></name>
		<configKey><![CDATA[C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used]]></description>
	</rule>
	<rule key="CODSTA-CPP-67" priority="MAJOR">
		<name><![CDATA[Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool]]></name>
		<configKey><![CDATA[Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool]]></description>
	</rule>
	<rule key="CODSTA-CPP-68" priority="MAJOR">
		<name><![CDATA[The unary &amp; operator shall not be overloaded]]></name>
		<configKey><![CDATA[The unary &amp; operator shall not be overloaded]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The unary &amp; operator shall not be overloaded]]></description>
	</rule>
	<rule key="CODSTA-CPP-69" priority="MAJOR">
		<name><![CDATA[A for loop shall contain a single loop-counter which shall not have floating type]]></name>
		<configKey><![CDATA[A for loop shall contain a single loop-counter which shall not have floating type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A for loop shall contain a single loop-counter which shall not have floating type]]></description>
	</rule>
	<rule key="CODSTA-CPP-70" priority="MAJOR">
		<name><![CDATA[If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, &gt; or &gt;=]]></name>
		<configKey><![CDATA[If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, &gt; or &gt;=]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, &gt; or &gt;=]]></description>
	</rule>
	<rule key="CODSTA-CPP-71" priority="MAJOR">
		<name><![CDATA[The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop]]></name>
		<configKey><![CDATA[The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop]]></description>
	</rule>
	<rule key="CODSTA-CPP-72" priority="MAJOR">
		<name><![CDATA[A loop-control-variable other than the loop-counter shall not be modified within condition or expression]]></name>
		<configKey><![CDATA[A loop-control-variable other than the loop-counter shall not be modified within condition or expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A loop-control-variable other than the loop-counter shall not be modified within condition or expression]]></description>
	</rule>
	<rule key="CODSTA-CPP-73" priority="MAJOR">
		<name><![CDATA[A loop-control-variable other than the loop-counter which is modified in statement shall have type bool]]></name>
		<configKey><![CDATA[A loop-control-variable other than the loop-counter which is modified in statement shall have type bool]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A loop-control-variable other than the loop-counter which is modified in statement shall have type bool]]></description>
	</rule>
	<rule key="CODSTA-CPP-74" priority="MAJOR">
		<name><![CDATA[There shall be no unnamed namespaces in header files]]></name>
		<configKey><![CDATA[There shall be no unnamed namespaces in header files]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unnamed namespaces in header files]]></description>
	</rule>
	<rule key="CODSTA-CPP-75" priority="MAJOR">
		<name><![CDATA[using-directives shall not be used]]></name>
		<configKey><![CDATA[using-directives shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[using-directives shall not be used]]></description>
	</rule>
	<rule key="CODSTA-CPP-76" priority="MAJOR">
		<name><![CDATA[Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier]]></name>
		<configKey><![CDATA[Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier]]></description>
	</rule>
	<rule key="CODSTA-CPP-77" priority="MAJOR">
		<name><![CDATA[Const member functions shall not return non-const pointers or references to class-data]]></name>
		<configKey><![CDATA[Const member functions shall not return non-const pointers or references to class-data]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Const member functions shall not return non-const pointers or references to class-data]]></description>
	</rule>
	<rule key="CODSTA-CPP-78" priority="MAJOR">
		<name><![CDATA[If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const]]></name>
		<configKey><![CDATA[If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const]]></description>
	</rule>
	<rule key="COMMENT-01" priority="MAJOR">
		<name><![CDATA[Prefer C++ style comment]]></name>
		<configKey><![CDATA[Prefer C++ style comment]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer C++ style comment]]></description>
	</rule>
	<rule key="COMMENT-02" priority="MAJOR">
		<name><![CDATA[Provide copyright information]]></name>
		<configKey><![CDATA[Provide copyright information]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Provide copyright information]]></description>
	</rule>
	<rule key="COMMENT-03" priority="MAJOR">
		<name><![CDATA[Comment every file]]></name>
		<configKey><![CDATA[Comment every file]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Comment every file]]></description>
	</rule>
	<rule key="COMMENT-04" priority="MAJOR">
		<name><![CDATA[Comment every function]]></name>
		<configKey><![CDATA[Comment every function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Comment every function]]></description>
	</rule>
	<rule key="COMMENT-05" priority="MAJOR">
		<name><![CDATA[Each variable declaration should be commented]]></name>
		<configKey><![CDATA[Each variable declaration should be commented]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each variable declaration should be commented]]></description>
	</rule>
	<rule key="COMMENT-06" priority="MAJOR">
		<name><![CDATA[Each typedef should be commented]]></name>
		<configKey><![CDATA[Each typedef should be commented]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each typedef should be commented]]></description>
	</rule>
	<rule key="COMMENT-07" priority="MAJOR">
		<name><![CDATA[Each enumeration value should be commented]]></name>
		<configKey><![CDATA[Each enumeration value should be commented]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each enumeration value should be commented]]></description>
	</rule>
	<rule key="COMMENT-08" priority="MAJOR">
		<name><![CDATA[Each structure member variable should be commented]]></name>
		<configKey><![CDATA[Each structure member variable should be commented]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each structure member variable should be commented]]></description>
	</rule>
	<rule key="COMMENT-09" priority="MAJOR">
		<name><![CDATA[All usage of assembler shall be documented]]></name>
		<configKey><![CDATA[All usage of assembler shall be documented]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All usage of assembler shall be documented]]></description>
	</rule>
	<rule key="COMMENT-10" priority="MAJOR">
		<name><![CDATA[Use of floating-point arithmetic shall be documented]]></name>
		<configKey><![CDATA[Use of floating-point arithmetic shall be documented]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use of floating-point arithmetic shall be documented]]></description>
	</rule>
	<rule key="EXCEPT-01" priority="BLOCKER">
		<name><![CDATA[Never allow an exception to be thrown from a destructor, deallocation, and swap]]></name>
		<configKey><![CDATA[Never allow an exception to be thrown from a destructor, deallocation, and swap]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Never allow an exception to be thrown from a destructor, deallocation, and swap]]></description>
	</rule>
	<rule key="EXCEPT-02" priority="BLOCKER">
		<name><![CDATA[Throw by value, catch by reference]]></name>
		<configKey><![CDATA[Throw by value, catch by reference]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Throw by value, catch by reference]]></description>
	</rule>
	<rule key="EXCEPT-03" priority="BLOCKER">
		<name><![CDATA[Do not throw from within destructor]]></name>
		<configKey><![CDATA[Do not throw from within destructor]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not throw from within destructor]]></description>
	</rule>
	<rule key="EXCEPT-04" priority="CRITICAL">
		<name><![CDATA[All exceptions should be rethrown or logged with standard logger]]></name>
		<configKey><![CDATA[All exceptions should be rethrown or logged with standard logger]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All exceptions should be rethrown or logged with standard logger]]></description>
	</rule>
	<rule key="EXCEPT-05" priority="CRITICAL">
		<name><![CDATA[C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)]]></name>
		<configKey><![CDATA[C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)]]></description>
	</rule>
	<rule key="EXCEPT-06" priority="MAJOR">
		<name><![CDATA[There should be at least one exception handler to catch all otherwise unhandled exceptions]]></name>
		<configKey><![CDATA[There should be at least one exception handler to catch all otherwise unhandled exceptions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There should be at least one exception handler to catch all otherwise unhandled exceptions]]></description>
	</rule>
	<rule key="EXCEPT-07" priority="MAJOR">
		<name><![CDATA[An empty throw (throw;) shall only be used in the compound-statement of a catch handler]]></name>
		<configKey><![CDATA[An empty throw (throw;) shall only be used in the compound-statement of a catch handler]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An empty throw (throw;) shall only be used in the compound-statement of a catch handler]]></description>
	</rule>
	<rule key="EXCEPT-08" priority="MAJOR">
		<name><![CDATA[Exceptions shall be raised only after start-up and before termination of the program]]></name>
		<configKey><![CDATA[Exceptions shall be raised only after start-up and before termination of the program]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Exceptions shall be raised only after start-up and before termination of the program]]></description>
	</rule>
	<rule key="EXCEPT-09" priority="MAJOR">
		<name><![CDATA[An exception object should not have pointer type]]></name>
		<configKey><![CDATA[An exception object should not have pointer type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An exception object should not have pointer type]]></description>
	</rule>
	<rule key="EXCEPT-10" priority="MAJOR">
		<name><![CDATA[Control shall not be transferred into a try or catch block using a goto or a switch statement]]></name>
		<configKey><![CDATA[Control shall not be transferred into a try or catch block using a goto or a switch statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Control shall not be transferred into a try or catch block using a goto or a switch statement]]></description>
	</rule>
	<rule key="EXCEPT-11" priority="BLOCKER">
		<name><![CDATA[The assignment-expression of a throw statement shall not itself cause an exception to be thrown]]></name>
		<configKey><![CDATA[The assignment-expression of a throw statement shall not itself cause an exception to be thrown]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The assignment-expression of a throw statement shall not itself cause an exception to be thrown]]></description>
	</rule>
	<rule key="EXCEPT-12" priority="MAJOR">
		<name><![CDATA[NULL shall not be thrown explicitly]]></name>
		<configKey><![CDATA[NULL shall not be thrown explicitly]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[NULL shall not be thrown explicitly]]></description>
	</rule>
	<rule key="EXCEPT-13" priority="MAJOR">
		<name><![CDATA[Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point]]></name>
		<configKey><![CDATA[Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point]]></description>
	</rule>
	<rule key="EXCEPT-14" priority="MAJOR">
		<name><![CDATA[Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)]]></name>
		<configKey><![CDATA[Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)]]></description>
	</rule>
	<rule key="EXCEPT-15" priority="MAJOR">
		<name><![CDATA[A class type exception shall always be caught by reference]]></name>
		<configKey><![CDATA[A class type exception shall always be caught by reference]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A class type exception shall always be caught by reference]]></description>
	</rule>
	<rule key="EXCEPT-16" priority="MAJOR">
		<name><![CDATA[Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases]]></name>
		<configKey><![CDATA[Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases]]></description>
	</rule>
	<rule key="EXCEPT-17" priority="MAJOR">
		<name><![CDATA[Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to bas]]></name>
		<configKey><![CDATA[Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to bas]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to bas]]></description>
	</rule>
	<rule key="EXCEPT-18" priority="MAJOR">
		<name><![CDATA[Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point]]></name>
		<configKey><![CDATA[Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point]]></description>
	</rule>
	<rule key="FORMAT-01" priority="INFO">
		<name><![CDATA[Tabs that do not use ASCII spaces shall not be used]]></name>
		<configKey><![CDATA[Tabs that do not use ASCII spaces shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Tabs that do not use ASCII spaces shall not be used]]></description>
	</rule>
	<rule key="FORMAT-02" priority="MAJOR">
		<name><![CDATA[Opening curly brace '{' shall appear on a line by themselves]]></name>
		<configKey><![CDATA[Opening curly brace '{' shall appear on a line by themselves]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Opening curly brace '{' shall appear on a line by themselves]]></description>
	</rule>
	<rule key="FORMAT-03" priority="MAJOR">
		<name><![CDATA[Closing curly brace '}' shall appear on a line by themselves]]></name>
		<configKey><![CDATA[Closing curly brace '}' shall appear on a line by themselves]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Closing curly brace '}' shall appear on a line by themselves]]></description>
	</rule>
	<rule key="FORMAT-04" priority="MAJOR">
		<name><![CDATA[Physical lines should be less than eighty characters]]></name>
		<configKey><![CDATA[Physical lines should be less than eighty characters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Physical lines should be less than eighty characters]]></description>
	</rule>
	<rule key="FORMAT-05" priority="MAJOR">
		<name><![CDATA[The length of a macro should not exceed 10 lines]]></name>
		<configKey><![CDATA[The length of a macro should not exceed 10 lines]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The length of a macro should not exceed 10 lines]]></description>
	</rule>
	<rule key="FORMAT-06" priority="MAJOR">
		<name><![CDATA[Only one statement shall be allowed per line]]></name>
		<configKey><![CDATA[Only one statement shall be allowed per line]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Only one statement shall be allowed per line]]></description>
	</rule>
	<rule key="FORMAT-07" priority="MAJOR">
		<name><![CDATA[There shall be a single ASCII space character preceding assignment operators]]></name>
		<configKey><![CDATA[There shall be a single ASCII space character preceding assignment operators]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be a single ASCII space character preceding assignment operators]]></description>
	</rule>
	<rule key="FORMAT-08" priority="MAJOR">
		<name><![CDATA[There shall be a single ASCII space character following assignment operators]]></name>
		<configKey><![CDATA[There shall be a single ASCII space character following assignment operators]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be a single ASCII space character following assignment operators]]></description>
	</rule>
	<rule key="FORMAT-09" priority="MAJOR">
		<name><![CDATA[There shall be a single ASCII space character preceding bitwise operators]]></name>
		<configKey><![CDATA[There shall be a single ASCII space character preceding bitwise operators]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be a single ASCII space character preceding bitwise operators]]></description>
	</rule>
	<rule key="FORMAT-10" priority="MAJOR">
		<name><![CDATA[There shall be a single ASCII space character following bitwise operators]]></name>
		<configKey><![CDATA[There shall be a single ASCII space character following bitwise operators]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be a single ASCII space character following bitwise operators]]></description>
	</rule>
	<rule key="FORMAT-11" priority="MAJOR">
		<name><![CDATA[There shall be a single ASCII space character preceding and following bitwise operator '&amp;']]></name>
		<configKey><![CDATA[There shall be a single ASCII space character preceding and following bitwise operator '&amp;']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be a single ASCII space character preceding and following bitwise operator '&amp;']]></description>
	</rule>
	<rule key="FORMAT-12" priority="MAJOR">
		<name><![CDATA[There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis]]></name>
		<configKey><![CDATA[There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis]]></description>
	</rule>
	<rule key="FORMAT-13" priority="MAJOR">
		<name><![CDATA[There shall be a maximum of 1 ASCII space character following the opening parenthesis in conditional statements]]></name>
		<configKey><![CDATA[There shall be a maximum of 1 ASCII space character following the opening parenthesis in conditional statements]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be a maximum of 1 ASCII space character following the opening parenthesis in conditional statements]]></description>
	</rule>
	<rule key="FORMAT-14" priority="MAJOR">
		<name><![CDATA[There shall be a single ASCII space character preceding ternary conditional operator]]></name>
		<configKey><![CDATA[There shall be a single ASCII space character preceding ternary conditional operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be a single ASCII space character preceding ternary conditional operator]]></description>
	</rule>
	<rule key="FORMAT-15" priority="MAJOR">
		<name><![CDATA[There shall be a single ASCII space character following ternary conditional operator]]></name>
		<configKey><![CDATA[There shall be a single ASCII space character following ternary conditional operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be a single ASCII space character following ternary conditional operator]]></description>
	</rule>
	<rule key="FORMAT-16" priority="MAJOR">
		<name><![CDATA[There shall be a single ASCII space character preceding and following relational and equality operators]]></name>
		<configKey><![CDATA[There shall be a single ASCII space character preceding and following relational and equality operators]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be a single ASCII space character preceding and following relational and equality operators]]></description>
	</rule>
	<rule key="FORMAT-17" priority="MAJOR">
		<name><![CDATA[There shall be no white space following a primary operator]]></name>
		<configKey><![CDATA[There shall be no white space following a primary operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no white space following a primary operator]]></description>
	</rule>
	<rule key="FORMAT-18" priority="MAJOR">
		<name><![CDATA[There shall be no white space preceding a primary operator]]></name>
		<configKey><![CDATA[There shall be no white space preceding a primary operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no white space preceding a primary operator]]></description>
	</rule>
	<rule key="FORMAT-19" priority="MAJOR">
		<name><![CDATA[There shall be a single ASCII space character following all commas]]></name>
		<configKey><![CDATA[There shall be a single ASCII space character following all commas]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be a single ASCII space character following all commas]]></description>
	</rule>
	<rule key="FORMAT-20" priority="MAJOR">
		<name><![CDATA[There shall be a single ASCII space character following all semicolons]]></name>
		<configKey><![CDATA[There shall be a single ASCII space character following all semicolons]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be a single ASCII space character following all semicolons]]></description>
	</rule>
	<rule key="FORMAT-21" priority="MAJOR">
		<name><![CDATA[There shall be no white space between a prefix unary operator and its operand]]></name>
		<configKey><![CDATA[There shall be no white space between a prefix unary operator and its operand]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no white space between a prefix unary operator and its operand]]></description>
	</rule>
	<rule key="FORMAT-22" priority="MAJOR">
		<name><![CDATA[There shall be no white space between a postfix unary operator and its operand]]></name>
		<configKey><![CDATA[There shall be no white space between a postfix unary operator and its operand]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no white space between a postfix unary operator and its operand]]></description>
	</rule>
	<rule key="FORMAT-23" priority="MAJOR">
		<name><![CDATA[There shall be no white spaces between the "return" or  "sizeof " statements  and its opening parenthesis]]></name>
		<configKey><![CDATA[There shall be no white spaces between the "return" or  "sizeof " statements  and its opening parenthesis]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no white spaces between the "return" or  "sizeof " statements  and its opening parenthesis]]></description>
	</rule>
	<rule key="FORMAT-24" priority="MAJOR">
		<name><![CDATA[There shall be no white spaces surrounding "return" or  "sizeof " statements argument or expression]]></name>
		<configKey><![CDATA[There shall be no white spaces surrounding "return" or  "sizeof " statements argument or expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no white spaces surrounding "return" or  "sizeof " statements argument or expression]]></description>
	</rule>
	<rule key="FORMAT-25" priority="MAJOR">
		<name><![CDATA[Parenthesis shall be used with the "return" and "sizeof" statements]]></name>
		<configKey><![CDATA[Parenthesis shall be used with the "return" and "sizeof" statements]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Parenthesis shall be used with the "return" and "sizeof" statements]]></description>
	</rule>
	<rule key="FORMAT-26" priority="MAJOR">
		<name><![CDATA[There shall be a single ASCII space character preceding and following logical operators]]></name>
		<configKey><![CDATA[There shall be a single ASCII space character preceding and following logical operators]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be a single ASCII space character preceding and following logical operators]]></description>
	</rule>
	<rule key="FORMAT-27" priority="MAJOR">
		<name><![CDATA[Line should be indented by a multiple of four spaces]]></name>
		<configKey><![CDATA[Line should be indented by a multiple of four spaces]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Line should be indented by a multiple of four spaces]]></description>
	</rule>
	<rule key="FORMAT-28" priority="MAJOR">
		<name><![CDATA[In a function definition, the return type of the function should be written on a separate line directly above the function name]]></name>
		<configKey><![CDATA[In a function definition, the return type of the function should be written on a separate line directly above the function name]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[In a function definition, the return type of the function should be written on a separate line directly above the function name]]></description>
	</rule>
	<rule key="FORMAT-29" priority="MAJOR">
		<name><![CDATA[Multiple variable declarations shall not be allowed on the same line]]></name>
		<configKey><![CDATA[Multiple variable declarations shall not be allowed on the same line]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Multiple variable declarations shall not be allowed on the same line]]></description>
	</rule>
	<rule key="FORMAT-30" priority="MAJOR">
		<name><![CDATA[Place left parenthesis directly after function name]]></name>
		<configKey><![CDATA[Place left parenthesis directly after function name]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Place left parenthesis directly after function name]]></description>
	</rule>
	<rule key="FORMAT-31" priority="MAJOR">
		<name><![CDATA[Separate logical tests in conditional expressions]]></name>
		<configKey><![CDATA[Separate logical tests in conditional expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Separate logical tests in conditional expressions]]></description>
	</rule>
	<rule key="FORMAT-32" priority="MAJOR">
		<name><![CDATA[The dereference operator `*' and the address-of operator `&amp;' should be directly connected with the type names]]></name>
		<configKey><![CDATA[The dereference operator `*' and the address-of operator `&amp;' should be directly connected with the type names]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The dereference operator `*' and the address-of operator `&amp;' should be directly connected with the type names]]></description>
	</rule>
	<rule key="FORMAT-33" priority="MAJOR">
		<name><![CDATA[Each variable should be declared in a separate declaration statement]]></name>
		<configKey><![CDATA[Each variable should be declared in a separate declaration statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each variable should be declared in a separate declaration statement]]></description>
	</rule>
	<rule key="FORMAT-34" priority="MAJOR">
		<name><![CDATA[Braces "{}" which enclose a block should be placed in the same column]]></name>
		<configKey><![CDATA[Braces "{}" which enclose a block should be placed in the same column]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Braces "{}" which enclose a block should be placed in the same column]]></description>
	</rule>
	<rule key="FORMAT-35" priority="MAJOR">
		<name><![CDATA[When declaring functions, the leading parenthesis and the first argument are to be written on the same line as the function name]]></name>
		<configKey><![CDATA[When declaring functions, the leading parenthesis and the first argument are to be written on the same line as the function name]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[When declaring functions, the leading parenthesis and the first argument are to be written on the same line as the function name]]></description>
	</rule>
	<rule key="FORMAT-36" priority="MAJOR">
		<name><![CDATA[Sibling statement lines should be indented to the same level]]></name>
		<configKey><![CDATA[Sibling statement lines should be indented to the same level]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Sibling statement lines should be indented to the same level]]></description>
	</rule>
	<rule key="FORMAT-37" priority="MAJOR">
		<name><![CDATA[First line in control statement body should be indented more than control statement keyword]]></name>
		<configKey><![CDATA[First line in control statement body should be indented more than control statement keyword]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[First line in control statement body should be indented more than control statement keyword]]></description>
	</rule>
	<rule key="FORMAT-38" priority="MAJOR">
		<name><![CDATA[When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be]]></name>
		<configKey><![CDATA[When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be]]></description>
	</rule>
	<rule key="INIT-01" priority="MAJOR">
		<name><![CDATA[Headers should not contain any initialization]]></name>
		<configKey><![CDATA[Headers should not contain any initialization]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Headers should not contain any initialization]]></description>
	</rule>
	<rule key="INIT-02" priority="MAJOR">
		<name><![CDATA[Do not initialize unsigned integer variables with signed constants]]></name>
		<configKey><![CDATA[Do not initialize unsigned integer variables with signed constants]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not initialize unsigned integer variables with signed constants]]></description>
	</rule>
	<rule key="INIT-03" priority="MAJOR">
		<name><![CDATA[Initialize all variables]]></name>
		<configKey><![CDATA[Initialize all variables]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Initialize all variables]]></description>
	</rule>
	<rule key="INIT-04" priority="CRITICAL">
		<name><![CDATA[Initialize all pointer variables]]></name>
		<configKey><![CDATA[Initialize all pointer variables]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Initialize all pointer variables]]></description>
	</rule>
	<rule key="INIT-05" priority="BLOCKER">
		<name><![CDATA[Do not initialize a reference to an object whose address can be changed]]></name>
		<configKey><![CDATA[Do not initialize a reference to an object whose address can be changed]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not initialize a reference to an object whose address can be changed]]></description>
	</rule>
	<rule key="INIT-06" priority="BLOCKER">
		<name><![CDATA[All member variables should be initialized in constructor]]></name>
		<configKey><![CDATA[All member variables should be initialized in constructor]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All member variables should be initialized in constructor]]></description>
	</rule>
	<rule key="INIT-07" priority="MAJOR">
		<name><![CDATA[Make class members' initialization explicit by providing user-defined constructor]]></name>
		<configKey><![CDATA[Make class members' initialization explicit by providing user-defined constructor]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Make class members' initialization explicit by providing user-defined constructor]]></description>
	</rule>
	<rule key="INIT-08" priority="MAJOR">
		<name><![CDATA[User-defined constructor must be provided to ensure the proper initialization of dynamically allocated class objects]]></name>
		<configKey><![CDATA[User-defined constructor must be provided to ensure the proper initialization of dynamically allocated class objects]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[User-defined constructor must be provided to ensure the proper initialization of dynamically allocated class objects]]></description>
	</rule>
	<rule key="INIT-09" priority="BLOCKER">
		<name><![CDATA[Initialize static class members]]></name>
		<configKey><![CDATA[Initialize static class members]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Initialize static class members]]></description>
	</rule>
	<rule key="INIT-10" priority="MAJOR">
		<name><![CDATA[List members in an initialization list in the order in which they are declared]]></name>
		<configKey><![CDATA[List members in an initialization list in the order in which they are declared]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[List members in an initialization list in the order in which they are declared]]></description>
	</rule>
	<rule key="INIT-11" priority="CRITICAL">
		<name><![CDATA[Assign to all data members in operator=]]></name>
		<configKey><![CDATA[Assign to all data members in operator=]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Assign to all data members in operator=]]></description>
	</rule>
	<rule key="INIT-12" priority="MAJOR">
		<name><![CDATA[Avoid initialization order problems across translation units]]></name>
		<configKey><![CDATA[Avoid initialization order problems across translation units]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid initialization order problems across translation units]]></description>
	</rule>
	<rule key="INIT-13" priority="MAJOR">
		<name><![CDATA[Do not assume that members are initialized in any special order in constructors]]></name>
		<configKey><![CDATA[Do not assume that members are initialized in any special order in constructors]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not assume that members are initialized in any special order in constructors]]></description>
	</rule>
	<rule key="INIT-14" priority="INFO">
		<name><![CDATA[Prefer initialization to assignment in constructors]]></name>
		<configKey><![CDATA[Prefer initialization to assignment in constructors]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer initialization to assignment in constructors]]></description>
	</rule>
	<rule key="JSF-1" priority="MAJOR">
		<name><![CDATA[Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)]]></name>
		<configKey><![CDATA[Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)]]></description>
	</rule>
	<rule key="JSF-10" priority="MAJOR">
		<name><![CDATA[Values of character types shall be restricted to a defined and documented subset of ISO 10646-1]]></name>
		<configKey><![CDATA[Values of character types shall be restricted to a defined and documented subset of ISO 10646-1]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Values of character types shall be restricted to a defined and documented subset of ISO 10646-1]]></description>
	</rule>
	<rule key="JSF-107" priority="CRITICAL">
		<name><![CDATA[Always declare functions at file scope]]></name>
		<configKey><![CDATA[Always declare functions at file scope]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Always declare functions at file scope]]></description>
	</rule>
	<rule key="JSF-108" priority="CRITICAL">
		<name><![CDATA[Do not use functions with variable numbers of arguments]]></name>
		<configKey><![CDATA[Do not use functions with variable numbers of arguments]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use functions with variable numbers of arguments]]></description>
	</rule>
	<rule key="JSF-109" priority="MINOR">
		<name><![CDATA[Member functions shall not be defined within the no-template class definition]]></name>
		<configKey><![CDATA[Member functions shall not be defined within the no-template class definition]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Member functions shall not be defined within the no-template class definition]]></description>
	</rule>
	<rule key="JSF-11" priority="MAJOR">
		<name><![CDATA[Trigraphs shall not be used]]></name>
		<configKey><![CDATA[Trigraphs shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Trigraphs shall not be used]]></description>
	</rule>
	<rule key="JSF-110" priority="MAJOR">
		<name><![CDATA[Functions with more than 7 parameters will not be used]]></name>
		<configKey><![CDATA[Functions with more than 7 parameters will not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Functions with more than 7 parameters will not be used]]></description>
	</rule>
	<rule key="JSF-111" priority="CRITICAL">
		<name><![CDATA[Never return a reference to a local object]]></name>
		<configKey><![CDATA[Never return a reference to a local object]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Never return a reference to a local object]]></description>
	</rule>
	<rule key="JSF-112" priority="MINOR">
		<name><![CDATA[Never return a dereferenced local pointer initialized by new in this function scope]]></name>
		<configKey><![CDATA[Never return a dereferenced local pointer initialized by new in this function scope]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Never return a dereferenced local pointer initialized by new in this function scope]]></description>
	</rule>
	<rule key="JSF-113" priority="MAJOR">
		<name><![CDATA[A function shall have a single point of exit at the end of the function]]></name>
		<configKey><![CDATA[A function shall have a single point of exit at the end of the function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A function shall have a single point of exit at the end of the function]]></description>
	</rule>
	<rule key="JSF-114" priority="CRITICAL">
		<name><![CDATA[All exit paths from a function with non-void return type shall have an explicit return statement with an expression]]></name>
		<configKey><![CDATA[All exit paths from a function with non-void return type shall have an explicit return statement with an expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All exit paths from a function with non-void return type shall have an explicit return statement with an expression]]></description>
	</rule>
	<rule key="JSF-115" priority="MAJOR">
		<name><![CDATA[If a function return error information, then that error information should be tested]]></name>
		<configKey><![CDATA[If a function return error information, then that error information should be tested]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If a function return error information, then that error information should be tested]]></description>
	</rule>
	<rule key="JSF-116" priority="MINOR">
		<name><![CDATA[Pass built-in-types by value unless you are modifying them]]></name>
		<configKey><![CDATA[Pass built-in-types by value unless you are modifying them]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Pass built-in-types by value unless you are modifying them]]></description>
	</rule>
	<rule key="JSF-117.1" priority="MINOR">
		<name><![CDATA[Declare reference parameters as const references whenever possible]]></name>
		<configKey><![CDATA[Declare reference parameters as const references whenever possible]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Declare reference parameters as const references whenever possible]]></description>
	</rule>
	<rule key="JSF-117_a" priority="MINOR">
		<name><![CDATA[Avoid slicing function arguments / return value]]></name>
		<configKey><![CDATA[Avoid slicing function arguments / return value]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid slicing function arguments / return value]]></description>
	</rule>
	<rule key="JSF-117_b" priority="MINOR">
		<name><![CDATA[The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor]]></name>
		<configKey><![CDATA[The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor]]></description>
	</rule>
	<rule key="JSF-118" priority="MINOR">
		<name><![CDATA[A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object]]></name>
		<configKey><![CDATA[A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object]]></description>
	</rule>
	<rule key="JSF-119" priority="CRITICAL">
		<name><![CDATA[Functions shall not call themselves, either directly or indirectly]]></name>
		<configKey><![CDATA[Functions shall not call themselves, either directly or indirectly]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Functions shall not call themselves, either directly or indirectly]]></description>
	</rule>
	<rule key="JSF-12" priority="MAJOR">
		<name><![CDATA[The following digraphs will not be used &lt;%, %&gt;, &lt;:, :&gt;, %:, %:%:]]></name>
		<configKey><![CDATA[The following digraphs will not be used &lt;%, %&gt;, &lt;:, :&gt;, %:, %:%:]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The following digraphs will not be used &lt;%, %&gt;, &lt;:, :&gt;, %:, %:%:]]></description>
	</rule>
	<rule key="JSF-121" priority="MINOR">
		<name><![CDATA[Only functions with 1 or 2 statements should be considered candidates for inline functions]]></name>
		<configKey><![CDATA[Only functions with 1 or 2 statements should be considered candidates for inline functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Only functions with 1 or 2 statements should be considered candidates for inline functions]]></description>
	</rule>
	<rule key="JSF-122" priority="MINOR">
		<name><![CDATA[Trivial accessor and mutator functions should be inlined]]></name>
		<configKey><![CDATA[Trivial accessor and mutator functions should be inlined]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Trivial accessor and mutator functions should be inlined]]></description>
	</rule>
	<rule key="JSF-123" priority="MINOR">
		<name><![CDATA[The number of accessor and mutator functions should be minimized]]></name>
		<configKey><![CDATA[The number of accessor and mutator functions should be minimized]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The number of accessor and mutator functions should be minimized]]></description>
	</rule>
	<rule key="JSF-124" priority="MINOR">
		<name><![CDATA[Trivial forwarding functions should be inlined]]></name>
		<configKey><![CDATA[Trivial forwarding functions should be inlined]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Trivial forwarding functions should be inlined]]></description>
	</rule>
	<rule key="JSF-125_a" priority="CRITICAL">
		<name><![CDATA[Pass objects by reference instead of by value]]></name>
		<configKey><![CDATA[Pass objects by reference instead of by value]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Pass objects by reference instead of by value]]></description>
	</rule>
	<rule key="JSF-125_b" priority="CRITICAL">
		<name><![CDATA[Consider using op= instead of stand-alone op]]></name>
		<configKey><![CDATA[Consider using op= instead of stand-alone op]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Consider using op= instead of stand-alone op]]></description>
	</rule>
	<rule key="JSF-126" priority="CRITICAL">
		<name><![CDATA[Prefer C++ style comment]]></name>
		<configKey><![CDATA[Prefer C++ style comment]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer C++ style comment]]></description>
	</rule>
	<rule key="JSF-127" priority="CRITICAL">
		<name><![CDATA[Sections of code should not be "commented out"]]></name>
		<configKey><![CDATA[Sections of code should not be "commented out"]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Sections of code should not be "commented out"]]></description>
	</rule>
	<rule key="JSF-13" priority="MAJOR">
		<name><![CDATA[Do not use wide string literals]]></name>
		<configKey><![CDATA[Do not use wide string literals]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use wide string literals]]></description>
	</rule>
	<rule key="JSF-132_a" priority="MAJOR">
		<name><![CDATA[Each variable declaration should be commented]]></name>
		<configKey><![CDATA[Each variable declaration should be commented]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each variable declaration should be commented]]></description>
	</rule>
	<rule key="JSF-132_b" priority="MAJOR">
		<name><![CDATA[Each typedef should be commented]]></name>
		<configKey><![CDATA[Each typedef should be commented]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each typedef should be commented]]></description>
	</rule>
	<rule key="JSF-132_c" priority="MAJOR">
		<name><![CDATA[Each enumeration value should be commented]]></name>
		<configKey><![CDATA[Each enumeration value should be commented]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each enumeration value should be commented]]></description>
	</rule>
	<rule key="JSF-132_d" priority="MAJOR">
		<name><![CDATA[Each structure member variable should be commented]]></name>
		<configKey><![CDATA[Each structure member variable should be commented]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each structure member variable should be commented]]></description>
	</rule>
	<rule key="JSF-133_a" priority="MAJOR">
		<name><![CDATA[Comment every file]]></name>
		<configKey><![CDATA[Comment every file]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Comment every file]]></description>
	</rule>
	<rule key="JSF-133_b" priority="MAJOR">
		<name><![CDATA[Provide copyright information]]></name>
		<configKey><![CDATA[Provide copyright information]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Provide copyright information]]></description>
	</rule>
	<rule key="JSF-134" priority="MINOR">
		<name><![CDATA[Comment every function]]></name>
		<configKey><![CDATA[Comment every function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Comment every function]]></description>
	</rule>
	<rule key="JSF-135_a" priority="CRITICAL">
		<name><![CDATA[Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that identifier]]></name>
		<configKey><![CDATA[Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that identifier]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that identifier]]></description>
	</rule>
	<rule key="JSF-135_b" priority="CRITICAL">
		<name><![CDATA[Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that identifier]]></name>
		<configKey><![CDATA[Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that identifier]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that identifier]]></description>
	</rule>
	<rule key="JSF-136" priority="MINOR">
		<name><![CDATA[Declare objects at function scope]]></name>
		<configKey><![CDATA[Declare objects at function scope]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Declare objects at function scope]]></description>
	</rule>
	<rule key="JSF-137" priority="MINOR">
		<name><![CDATA[Make declarations at file scope static where possible]]></name>
		<configKey><![CDATA[Make declarations at file scope static where possible]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Make declarations at file scope static where possible]]></description>
	</rule>
	<rule key="JSF-138_a" priority="CRITICAL">
		<name><![CDATA[Use consistent linkage for identifiers]]></name>
		<configKey><![CDATA[Use consistent linkage for identifiers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use consistent linkage for identifiers]]></description>
	</rule>
	<rule key="JSF-138_b" priority="CRITICAL">
		<name><![CDATA[The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage]]></name>
		<configKey><![CDATA[The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage]]></description>
	</rule>
	<rule key="JSF-139" priority="MAJOR">
		<name><![CDATA[External object should not be declared in more than one file]]></name>
		<configKey><![CDATA[External object should not be declared in more than one file]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[External object should not be declared in more than one file]]></description>
	</rule>
	<rule key="JSF-14" priority="CRITICAL">
		<name><![CDATA[Literal suffixes shall use uppercase rather than lowercase letters]]></name>
		<configKey><![CDATA[Literal suffixes shall use uppercase rather than lowercase letters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Literal suffixes shall use uppercase rather than lowercase letters]]></description>
	</rule>
	<rule key="JSF-140" priority="CRITICAL">
		<name><![CDATA[Do not use register storage class]]></name>
		<configKey><![CDATA[Do not use register storage class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use register storage class]]></description>
	</rule>
	<rule key="JSF-141" priority="MAJOR">
		<name><![CDATA[A class, structure, or enumeration will not be declared in the definition of its type]]></name>
		<configKey><![CDATA[A class, structure, or enumeration will not be declared in the definition of its type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A class, structure, or enumeration will not be declared in the definition of its type]]></description>
	</rule>
	<rule key="JSF-142_a" priority="CRITICAL">
		<name><![CDATA[All automatic variables shall have been assigned a value before being used]]></name>
		<configKey><![CDATA[All automatic variables shall have been assigned a value before being used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All automatic variables shall have been assigned a value before being used]]></description>
	</rule>
	<rule key="JSF-142_b" priority="CRITICAL">
		<name><![CDATA[Initialize all variables]]></name>
		<configKey><![CDATA[Initialize all variables]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Initialize all variables]]></description>
	</rule>
	<rule key="JSF-143" priority="CRITICAL">
		<name><![CDATA[Variables will not be introduced until they can be initialized with meaningful values]]></name>
		<configKey><![CDATA[Variables will not be introduced until they can be initialized with meaningful values]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Variables will not be introduced until they can be initialized with meaningful values]]></description>
	</rule>
	<rule key="JSF-144" priority="CRITICAL">
		<name><![CDATA[Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures]]></name>
		<configKey><![CDATA[Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures]]></description>
	</rule>
	<rule key="JSF-145" priority="CRITICAL">
		<name><![CDATA[In an enumerator list, the "=" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised]]></name>
		<configKey><![CDATA[In an enumerator list, the "=" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[In an enumerator list, the "=" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised]]></description>
	</rule>
	<rule key="JSF-147" priority="CRITICAL">
		<name><![CDATA[The underlying bit representations of floating point numbers shall not be used]]></name>
		<configKey><![CDATA[The underlying bit representations of floating point numbers shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The underlying bit representations of floating point numbers shall not be used]]></description>
	</rule>
	<rule key="JSF-148" priority="CRITICAL">
		<name><![CDATA[Enumeration types shall be used instead of integer types (and constants) as case labels]]></name>
		<configKey><![CDATA[Enumeration types shall be used instead of integer types (and constants) as case labels]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Enumeration types shall be used instead of integer types (and constants) as case labels]]></description>
	</rule>
	<rule key="JSF-149" priority="CRITICAL">
		<name><![CDATA[Octal constants (other than zero) and octal escape sequences shall not be used]]></name>
		<configKey><![CDATA[Octal constants (other than zero) and octal escape sequences shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Octal constants (other than zero) and octal escape sequences shall not be used]]></description>
	</rule>
	<rule key="JSF-150" priority="MAJOR">
		<name><![CDATA[Hexadecimal constants will be represented using all uppercase letters]]></name>
		<configKey><![CDATA[Hexadecimal constants will be represented using all uppercase letters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hexadecimal constants will be represented using all uppercase letters]]></description>
	</rule>
	<rule key="JSF-151.1" priority="CRITICAL">
		<name><![CDATA[A string literal shall not be modified]]></name>
		<configKey><![CDATA[A string literal shall not be modified]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A string literal shall not be modified]]></description>
	</rule>
	<rule key="JSF-151" priority="MAJOR">
		<name><![CDATA[Avoid magic numbers]]></name>
		<configKey><![CDATA[Avoid magic numbers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid magic numbers]]></description>
	</rule>
	<rule key="JSF-152" priority="CRITICAL">
		<name><![CDATA[Multiple variable declarations shall not be allowed on the same line]]></name>
		<configKey><![CDATA[Multiple variable declarations shall not be allowed on the same line]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Multiple variable declarations shall not be allowed on the same line]]></description>
	</rule>
	<rule key="JSF-153" priority="CRITICAL">
		<name><![CDATA[Unions shall not be used]]></name>
		<configKey><![CDATA[Unions shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Unions shall not be used]]></description>
	</rule>
	<rule key="JSF-154" priority="CRITICAL">
		<name><![CDATA[Bit fields shall only be defined to be of type unsigned int or signed int]]></name>
		<configKey><![CDATA[Bit fields shall only be defined to be of type unsigned int or signed int]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Bit fields shall only be defined to be of type unsigned int or signed int]]></description>
	</rule>
	<rule key="JSF-156" priority="CRITICAL">
		<name><![CDATA[All the members of a structure (or union) shall be named]]></name>
		<configKey><![CDATA[All the members of a structure (or union) shall be named]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All the members of a structure (or union) shall be named]]></description>
	</rule>
	<rule key="JSF-157" priority="CRITICAL">
		<name><![CDATA[The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects]]></name>
		<configKey><![CDATA[The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects]]></description>
	</rule>
	<rule key="JSF-158" priority="CRITICAL">
		<name><![CDATA[Each operand of a logical '&amp;&amp;' or '||' shall be a postfix-expression]]></name>
		<configKey><![CDATA[Each operand of a logical '&amp;&amp;' or '||' shall be a postfix-expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each operand of a logical '&amp;&amp;' or '||' shall be a postfix-expression]]></description>
	</rule>
	<rule key="JSF-159" priority="CRITICAL">
		<name><![CDATA[Avoid overloading &amp;&amp;, || or , (comma)]]></name>
		<configKey><![CDATA[Avoid overloading &amp;&amp;, || or , (comma)]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid overloading &amp;&amp;, || or , (comma)]]></description>
	</rule>
	<rule key="JSF-160" priority="CRITICAL">
		<name><![CDATA[Assignment operators shall not be used in expressions that yield a Boolean value]]></name>
		<configKey><![CDATA[Assignment operators shall not be used in expressions that yield a Boolean value]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Assignment operators shall not be used in expressions that yield a Boolean value]]></description>
	</rule>
	<rule key="JSF-162_a" priority="CRITICAL">
		<name><![CDATA[Avoid implicit conversions between signed and unsigned integer types]]></name>
		<configKey><![CDATA[Avoid implicit conversions between signed and unsigned integer types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions between signed and unsigned integer types]]></description>
	</rule>
	<rule key="JSF-162_b" priority="CRITICAL">
		<name><![CDATA[Avoid implicit conversions between signed and unsigned integer types]]></name>
		<configKey><![CDATA[Avoid implicit conversions between signed and unsigned integer types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions between signed and unsigned integer types]]></description>
	</rule>
	<rule key="JSF-162_c" priority="CRITICAL">
		<name><![CDATA[Use explicit type conversions for arithmetic using signed and unsigned values]]></name>
		<configKey><![CDATA[Use explicit type conversions for arithmetic using signed and unsigned values]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use explicit type conversions for arithmetic using signed and unsigned values]]></description>
	</rule>
	<rule key="JSF-163" priority="CRITICAL">
		<name><![CDATA[Unsigned arithmetic shall not be used]]></name>
		<configKey><![CDATA[Unsigned arithmetic shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Unsigned arithmetic shall not be used]]></description>
	</rule>
	<rule key="JSF-164.1" priority="CRITICAL">
		<name><![CDATA[The left-hand operand of a right-shift operator shall not have a negative value]]></name>
		<configKey><![CDATA[The left-hand operand of a right-shift operator shall not have a negative value]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The left-hand operand of a right-shift operator shall not have a negative value]]></description>
	</rule>
	<rule key="JSF-164" priority="CRITICAL">
		<name><![CDATA[The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand]]></name>
		<configKey><![CDATA[The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand]]></description>
	</rule>
	<rule key="JSF-165" priority="CRITICAL">
		<name><![CDATA[The unary minus operator shall not be applied to an expression whose underlying type is unsigned]]></name>
		<configKey><![CDATA[The unary minus operator shall not be applied to an expression whose underlying type is unsigned]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The unary minus operator shall not be applied to an expression whose underlying type is unsigned]]></description>
	</rule>
	<rule key="JSF-166" priority="MAJOR">
		<name><![CDATA[The sizeof operator shall not be used on expressions that contain side effects]]></name>
		<configKey><![CDATA[The sizeof operator shall not be used on expressions that contain side effects]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The sizeof operator shall not be used on expressions that contain side effects]]></description>
	</rule>
	<rule key="JSF-167" priority="CRITICAL">
		<name><![CDATA[Document integer division]]></name>
		<configKey><![CDATA[Document integer division]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Document integer division]]></description>
	</rule>
	<rule key="JSF-168_a" priority="CRITICAL">
		<name><![CDATA[The comma operator shall not be used, except in the control expression of a for loop]]></name>
		<configKey><![CDATA[The comma operator shall not be used, except in the control expression of a for loop]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The comma operator shall not be used, except in the control expression of a for loop]]></description>
	</rule>
	<rule key="JSF-168_b" priority="CRITICAL">
		<name><![CDATA[The comma operator shall not be used]]></name>
		<configKey><![CDATA[The comma operator shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The comma operator shall not be used]]></description>
	</rule>
	<rule key="JSF-169" priority="MINOR">
		<name><![CDATA[Pointers to pointers should be avoided whenever possible]]></name>
		<configKey><![CDATA[Pointers to pointers should be avoided whenever possible]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Pointers to pointers should be avoided whenever possible]]></description>
	</rule>
	<rule key="JSF-17" priority="CRITICAL">
		<name><![CDATA[The error indicator errno shall not be used]]></name>
		<configKey><![CDATA[The error indicator errno shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The error indicator errno shall not be used]]></description>
	</rule>
	<rule key="JSF-170_a" priority="CRITICAL">
		<name><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></name>
		<configKey><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></description>
	</rule>
	<rule key="JSF-170_b" priority="CRITICAL">
		<name><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></name>
		<configKey><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></description>
	</rule>
	<rule key="JSF-171" priority="CRITICAL">
		<name><![CDATA[&gt;, &gt;=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array]]></name>
		<configKey><![CDATA[&gt;, &gt;=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[&gt;, &gt;=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array]]></description>
	</rule>
	<rule key="JSF-173" priority="CRITICAL">
		<name><![CDATA[The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist]]></name>
		<configKey><![CDATA[The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist]]></description>
	</rule>
	<rule key="JSF-174_a" priority="CRITICAL">
		<name><![CDATA[The NULL pointer shall not be dereferenced]]></name>
		<configKey><![CDATA[The NULL pointer shall not be dereferenced]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The NULL pointer shall not be dereferenced]]></description>
	</rule>
	<rule key="JSF-174_b" priority="CRITICAL">
		<name><![CDATA[The NULL pointer shall not be dereferenced]]></name>
		<configKey><![CDATA[The NULL pointer shall not be dereferenced]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The NULL pointer shall not be dereferenced]]></description>
	</rule>
	<rule key="JSF-175" priority="CRITICAL">
		<name><![CDATA[Do not compare a pointer to NULL or assign NULL to a pointer; use 0 instead]]></name>
		<configKey><![CDATA[Do not compare a pointer to NULL or assign NULL to a pointer; use 0 instead]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not compare a pointer to NULL or assign NULL to a pointer; use 0 instead]]></description>
	</rule>
	<rule key="JSF-176" priority="MAJOR">
		<name><![CDATA[Use a typedef to simplify program syntax when declaring function pointers]]></name>
		<configKey><![CDATA[Use a typedef to simplify program syntax when declaring function pointers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use a typedef to simplify program syntax when declaring function pointers]]></description>
	</rule>
	<rule key="JSF-177" priority="MINOR">
		<name><![CDATA[Do not use user-defined conversion functions]]></name>
		<configKey><![CDATA[Do not use user-defined conversion functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use user-defined conversion functions]]></description>
	</rule>
	<rule key="JSF-178" priority="CRITICAL">
		<name><![CDATA[Avoid casts down the inheritance hierarchy]]></name>
		<configKey><![CDATA[Avoid casts down the inheritance hierarchy]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid casts down the inheritance hierarchy]]></description>
	</rule>
	<rule key="JSF-179" priority="CRITICAL">
		<name><![CDATA[A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast]]></name>
		<configKey><![CDATA[A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast]]></description>
	</rule>
	<rule key="JSF-18" priority="CRITICAL">
		<name><![CDATA[The macro offsetof, in library stddef.h, shall not be used]]></name>
		<configKey><![CDATA[The macro offsetof, in library stddef.h, shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The macro offsetof, in library stddef.h, shall not be used]]></description>
	</rule>
	<rule key="JSF-180_a" priority="CRITICAL">
		<name><![CDATA[Implicit conversions which may result in a loss of information shall not be used]]></name>
		<configKey><![CDATA[Implicit conversions which may result in a loss of information shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Implicit conversions which may result in a loss of information shall not be used]]></description>
	</rule>
	<rule key="JSF-180_c" priority="CRITICAL">
		<name><![CDATA[Avoid implicit conversions between integer and floating types]]></name>
		<configKey><![CDATA[Avoid implicit conversions between integer and floating types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions between integer and floating types]]></description>
	</rule>
	<rule key="JSF-180_d" priority="CRITICAL">
		<name><![CDATA[Avoid implicit conversions of complex expressions]]></name>
		<configKey><![CDATA[Avoid implicit conversions of complex expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions of complex expressions]]></description>
	</rule>
	<rule key="JSF-180_e" priority="CRITICAL">
		<name><![CDATA[Avoid implicit conversions from wider to narrower types]]></name>
		<configKey><![CDATA[Avoid implicit conversions from wider to narrower types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions from wider to narrower types]]></description>
	</rule>
	<rule key="JSF-180_f" priority="CRITICAL">
		<name><![CDATA[Avoid implicit conversions of function return expressions]]></name>
		<configKey><![CDATA[Avoid implicit conversions of function return expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions of function return expressions]]></description>
	</rule>
	<rule key="JSF-180_h" priority="CRITICAL">
		<name><![CDATA[Avoid implicit conversions of function arguments]]></name>
		<configKey><![CDATA[Avoid implicit conversions of function arguments]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions of function arguments]]></description>
	</rule>
	<rule key="JSF-181_a" priority="MAJOR">
		<name><![CDATA[Avoid unnecessary explicit cast from derived to a base class]]></name>
		<configKey><![CDATA[Avoid unnecessary explicit cast from derived to a base class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid unnecessary explicit cast from derived to a base class]]></description>
	</rule>
	<rule key="JSF-181_b" priority="MAJOR">
		<name><![CDATA[Instead of casting a long type operand of an expression to int cast the result of the expression]]></name>
		<configKey><![CDATA[Instead of casting a long type operand of an expression to int cast the result of the expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Instead of casting a long type operand of an expression to int cast the result of the expression]]></description>
	</rule>
	<rule key="JSF-181_c" priority="MAJOR">
		<name><![CDATA[Do not cast an int pointer to a long pointer]]></name>
		<configKey><![CDATA[Do not cast an int pointer to a long pointer]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not cast an int pointer to a long pointer]]></description>
	</rule>
	<rule key="JSF-181_d" priority="MAJOR">
		<name><![CDATA[A pointer to a long should not be casted to an int pointer]]></name>
		<configKey><![CDATA[A pointer to a long should not be casted to an int pointer]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A pointer to a long should not be casted to an int pointer]]></description>
	</rule>
	<rule key="JSF-181_e" priority="MAJOR">
		<name><![CDATA[Do not cast from "shorter" type to "longer" type]]></name>
		<configKey><![CDATA[Do not cast from "shorter" type to "longer" type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not cast from "shorter" type to "longer" type]]></description>
	</rule>
	<rule key="JSF-182_a" priority="CRITICAL">
		<name><![CDATA[A cast should not convert a pointer type to an integral type]]></name>
		<configKey><![CDATA[A cast should not convert a pointer type to an integral type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A cast should not convert a pointer type to an integral type]]></description>
	</rule>
	<rule key="JSF-182_b" priority="CRITICAL">
		<name><![CDATA[A cast should not convert an integral type to a pointer type]]></name>
		<configKey><![CDATA[A cast should not convert an integral type to a pointer type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A cast should not convert an integral type to a pointer type]]></description>
	</rule>
	<rule key="JSF-183" priority="MINOR">
		<name><![CDATA[Never use explicit type conversions (casts)]]></name>
		<configKey><![CDATA[Never use explicit type conversions (casts)]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Never use explicit type conversions (casts)]]></description>
	</rule>
	<rule key="JSF-184_a" priority="CRITICAL">
		<name><![CDATA[Avoid implicit conversions of float type resulting in a loss of information]]></name>
		<configKey><![CDATA[Avoid implicit conversions of float type resulting in a loss of information]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions of float type resulting in a loss of information]]></description>
	</rule>
	<rule key="JSF-184_b" priority="CRITICAL">
		<name><![CDATA[Avoid implicit conversions of float type resulting in a loss of information]]></name>
		<configKey><![CDATA[Avoid implicit conversions of float type resulting in a loss of information]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions of float type resulting in a loss of information]]></description>
	</rule>
	<rule key="JSF-185" priority="CRITICAL">
		<name><![CDATA[Prefer C++-style casts]]></name>
		<configKey><![CDATA[Prefer C++-style casts]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer C++-style casts]]></description>
	</rule>
	<rule key="JSF-186_a" priority="CRITICAL">
		<name><![CDATA[There shall be no unreachable code in "else" block]]></name>
		<configKey><![CDATA[There shall be no unreachable code in "else" block]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unreachable code in "else" block]]></description>
	</rule>
	<rule key="JSF-186_b" priority="CRITICAL">
		<name><![CDATA[There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements]]></name>
		<configKey><![CDATA[There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements]]></description>
	</rule>
	<rule key="JSF-186_c" priority="CRITICAL">
		<name><![CDATA[There shall be no unreachable code in "if/else/while/for" block]]></name>
		<configKey><![CDATA[There shall be no unreachable code in "if/else/while/for" block]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unreachable code in "if/else/while/for" block]]></description>
	</rule>
	<rule key="JSF-186_d" priority="CRITICAL">
		<name><![CDATA[There shall be no unreachable code in switch statement]]></name>
		<configKey><![CDATA[There shall be no unreachable code in switch statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unreachable code in switch statement]]></description>
	</rule>
	<rule key="JSF-186_e" priority="CRITICAL">
		<name><![CDATA[There shall be no unreachable code in 'for' loop]]></name>
		<configKey><![CDATA[There shall be no unreachable code in 'for' loop]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unreachable code in 'for' loop]]></description>
	</rule>
	<rule key="JSF-186_f" priority="CRITICAL">
		<name><![CDATA[There shall be no unreachable code after 'if' or 'switch' statement]]></name>
		<configKey><![CDATA[There shall be no unreachable code after 'if' or 'switch' statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unreachable code after 'if' or 'switch' statement]]></description>
	</rule>
	<rule key="JSF-186_g" priority="CRITICAL">
		<name><![CDATA[There shall be no unreachable code after "if" or "switch" statement inside while/for/do...while loop]]></name>
		<configKey><![CDATA[There shall be no unreachable code after "if" or "switch" statement inside while/for/do...while loop]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unreachable code after "if" or "switch" statement inside while/for/do...while loop]]></description>
	</rule>
	<rule key="JSF-187" priority="CRITICAL">
		<name><![CDATA[All non-null statements shall either have at least one side-effect however executed or cause control flow to change]]></name>
		<configKey><![CDATA[All non-null statements shall either have at least one side-effect however executed or cause control flow to change]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All non-null statements shall either have at least one side-effect however executed or cause control flow to change]]></description>
	</rule>
	<rule key="JSF-188" priority="MAJOR">
		<name><![CDATA[Do not use labels]]></name>
		<configKey><![CDATA[Do not use labels]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use labels]]></description>
	</rule>
	<rule key="JSF-189" priority="MAJOR">
		<name><![CDATA[The goto statement shall not be used]]></name>
		<configKey><![CDATA[The goto statement shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The goto statement shall not be used]]></description>
	</rule>
	<rule key="JSF-19" priority="CRITICAL">
		<name><![CDATA[Do not use locale.h header and setlocale function]]></name>
		<configKey><![CDATA[Do not use locale.h header and setlocale function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use locale.h header and setlocale function]]></description>
	</rule>
	<rule key="JSF-190" priority="CRITICAL">
		<name><![CDATA[The continue statement shall not be used]]></name>
		<configKey><![CDATA[The continue statement shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The continue statement shall not be used]]></description>
	</rule>
	<rule key="JSF-191" priority="CRITICAL">
		<name><![CDATA[Do not use the break statement]]></name>
		<configKey><![CDATA[Do not use the break statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use the break statement]]></description>
	</rule>
	<rule key="JSF-192" priority="MAJOR">
		<name><![CDATA[All if ... else if constructs shall be terminated with an else clause]]></name>
		<configKey><![CDATA[All if ... else if constructs shall be terminated with an else clause]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All if ... else if constructs shall be terminated with an else clause]]></description>
	</rule>
	<rule key="JSF-193" priority="CRITICAL">
		<name><![CDATA[An unconditional break statement shall terminate every non-empty switch clause]]></name>
		<configKey><![CDATA[An unconditional break statement shall terminate every non-empty switch clause]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An unconditional break statement shall terminate every non-empty switch clause]]></description>
	</rule>
	<rule key="JSF-194" priority="CRITICAL">
		<name><![CDATA[Always provide a default branch for switch statements]]></name>
		<configKey><![CDATA[Always provide a default branch for switch statements]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Always provide a default branch for switch statements]]></description>
	</rule>
	<rule key="JSF-195" priority="MAJOR">
		<name><![CDATA[A switch expression shall not represent a value that is effectively Boolean]]></name>
		<configKey><![CDATA[A switch expression shall not represent a value that is effectively Boolean]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A switch expression shall not represent a value that is effectively Boolean]]></description>
	</rule>
	<rule key="JSF-196" priority="MAJOR">
		<name><![CDATA[Every switch statement will have at least two cases and a potential default]]></name>
		<configKey><![CDATA[Every switch statement will have at least two cases and a potential default]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Every switch statement will have at least two cases and a potential default]]></description>
	</rule>
	<rule key="JSF-197" priority="CRITICAL">
		<name><![CDATA[Do not use floating point variables as loop counters]]></name>
		<configKey><![CDATA[Do not use floating point variables as loop counters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use floating point variables as loop counters]]></description>
	</rule>
	<rule key="JSF-198" priority="MAJOR">
		<name><![CDATA[The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter]]></name>
		<configKey><![CDATA[The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter]]></description>
	</rule>
	<rule key="JSF-199" priority="MAJOR">
		<name><![CDATA[The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop]]></name>
		<configKey><![CDATA[The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop]]></description>
	</rule>
	<rule key="JSF-20" priority="CRITICAL">
		<name><![CDATA[The setjmp macro and the longjmp function shall not be used]]></name>
		<configKey><![CDATA[The setjmp macro and the longjmp function shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The setjmp macro and the longjmp function shall not be used]]></description>
	</rule>
	<rule key="JSF-200" priority="MAJOR">
		<name><![CDATA[Null initialize or increment expressions in for loops will not be used; a while loop will be used instead]]></name>
		<configKey><![CDATA[Null initialize or increment expressions in for loops will not be used; a while loop will be used instead]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Null initialize or increment expressions in for loops will not be used; a while loop will be used instead]]></description>
	</rule>
	<rule key="JSF-201" priority="CRITICAL">
		<name><![CDATA[Do not modify for loop counter within a body of the loop]]></name>
		<configKey><![CDATA[Do not modify for loop counter within a body of the loop]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not modify for loop counter within a body of the loop]]></description>
	</rule>
	<rule key="JSF-202" priority="CRITICAL">
		<name><![CDATA[Floating-point expressions shall not be tested for equality or inequality]]></name>
		<configKey><![CDATA[Floating-point expressions shall not be tested for equality or inequality]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Floating-point expressions shall not be tested for equality or inequality]]></description>
	</rule>
	<rule key="JSF-203" priority="CRITICAL">
		<name><![CDATA[Evaluation of constant unsigned expression should not lead to wrap-around]]></name>
		<configKey><![CDATA[Evaluation of constant unsigned expression should not lead to wrap-around]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Evaluation of constant unsigned expression should not lead to wrap-around]]></description>
	</rule>
	<rule key="JSF-204_a" priority="CRITICAL">
		<name><![CDATA[Assert liberally to document internal assumptions and invariants]]></name>
		<configKey><![CDATA[Assert liberally to document internal assumptions and invariants]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Assert liberally to document internal assumptions and invariants]]></description>
	</rule>
	<rule key="JSF-204_b" priority="CRITICAL">
		<name><![CDATA[The increment (++) and decrement (--) operators should not be mixed with other operators in an expression]]></name>
		<configKey><![CDATA[The increment (++) and decrement (--) operators should not be mixed with other operators in an expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The increment (++) and decrement (--) operators should not be mixed with other operators in an expression]]></description>
	</rule>
	<rule key="JSF-204_c" priority="CRITICAL">
		<name><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></name>
		<configKey><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></description>
	</rule>
	<rule key="JSF-204_d" priority="CRITICAL">
		<name><![CDATA[The second or third operand of a ternary operator '?:' shall not contain side effects]]></name>
		<configKey><![CDATA[The second or third operand of a ternary operator '?:' shall not contain side effects]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The second or third operand of a ternary operator '?:' shall not contain side effects]]></description>
	</rule>
	<rule key="JSF-204_e" priority="CRITICAL">
		<name><![CDATA[Don't write code that depends on the order of evaluation of function arguments]]></name>
		<configKey><![CDATA[Don't write code that depends on the order of evaluation of function arguments]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't write code that depends on the order of evaluation of function arguments]]></description>
	</rule>
	<rule key="JSF-205" priority="CRITICAL">
		<name><![CDATA[Do not use the volatile keyword]]></name>
		<configKey><![CDATA[Do not use the volatile keyword]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use the volatile keyword]]></description>
	</rule>
	<rule key="JSF-206" priority="CRITICAL">
		<name><![CDATA[Dynamic heap memory allocation shall not be used]]></name>
		<configKey><![CDATA[Dynamic heap memory allocation shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Dynamic heap memory allocation shall not be used]]></description>
	</rule>
	<rule key="JSF-207" priority="MAJOR">
		<name><![CDATA[Encapsulate global variables and constants, enumerated types, and typedefs in a class]]></name>
		<configKey><![CDATA[Encapsulate global variables and constants, enumerated types, and typedefs in a class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Encapsulate global variables and constants, enumerated types, and typedefs in a class]]></description>
	</rule>
	<rule key="JSF-208" priority="CRITICAL">
		<name><![CDATA[C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)]]></name>
		<configKey><![CDATA[C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)]]></description>
	</rule>
	<rule key="JSF-209" priority="CRITICAL">
		<name><![CDATA[typedefs that indicate size and signedness should be used in place of the basic types]]></name>
		<configKey><![CDATA[typedefs that indicate size and signedness should be used in place of the basic types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[typedefs that indicate size and signedness should be used in place of the basic types]]></description>
	</rule>
	<rule key="JSF-21" priority="CRITICAL">
		<name><![CDATA[The signal handling facilities of signal.h shall not be used]]></name>
		<configKey><![CDATA[The signal handling facilities of signal.h shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The signal handling facilities of signal.h shall not be used]]></description>
	</rule>
	<rule key="JSF-210.1" priority="CRITICAL">
		<name><![CDATA[Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier]]></name>
		<configKey><![CDATA[Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier]]></description>
	</rule>
	<rule key="JSF-213_a" priority="CRITICAL">
		<name><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></name>
		<configKey><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></description>
	</rule>
	<rule key="JSF-213_b" priority="CRITICAL">
		<name><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></name>
		<configKey><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></description>
	</rule>
	<rule key="JSF-213_c" priority="CRITICAL">
		<name><![CDATA[No parentheses are required for the operand of a unary operator]]></name>
		<configKey><![CDATA[No parentheses are required for the operand of a unary operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[No parentheses are required for the operand of a unary operator]]></description>
	</rule>
	<rule key="JSF-213_d" priority="CRITICAL">
		<name><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></name>
		<configKey><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></description>
	</rule>
	<rule key="JSF-213_e" priority="CRITICAL">
		<name><![CDATA[Use parentheses unless all operators in the expression are the same]]></name>
		<configKey><![CDATA[Use parentheses unless all operators in the expression are the same]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use parentheses unless all operators in the expression are the same]]></description>
	</rule>
	<rule key="JSF-214" priority="CRITICAL">
		<name><![CDATA[Avoid initialization order problems across translation units]]></name>
		<configKey><![CDATA[Avoid initialization order problems across translation units]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid initialization order problems across translation units]]></description>
	</rule>
	<rule key="JSF-215" priority="MAJOR">
		<name><![CDATA[Avoid pointer arithmetic]]></name>
		<configKey><![CDATA[Avoid pointer arithmetic]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid pointer arithmetic]]></description>
	</rule>
	<rule key="JSF-22" priority="CRITICAL">
		<name><![CDATA[The input/output library stdio.h shall not be used]]></name>
		<configKey><![CDATA[The input/output library stdio.h shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The input/output library stdio.h shall not be used]]></description>
	</rule>
	<rule key="JSF-23" priority="CRITICAL">
		<name><![CDATA[The library functions atof, atoi and atol from library stdlib.h shall not be used]]></name>
		<configKey><![CDATA[The library functions atof, atoi and atol from library stdlib.h shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The library functions atof, atoi and atol from library stdlib.h shall not be used]]></description>
	</rule>
	<rule key="JSF-24" priority="CRITICAL">
		<name><![CDATA[The library functions abort, exit, getenv and system from library stdlib.h shall not be used]]></name>
		<configKey><![CDATA[The library functions abort, exit, getenv and system from library stdlib.h shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The library functions abort, exit, getenv and system from library stdlib.h shall not be used]]></description>
	</rule>
	<rule key="JSF-25" priority="CRITICAL">
		<name><![CDATA[The time handling functions of library time.h shall not be used]]></name>
		<configKey><![CDATA[The time handling functions of library time.h shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The time handling functions of library time.h shall not be used]]></description>
	</rule>
	<rule key="JSF-26" priority="CRITICAL">
		<name><![CDATA[Only the following pre-processor directives shall be used: #ifndef, #define, #endif, #include]]></name>
		<configKey><![CDATA[Only the following pre-processor directives shall be used: #ifndef, #define, #endif, #include]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Only the following pre-processor directives shall be used: #ifndef, #define, #endif, #include]]></description>
	</rule>
	<rule key="JSF-27" priority="MAJOR">
		<name><![CDATA[Use multiple include guards]]></name>
		<configKey><![CDATA[Use multiple include guards]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use multiple include guards]]></description>
	</rule>
	<rule key="JSF-28" priority="MAJOR">
		<name><![CDATA[The #ifndef and #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file]]></name>
		<configKey><![CDATA[The #ifndef and #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The #ifndef and #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file]]></description>
	</rule>
	<rule key="JSF-29" priority="CRITICAL">
		<name><![CDATA[A function should be used in preference to a function-like macro]]></name>
		<configKey><![CDATA[A function should be used in preference to a function-like macro]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A function should be used in preference to a function-like macro]]></description>
	</rule>
	<rule key="JSF-3" priority="CRITICAL">
		<name><![CDATA[Follow the Cyclomatic Complexity limit of 20]]></name>
		<configKey><![CDATA[Follow the Cyclomatic Complexity limit of 20]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Follow the Cyclomatic Complexity limit of 20]]></description>
	</rule>
	<rule key="JSF-30" priority="CRITICAL">
		<name><![CDATA[Do not define constants via #define]]></name>
		<configKey><![CDATA[Do not define constants via #define]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not define constants via #define]]></description>
	</rule>
	<rule key="JSF-31" priority="MAJOR">
		<name><![CDATA[Avoid macros]]></name>
		<configKey><![CDATA[Avoid macros]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid macros]]></description>
	</rule>
	<rule key="JSF-32" priority="MAJOR">
		<name><![CDATA[The #include pre-processor directive will only be used to include header (*.h) files]]></name>
		<configKey><![CDATA[The #include pre-processor directive will only be used to include header (*.h) files]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The #include pre-processor directive will only be used to include header (*.h) files]]></description>
	</rule>
	<rule key="JSF-33" priority="CRITICAL">
		<name><![CDATA[The #include directive shall use the &lt;filename.h&gt; notation to include header files]]></name>
		<configKey><![CDATA[The #include directive shall use the &lt;filename.h&gt; notation to include header files]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The #include directive shall use the &lt;filename.h&gt; notation to include header files]]></description>
	</rule>
	<rule key="JSF-35" priority="MAJOR">
		<name><![CDATA[Use mechanism that prevents multiple inclusion of the file i.e. include guards or "#pragma once" preprocessor directive]]></name>
		<configKey><![CDATA[Use mechanism that prevents multiple inclusion of the file i.e. include guards or "#pragma once" preprocessor directive]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use mechanism that prevents multiple inclusion of the file i.e. include guards or "#pragma once" preprocessor directive]]></description>
	</rule>
	<rule key="JSF-39_a" priority="MAJOR">
		<name><![CDATA[Don't define entities with linkage in a header file]]></name>
		<configKey><![CDATA[Don't define entities with linkage in a header file]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't define entities with linkage in a header file]]></description>
	</rule>
	<rule key="JSF-41" priority="MAJOR">
		<name><![CDATA[Source lines will be kept to a length of 120 characters or less]]></name>
		<configKey><![CDATA[Source lines will be kept to a length of 120 characters or less]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Source lines will be kept to a length of 120 characters or less]]></description>
	</rule>
	<rule key="JSF-42" priority="MAJOR">
		<name><![CDATA[Only one statement shall be allowed per line]]></name>
		<configKey><![CDATA[Only one statement shall be allowed per line]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Only one statement shall be allowed per line]]></description>
	</rule>
	<rule key="JSF-43" priority="MINOR">
		<name><![CDATA[Tabs that do not use ASCII spaces shall not be used]]></name>
		<configKey><![CDATA[Tabs that do not use ASCII spaces shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Tabs that do not use ASCII spaces shall not be used]]></description>
	</rule>
	<rule key="JSF-46" priority="CRITICAL">
		<name><![CDATA[User-specified identifiers (internal and external) will not rely on significance of more than 64 characters]]></name>
		<configKey><![CDATA[User-specified identifiers (internal and external) will not rely on significance of more than 64 characters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[User-specified identifiers (internal and external) will not rely on significance of more than 64 characters]]></description>
	</rule>
	<rule key="JSF-47" priority="MAJOR">
		<name><![CDATA[Do not use identifiers which begin with one or two underscores (`_' or `__')]]></name>
		<configKey><![CDATA[Do not use identifiers which begin with one or two underscores (`_' or `__')]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use identifiers which begin with one or two underscores (`_' or `__')]]></description>
	</rule>
	<rule key="JSF-48" priority="MAJOR">
		<name><![CDATA[Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers]]></name>
		<configKey><![CDATA[Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers]]></description>
	</rule>
	<rule key="JSF-50" priority="MAJOR">
		<name><![CDATA[Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter]]></name>
		<configKey><![CDATA[Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter]]></description>
	</rule>
	<rule key="JSF-51" priority="MAJOR">
		<name><![CDATA[All letters contained in function and variable names will be composed entirely of lowercase letters]]></name>
		<configKey><![CDATA[All letters contained in function and variable names will be composed entirely of lowercase letters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All letters contained in function and variable names will be composed entirely of lowercase letters]]></description>
	</rule>
	<rule key="JSF-52" priority="CRITICAL">
		<name><![CDATA[Identifiers for constant and enumerator values shall be lowercase]]></name>
		<configKey><![CDATA[Identifiers for constant and enumerator values shall be lowercase]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Identifiers for constant and enumerator values shall be lowercase]]></description>
	</rule>
	<rule key="JSF-53.1" priority="CRITICAL">
		<name><![CDATA[The following character sequences shall not appear in header file names: ', \, /*, //, or "]]></name>
		<configKey><![CDATA[The following character sequences shall not appear in header file names: ', \, /*, //, or "]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The following character sequences shall not appear in header file names: ', \, /*, //, or "]]></description>
	</rule>
	<rule key="JSF-53" priority="MAJOR">
		<name><![CDATA[Header files will always have a file name extension of ".h"]]></name>
		<configKey><![CDATA[Header files will always have a file name extension of ".h"]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Header files will always have a file name extension of ".h"]]></description>
	</rule>
	<rule key="JSF-54" priority="MAJOR">
		<name><![CDATA[Implementation files will always have a file name extension of ".cpp"]]></name>
		<configKey><![CDATA[Implementation files will always have a file name extension of ".cpp"]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Implementation files will always have a file name extension of ".cpp"]]></description>
	</rule>
	<rule key="JSF-57_a" priority="MAJOR">
		<name><![CDATA[Order of scopes in class: public before all others]]></name>
		<configKey><![CDATA[Order of scopes in class: public before all others]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Order of scopes in class: public before all others]]></description>
	</rule>
	<rule key="JSF-57_b" priority="MAJOR">
		<name><![CDATA[Order of scopes in classes: protected before private]]></name>
		<configKey><![CDATA[Order of scopes in classes: protected before private]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Order of scopes in classes: protected before private]]></description>
	</rule>
	<rule key="JSF-58" priority="MAJOR">
		<name><![CDATA[When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be]]></name>
		<configKey><![CDATA[When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be]]></description>
	</rule>
	<rule key="JSF-59_a" priority="CRITICAL">
		<name><![CDATA[The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement]]></name>
		<configKey><![CDATA[The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement]]></description>
	</rule>
	<rule key="JSF-59_b" priority="CRITICAL">
		<name><![CDATA['if' and 'else' should be followed by a compound statement]]></name>
		<configKey><![CDATA['if' and 'else' should be followed by a compound statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA['if' and 'else' should be followed by a compound statement]]></description>
	</rule>
	<rule key="JSF-61" priority="MAJOR">
		<name><![CDATA[Closing curly brace '}' shall appear on a line by themselves]]></name>
		<configKey><![CDATA[Closing curly brace '}' shall appear on a line by themselves]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Closing curly brace '}' shall appear on a line by themselves]]></description>
	</rule>
	<rule key="JSF-62" priority="MAJOR">
		<name><![CDATA[The dereference operator `*' and the address-of operator `&amp;' should be directly connected with the type names]]></name>
		<configKey><![CDATA[The dereference operator `*' and the address-of operator `&amp;' should be directly connected with the type names]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The dereference operator `*' and the address-of operator `&amp;' should be directly connected with the type names]]></description>
	</rule>
	<rule key="JSF-63_a" priority="MAJOR">
		<name><![CDATA[There shall be no white space following a primary operator]]></name>
		<configKey><![CDATA[There shall be no white space following a primary operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no white space following a primary operator]]></description>
	</rule>
	<rule key="JSF-63_b" priority="MAJOR">
		<name><![CDATA[There shall be no white space preceding a primary operator]]></name>
		<configKey><![CDATA[There shall be no white space preceding a primary operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no white space preceding a primary operator]]></description>
	</rule>
	<rule key="JSF-63_c" priority="MAJOR">
		<name><![CDATA[There shall be no white space between a prefix unary operator and its operand]]></name>
		<configKey><![CDATA[There shall be no white space between a prefix unary operator and its operand]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no white space between a prefix unary operator and its operand]]></description>
	</rule>
	<rule key="JSF-63_d" priority="MAJOR">
		<name><![CDATA[There shall be no white space between a postfix unary operator and its operand]]></name>
		<configKey><![CDATA[There shall be no white space between a postfix unary operator and its operand]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no white space between a postfix unary operator and its operand]]></description>
	</rule>
	<rule key="JSF-67_a" priority="CRITICAL">
		<name><![CDATA[Avoid "public" data members]]></name>
		<configKey><![CDATA[Avoid "public" data members]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid "public" data members]]></description>
	</rule>
	<rule key="JSF-67_b" priority="CRITICAL">
		<name><![CDATA[Avoid 'protected' data members]]></name>
		<configKey><![CDATA[Avoid 'protected' data members]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid 'protected' data members]]></description>
	</rule>
	<rule key="JSF-68" priority="CRITICAL">
		<name><![CDATA[Declare the copy constructor and copy assignment operator private not in class itself, but in a specifically designed base class]]></name>
		<configKey><![CDATA[Declare the copy constructor and copy assignment operator private not in class itself, but in a specifically designed base class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Declare the copy constructor and copy assignment operator private not in class itself, but in a specifically designed base class]]></description>
	</rule>
	<rule key="JSF-69" priority="MAJOR">
		<name><![CDATA[Member functions shall be declared const whenever possible]]></name>
		<configKey><![CDATA[Member functions shall be declared const whenever possible]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Member functions shall be declared const whenever possible]]></description>
	</rule>
	<rule key="JSF-70.1" priority="CRITICAL">
		<name><![CDATA[Freed memory shouldn't be accessed under any circumstances. Destructor should not be called manually]]></name>
		<configKey><![CDATA[Freed memory shouldn't be accessed under any circumstances. Destructor should not be called manually]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Freed memory shouldn't be accessed under any circumstances. Destructor should not be called manually]]></description>
	</rule>
	<rule key="JSF-71.1" priority="CRITICAL">
		<name><![CDATA[Avoid calling virtual functions from constructors and destructors]]></name>
		<configKey><![CDATA[Avoid calling virtual functions from constructors and destructors]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid calling virtual functions from constructors and destructors]]></description>
	</rule>
	<rule key="JSF-71" priority="CRITICAL">
		<name><![CDATA[Public and protected methods should not be invoked by class constructor]]></name>
		<configKey><![CDATA[Public and protected methods should not be invoked by class constructor]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Public and protected methods should not be invoked by class constructor]]></description>
	</rule>
	<rule key="JSF-74" priority="MAJOR">
		<name><![CDATA[Prefer initialization to assignment in constructors]]></name>
		<configKey><![CDATA[Prefer initialization to assignment in constructors]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer initialization to assignment in constructors]]></description>
	</rule>
	<rule key="JSF-75" priority="CRITICAL">
		<name><![CDATA[List members in an initialization list in the order in which they are declared]]></name>
		<configKey><![CDATA[List members in an initialization list in the order in which they are declared]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[List members in an initialization list in the order in which they are declared]]></description>
	</rule>
	<rule key="JSF-76_a" priority="CRITICAL">
		<name><![CDATA[Declare an assignment operator for classes with dynamically allocated memory]]></name>
		<configKey><![CDATA[Declare an assignment operator for classes with dynamically allocated memory]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Declare an assignment operator for classes with dynamically allocated memory]]></description>
	</rule>
	<rule key="JSF-76_b" priority="CRITICAL">
		<name><![CDATA[Declare a copy constructor for classes with dynamically allocated memory]]></name>
		<configKey><![CDATA[Declare a copy constructor for classes with dynamically allocated memory]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Declare a copy constructor for classes with dynamically allocated memory]]></description>
	</rule>
	<rule key="JSF-77.1" priority="CRITICAL">
		<name><![CDATA[The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor]]></name>
		<configKey><![CDATA[The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor]]></description>
	</rule>
	<rule key="JSF-77" priority="CRITICAL">
		<name><![CDATA[A copy constructor shall copy all data members and bases]]></name>
		<configKey><![CDATA[A copy constructor shall copy all data members and bases]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A copy constructor shall copy all data members and bases]]></description>
	</rule>
	<rule key="JSF-78" priority="CRITICAL">
		<name><![CDATA[Define a virtual destructor in classes used as base classes which have virtual functions]]></name>
		<configKey><![CDATA[Define a virtual destructor in classes used as base classes which have virtual functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Define a virtual destructor in classes used as base classes which have virtual functions]]></description>
	</rule>
	<rule key="JSF-79" priority="CRITICAL">
		<name><![CDATA[Call fclose() on pointer member in destructor if the pointer was used to open a file]]></name>
		<configKey><![CDATA[Call fclose() on pointer member in destructor if the pointer was used to open a file]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Call fclose() on pointer member in destructor if the pointer was used to open a file]]></description>
	</rule>
	<rule key="JSF-81" priority="CRITICAL">
		<name><![CDATA[Check for assignment to self in operator=]]></name>
		<configKey><![CDATA[Check for assignment to self in operator=]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Check for assignment to self in operator=]]></description>
	</rule>
	<rule key="JSF-82" priority="CRITICAL">
		<name><![CDATA[Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type]]></name>
		<configKey><![CDATA[Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type]]></description>
	</rule>
	<rule key="JSF-83" priority="CRITICAL">
		<name><![CDATA[The assignment operator must assign all members, including those in base classes]]></name>
		<configKey><![CDATA[The assignment operator must assign all members, including those in base classes]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The assignment operator must assign all members, including those in base classes]]></description>
	</rule>
	<rule key="JSF-85" priority="MAJOR">
		<name><![CDATA[When two operators are opposites (such as == and !=), it is appropriate to define both]]></name>
		<configKey><![CDATA[When two operators are opposites (such as == and !=), it is appropriate to define both]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[When two operators are opposites (such as == and !=), it is appropriate to define both]]></description>
	</rule>
	<rule key="JSF-87" priority="MINOR">
		<name><![CDATA[Hierarchies should be based on abstract classes]]></name>
		<configKey><![CDATA[Hierarchies should be based on abstract classes]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hierarchies should be based on abstract classes]]></description>
	</rule>
	<rule key="JSF-88.1" priority="CRITICAL">
		<name><![CDATA[A stateful virtual base shall be explicitly declared in each derived class that accesses it]]></name>
		<configKey><![CDATA[A stateful virtual base shall be explicitly declared in each derived class that accesses it]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A stateful virtual base shall be explicitly declared in each derived class that accesses it]]></description>
	</rule>
	<rule key="JSF-89" priority="CRITICAL">
		<name><![CDATA[A base class shall not be both virtual and non-virtual in the same hierarchy]]></name>
		<configKey><![CDATA[A base class shall not be both virtual and non-virtual in the same hierarchy]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A base class shall not be both virtual and non-virtual in the same hierarchy]]></description>
	</rule>
	<rule key="JSF-9" priority="MAJOR">
		<name><![CDATA[Only use characters defined in ISO C standard]]></name>
		<configKey><![CDATA[Only use characters defined in ISO C standard]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Only use characters defined in ISO C standard]]></description>
	</rule>
	<rule key="JSF-94_a" priority="CRITICAL">
		<name><![CDATA[Never redefine an inherited nonvirtual function]]></name>
		<configKey><![CDATA[Never redefine an inherited nonvirtual function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Never redefine an inherited nonvirtual function]]></description>
	</rule>
	<rule key="JSF-94_b" priority="CRITICAL">
		<name><![CDATA[Do not redefine an inherited nonvirtual function with template parameter]]></name>
		<configKey><![CDATA[Do not redefine an inherited nonvirtual function with template parameter]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not redefine an inherited nonvirtual function with template parameter]]></description>
	</rule>
	<rule key="JSF-95" priority="CRITICAL">
		<name><![CDATA[Do not redefine an inherited virtual function with a different default parameter value]]></name>
		<configKey><![CDATA[Do not redefine an inherited virtual function with a different default parameter value]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not redefine an inherited virtual function with a different default parameter value]]></description>
	</rule>
	<rule key="JSF-96" priority="CRITICAL">
		<name><![CDATA[Don't treat arrays polymorphically]]></name>
		<configKey><![CDATA[Don't treat arrays polymorphically]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't treat arrays polymorphically]]></description>
	</rule>
	<rule key="JSF-97" priority="CRITICAL">
		<name><![CDATA[Arrays shall not be used in interfaces]]></name>
		<configKey><![CDATA[Arrays shall not be used in interfaces]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Arrays shall not be used in interfaces]]></description>
	</rule>
	<rule key="JSF-98" priority="MINOR">
		<name><![CDATA[Avoid using global variables, global functions, and class in file outside namespaces]]></name>
		<configKey><![CDATA[Avoid using global variables, global functions, and class in file outside namespaces]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using global variables, global functions, and class in file outside namespaces]]></description>
	</rule>
	<rule key="JSF-99" priority="MAJOR">
		<name><![CDATA[Namespaces will not be nested more than two levels deep]]></name>
		<configKey><![CDATA[Namespaces will not be nested more than two levels deep]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Namespaces will not be nested more than two levels deep]]></description>
	</rule>
	<rule key="METRICS-01" priority="INFO">
		<name><![CDATA[Avoid functions with over 50 lines]]></name>
		<configKey><![CDATA[Avoid functions with over 50 lines]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid functions with over 50 lines]]></description>
	</rule>
	<rule key="METRICS-02" priority="INFO">
		<name><![CDATA[Avoid switch statements with many cases]]></name>
		<configKey><![CDATA[Avoid switch statements with many cases]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid switch statements with many cases]]></description>
	</rule>
	<rule key="METRICS-03" priority="MAJOR">
		<name><![CDATA[Number of blocks of code in a function]]></name>
		<configKey><![CDATA[Number of blocks of code in a function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Number of blocks of code in a function]]></description>
	</rule>
	<rule key="METRICS-04" priority="MAJOR">
		<name><![CDATA[Number of function calls within function]]></name>
		<configKey><![CDATA[Number of function calls within function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Number of function calls within function]]></description>
	</rule>
	<rule key="METRICS-05" priority="MAJOR">
		<name><![CDATA[Class inheritance level]]></name>
		<configKey><![CDATA[Class inheritance level]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Class inheritance level]]></description>
	</rule>
	<rule key="METRICS-06" priority="MAJOR">
		<name><![CDATA[Number of data member(s) per class should not exceed 15]]></name>
		<configKey><![CDATA[Number of data member(s) per class should not exceed 15]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Number of data member(s) per class should not exceed 15]]></description>
	</rule>
	<rule key="METRICS-07" priority="MAJOR">
		<name><![CDATA[Number of methods per class]]></name>
		<configKey><![CDATA[Number of methods per class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Number of methods per class]]></description>
	</rule>
	<rule key="METRICS-08" priority="MAJOR">
		<name><![CDATA[Number of parameter(s) per method should not exceed 10]]></name>
		<configKey><![CDATA[Number of parameter(s) per method should not exceed 10]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Number of parameter(s) per method should not exceed 10]]></description>
	</rule>
	<rule key="METRICS-09" priority="MAJOR">
		<name><![CDATA[Number of private data member(s) per class]]></name>
		<configKey><![CDATA[Number of private data member(s) per class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Number of private data member(s) per class]]></description>
	</rule>
	<rule key="METRICS-10" priority="MAJOR">
		<name><![CDATA[Number of private methods per class]]></name>
		<configKey><![CDATA[Number of private methods per class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Number of private methods per class]]></description>
	</rule>
	<rule key="METRICS-11" priority="MAJOR">
		<name><![CDATA[Number of protected data member(s) per class]]></name>
		<configKey><![CDATA[Number of protected data member(s) per class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Number of protected data member(s) per class]]></description>
	</rule>
	<rule key="METRICS-12" priority="MAJOR">
		<name><![CDATA[Number of protected methods per class]]></name>
		<configKey><![CDATA[Number of protected methods per class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Number of protected methods per class]]></description>
	</rule>
	<rule key="METRICS-13" priority="MAJOR">
		<name><![CDATA[Number of public data member(s) per class]]></name>
		<configKey><![CDATA[Number of public data member(s) per class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Number of public data member(s) per class]]></description>
	</rule>
	<rule key="METRICS-14" priority="MAJOR">
		<name><![CDATA[Number of public methods per class]]></name>
		<configKey><![CDATA[Number of public methods per class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Number of public methods per class]]></description>
	</rule>
	<rule key="METRICS-15" priority="MAJOR">
		<name><![CDATA[Avoid functions with more than 5 parameters]]></name>
		<configKey><![CDATA[Avoid functions with more than 5 parameters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid functions with more than 5 parameters]]></description>
	</rule>
	<rule key="METRICS-16" priority="MAJOR">
		<name><![CDATA[Macros should not use more than 5 parameters]]></name>
		<configKey><![CDATA[Macros should not use more than 5 parameters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Macros should not use more than 5 parameters]]></description>
	</rule>
	<rule key="METRICS-17" priority="INFO">
		<name><![CDATA[Avoid structs, unions, or classes with more than 20 fields]]></name>
		<configKey><![CDATA[Avoid structs, unions, or classes with more than 20 fields]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid structs, unions, or classes with more than 20 fields]]></description>
	</rule>
	<rule key="METRICS-18" priority="MAJOR">
		<name><![CDATA[Follow the Cyclomatic Complexity limit of 10]]></name>
		<configKey><![CDATA[Follow the Cyclomatic Complexity limit of 10]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Follow the Cyclomatic Complexity limit of 10]]></description>
	</rule>
	<rule key="METRICS-19" priority="MAJOR">
		<name><![CDATA[The percentage of comment lines versus the total number of module lines should be between 20 and 60]]></name>
		<configKey><![CDATA[The percentage of comment lines versus the total number of module lines should be between 20 and 60]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The percentage of comment lines versus the total number of module lines should be between 20 and 60]]></description>
	</rule>
	<rule key="METRICS-20" priority="MAJOR">
		<name><![CDATA[Avoid too long functions (declarations and statements)]]></name>
		<configKey><![CDATA[Avoid too long functions (declarations and statements)]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid too long functions (declarations and statements)]]></description>
	</rule>
	<rule key="METRICS-21" priority="MAJOR">
		<name><![CDATA[Avoid too long functions (blocks)]]></name>
		<configKey><![CDATA[Avoid too long functions (blocks)]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid too long functions (blocks)]]></description>
	</rule>
	<rule key="METRICS-22" priority="MAJOR">
		<name><![CDATA[Avoid functions with over 75 lines of code]]></name>
		<configKey><![CDATA[Avoid functions with over 75 lines of code]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid functions with over 75 lines of code]]></description>
	</rule>
	<rule key="METRICS-23" priority="MAJOR">
		<name><![CDATA[Avoid deep nesting]]></name>
		<configKey><![CDATA[Avoid deep nesting]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid deep nesting]]></description>
	</rule>
	<rule key="METRICS-24" priority="INFO">
		<name><![CDATA[Avoid source files that are longer than 500 lines]]></name>
		<configKey><![CDATA[Avoid source files that are longer than 500 lines]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid source files that are longer than 500 lines]]></description>
	</rule>
	<rule key="METRICS-25" priority="MAJOR">
		<name><![CDATA[Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)]]></name>
		<configKey><![CDATA[Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)]]></description>
	</rule>
	<rule key="METRICS-26" priority="MAJOR">
		<name><![CDATA[Source lines will be kept to a length of 120 characters or less]]></name>
		<configKey><![CDATA[Source lines will be kept to a length of 120 characters or less]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Source lines will be kept to a length of 120 characters or less]]></description>
	</rule>
	<rule key="METRICS-27" priority="MAJOR">
		<name><![CDATA[Functions with more than 7 parameters will not be used]]></name>
		<configKey><![CDATA[Functions with more than 7 parameters will not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Functions with more than 7 parameters will not be used]]></description>
	</rule>
	<rule key="METRICS-28" priority="MAJOR">
		<name><![CDATA[Follow the Cyclomatic Complexity limit of 20]]></name>
		<configKey><![CDATA[Follow the Cyclomatic Complexity limit of 20]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Follow the Cyclomatic Complexity limit of 20]]></description>
	</rule>
	<rule key="METRICS-29" priority="INFO">
		<name><![CDATA[Report Cyclomatic Complexity]]></name>
		<configKey><![CDATA[Report Cyclomatic Complexity]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Report Cyclomatic Complexity]]></description>
	</rule>
	<rule key="METRICS-30" priority="MAJOR">
		<name><![CDATA[No function should be longer than 60 lines of code]]></name>
		<configKey><![CDATA[No function should be longer than 60 lines of code]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[No function should be longer than 60 lines of code]]></description>
	</rule>
	<rule key="METRICS-31" priority="MAJOR">
		<name><![CDATA[The assertion density of the code should average to a minimum of two assertions per function]]></name>
		<configKey><![CDATA[The assertion density of the code should average to a minimum of two assertions per function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The assertion density of the code should average to a minimum of two assertions per function]]></description>
	</rule>
	<rule key="METRICS-32" priority="MAJOR">
		<name><![CDATA[All functions with more than 20 lines should contain at least 2 assertions]]></name>
		<configKey><![CDATA[All functions with more than 20 lines should contain at least 2 assertions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All functions with more than 20 lines should contain at least 2 assertions]]></description>
	</rule>
	<rule key="METRICS-33" priority="INFO">
		<name><![CDATA[Report Essential Complexity]]></name>
		<configKey><![CDATA[Report Essential Complexity]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Report Essential Complexity]]></description>
	</rule>
	<rule key="METRICS-34" priority="INFO">
		<name><![CDATA[Follow the Essential Complexity limit of 4]]></name>
		<configKey><![CDATA[Follow the Essential Complexity limit of 4]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Follow the Essential Complexity limit of 4]]></description>
	</rule>
	<rule key="METRICS-35" priority="INFO">
		<name><![CDATA[Follow the Essential Complexity limit of 10]]></name>
		<configKey><![CDATA[Follow the Essential Complexity limit of 10]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Follow the Essential Complexity limit of 10]]></description>
	</rule>
	<rule key="METRICS-36" priority="MAJOR">
		<name><![CDATA[A function should not be called from more than 5 different functions]]></name>
		<configKey><![CDATA[A function should not be called from more than 5 different functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A function should not be called from more than 5 different functions]]></description>
	</rule>
	<rule key="METRICS-37" priority="MAJOR">
		<name><![CDATA[A function should not call more than 7 different functions]]></name>
		<configKey><![CDATA[A function should not call more than 7 different functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A function should not call more than 7 different functions]]></description>
	</rule>
	<rule key="METRICS-38" priority="MAJOR">
		<name><![CDATA[The number of statements within function should be in range 1 - 50]]></name>
		<configKey><![CDATA[The number of statements within function should be in range 1 - 50]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The number of statements within function should be in range 1 - 50]]></description>
	</rule>
	<rule key="METRICS-39" priority="MAJOR">
		<name><![CDATA[The value of VOCF metric for a function should not be higher than 4]]></name>
		<configKey><![CDATA[The value of VOCF metric for a function should not be higher than 4]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The value of VOCF metric for a function should not be higher than 4]]></description>
	</rule>
	<rule key="METRICS-40" priority="MAJOR">
		<name><![CDATA[Statements within function should not be nested deeper than 4 levels]]></name>
		<configKey><![CDATA[Statements within function should not be nested deeper than 4 levels]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Statements within function should not be nested deeper than 4 levels]]></description>
	</rule>
	<rule key="METRICS-41" priority="MAJOR">
		<name><![CDATA[The number of blocks of comments before and inside function to the number of statements in function should be &gt; 0.2]]></name>
		<configKey><![CDATA[The number of blocks of comments before and inside function to the number of statements in function should be &gt; 0.2]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The number of blocks of comments before and inside function to the number of statements in function should be &gt; 0.2]]></description>
	</rule>
	<rule key="MISRA-004_a" priority="INFO">
		<name><![CDATA[Provisions should be made for appropriate run-time checking]]></name>
		<configKey><![CDATA[Provisions should be made for appropriate run-time checking]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Provisions should be made for appropriate run-time checking]]></description>
	</rule>
	<rule key="MISRA-004_b" priority="INFO">
		<name><![CDATA[Provisions should be made for appropriate run-time checking]]></name>
		<configKey><![CDATA[Provisions should be made for appropriate run-time checking]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Provisions should be made for appropriate run-time checking]]></description>
	</rule>
	<rule key="MISRA-005" priority="MAJOR">
		<name><![CDATA[Only use characters defined in ISO C standard]]></name>
		<configKey><![CDATA[Only use characters defined in ISO C standard]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Only use characters defined in ISO C standard]]></description>
	</rule>
	<rule key="MISRA-006" priority="MAJOR">
		<name><![CDATA[Values of character types shall be restricted to a defined and documented subset of ISO 10646-1]]></name>
		<configKey><![CDATA[Values of character types shall be restricted to a defined and documented subset of ISO 10646-1]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Values of character types shall be restricted to a defined and documented subset of ISO 10646-1]]></description>
	</rule>
	<rule key="MISRA-008" priority="MAJOR">
		<name><![CDATA[Do not use wide string literals]]></name>
		<configKey><![CDATA[Do not use wide string literals]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use wide string literals]]></description>
	</rule>
	<rule key="MISRA-014" priority="MAJOR">
		<name><![CDATA[Explicitly declare char type as signed or unsigned]]></name>
		<configKey><![CDATA[Explicitly declare char type as signed or unsigned]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Explicitly declare char type as signed or unsigned]]></description>
	</rule>
	<rule key="MISRA-016" priority="MAJOR">
		<name><![CDATA[The underlying bit representations of floating point numbers shall not be used]]></name>
		<configKey><![CDATA[The underlying bit representations of floating point numbers shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The underlying bit representations of floating point numbers shall not be used]]></description>
	</rule>
	<rule key="MISRA-018_a" priority="INFO">
		<name><![CDATA[Use type suffix for numeric constants]]></name>
		<configKey><![CDATA[Use type suffix for numeric constants]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use type suffix for numeric constants]]></description>
	</rule>
	<rule key="MISRA-018_b" priority="INFO">
		<name><![CDATA[Use type suffix for numeric constants]]></name>
		<configKey><![CDATA[Use type suffix for numeric constants]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use type suffix for numeric constants]]></description>
	</rule>
	<rule key="MISRA-018_c" priority="INFO">
		<name><![CDATA[Use type suffix for numeric constants]]></name>
		<configKey><![CDATA[Use type suffix for numeric constants]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use type suffix for numeric constants]]></description>
	</rule>
	<rule key="MISRA-018_d" priority="INFO">
		<name><![CDATA[Use type suffix for numeric constants]]></name>
		<configKey><![CDATA[Use type suffix for numeric constants]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use type suffix for numeric constants]]></description>
	</rule>
	<rule key="MISRA-020" priority="MAJOR">
		<name><![CDATA[All functions shall be declared before use]]></name>
		<configKey><![CDATA[All functions shall be declared before use]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All functions shall be declared before use]]></description>
	</rule>
	<rule key="MISRA-022" priority="INFO">
		<name><![CDATA[Declare objects at function scope]]></name>
		<configKey><![CDATA[Declare objects at function scope]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Declare objects at function scope]]></description>
	</rule>
	<rule key="MISRA-023" priority="INFO">
		<name><![CDATA[Make declarations at file scope static where possible]]></name>
		<configKey><![CDATA[Make declarations at file scope static where possible]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Make declarations at file scope static where possible]]></description>
	</rule>
	<rule key="MISRA-024" priority="MAJOR">
		<name><![CDATA[Use consistent linkage for identifiers]]></name>
		<configKey><![CDATA[Use consistent linkage for identifiers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use consistent linkage for identifiers]]></description>
	</rule>
	<rule key="MISRA-027" priority="MAJOR">
		<name><![CDATA[External object should not be declared in more than one file]]></name>
		<configKey><![CDATA[External object should not be declared in more than one file]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[External object should not be declared in more than one file]]></description>
	</rule>
	<rule key="MISRA-028" priority="INFO">
		<name><![CDATA[Do not use register storage class]]></name>
		<configKey><![CDATA[Do not use register storage class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use register storage class]]></description>
	</rule>
	<rule key="MISRA-029" priority="MAJOR">
		<name><![CDATA[The use of a tag shall agree with its declaration]]></name>
		<configKey><![CDATA[The use of a tag shall agree with its declaration]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The use of a tag shall agree with its declaration]]></description>
	</rule>
	<rule key="MISRA-030" priority="MAJOR">
		<name><![CDATA[All automatic variables shall have been assigned a value before being used]]></name>
		<configKey><![CDATA[All automatic variables shall have been assigned a value before being used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All automatic variables shall have been assigned a value before being used]]></description>
	</rule>
	<rule key="MISRA-038" priority="MAJOR">
		<name><![CDATA[Invalid range of the right hand operand of a shift operator]]></name>
		<configKey><![CDATA[Invalid range of the right hand operand of a shift operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Invalid range of the right hand operand of a shift operator]]></description>
	</rule>
	<rule key="MISRA-041" priority="INFO">
		<name><![CDATA[Document integer division]]></name>
		<configKey><![CDATA[Document integer division]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Document integer division]]></description>
	</rule>
	<rule key="MISRA-042" priority="MAJOR">
		<name><![CDATA[The comma operator shall not be used, except in the control expression of a for loop]]></name>
		<configKey><![CDATA[The comma operator shall not be used, except in the control expression of a for loop]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The comma operator shall not be used, except in the control expression of a for loop]]></description>
	</rule>
	<rule key="MISRA-043" priority="MAJOR">
		<name><![CDATA[Implicit conversions which may result in a loss of information shall not be used]]></name>
		<configKey><![CDATA[Implicit conversions which may result in a loss of information shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Implicit conversions which may result in a loss of information shall not be used]]></description>
	</rule>
	<rule key="MISRA-046_a" priority="MAJOR">
		<name><![CDATA[Do not use the volatile keyword]]></name>
		<configKey><![CDATA[Do not use the volatile keyword]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use the volatile keyword]]></description>
	</rule>
	<rule key="MISRA-046_c" priority="MAJOR">
		<name><![CDATA[Evaluation order of an expression is implementation dependent]]></name>
		<configKey><![CDATA[Evaluation order of an expression is implementation dependent]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Evaluation order of an expression is implementation dependent]]></description>
	</rule>
	<rule key="MISRA-046_d" priority="MAJOR">
		<name><![CDATA[Evaluation order of an expression is implementation dependent]]></name>
		<configKey><![CDATA[Evaluation order of an expression is implementation dependent]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Evaluation order of an expression is implementation dependent]]></description>
	</rule>
	<rule key="MISRA-048_a" priority="INFO">
		<name><![CDATA[Use explicit casts in mixed precision arithmetic]]></name>
		<configKey><![CDATA[Use explicit casts in mixed precision arithmetic]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use explicit casts in mixed precision arithmetic]]></description>
	</rule>
	<rule key="MISRA-048_b" priority="INFO">
		<name><![CDATA[Use explicit casts in mixed precision arithmetic]]></name>
		<configKey><![CDATA[Use explicit casts in mixed precision arithmetic]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use explicit casts in mixed precision arithmetic]]></description>
	</rule>
	<rule key="MISRA-048_c" priority="INFO">
		<name><![CDATA[Use explicit casts in mixed precision arithmetic]]></name>
		<configKey><![CDATA[Use explicit casts in mixed precision arithmetic]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use explicit casts in mixed precision arithmetic]]></description>
	</rule>
	<rule key="MISRA-048_d" priority="INFO">
		<name><![CDATA[Use explicit casts in mixed precision arithmetic]]></name>
		<configKey><![CDATA[Use explicit casts in mixed precision arithmetic]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use explicit casts in mixed precision arithmetic]]></description>
	</rule>
	<rule key="MISRA-048_e" priority="MAJOR">
		<name><![CDATA[Use explicit type conversions for arithmetic using signed and unsigned values]]></name>
		<configKey><![CDATA[Use explicit type conversions for arithmetic using signed and unsigned values]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use explicit type conversions for arithmetic using signed and unsigned values]]></description>
	</rule>
	<rule key="MISRA-051" priority="INFO">
		<name><![CDATA[Evaluation of constant unsigned expression should not lead to wrap-around]]></name>
		<configKey><![CDATA[Evaluation of constant unsigned expression should not lead to wrap-around]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Evaluation of constant unsigned expression should not lead to wrap-around]]></description>
	</rule>
	<rule key="MISRA-054" priority="MAJOR">
		<name><![CDATA[A null statement shall only occur on a line by itself, and shall not  have any other text on the same line]]></name>
		<configKey><![CDATA[A null statement shall only occur on a line by itself, and shall not  have any other text on the same line]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A null statement shall only occur on a line by itself, and shall not  have any other text on the same line]]></description>
	</rule>
	<rule key="MISRA-055" priority="INFO">
		<name><![CDATA[Do not use labels]]></name>
		<configKey><![CDATA[Do not use labels]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use labels]]></description>
	</rule>
	<rule key="MISRA-058" priority="MAJOR">
		<name><![CDATA[Do not use the break statement]]></name>
		<configKey><![CDATA[Do not use the break statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use the break statement]]></description>
	</rule>
	<rule key="MISRA-065" priority="MAJOR">
		<name><![CDATA[Do not use floating point variables as loop counters]]></name>
		<configKey><![CDATA[Do not use floating point variables as loop counters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use floating point variables as loop counters]]></description>
	</rule>
	<rule key="MISRA-069" priority="MAJOR">
		<name><![CDATA[Do not use functions with variable numbers of arguments]]></name>
		<configKey><![CDATA[Do not use functions with variable numbers of arguments]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use functions with variable numbers of arguments]]></description>
	</rule>
	<rule key="MISRA-071" priority="MAJOR">
		<name><![CDATA[Functions shall always have visible prototype at both the function definition and call]]></name>
		<configKey><![CDATA[Functions shall always have visible prototype at both the function definition and call]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Functions shall always have visible prototype at both the function definition and call]]></description>
	</rule>
	<rule key="MISRA-073" priority="MAJOR">
		<name><![CDATA[Provide none or all identifiers for function arguments]]></name>
		<configKey><![CDATA[Provide none or all identifiers for function arguments]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Provide none or all identifiers for function arguments]]></description>
	</rule>
	<rule key="MISRA-083" priority="MAJOR">
		<name><![CDATA[Provide expression for return statement of non-void functions]]></name>
		<configKey><![CDATA[Provide expression for return statement of non-void functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Provide expression for return statement of non-void functions]]></description>
	</rule>
	<rule key="MISRA-084" priority="MAJOR">
		<name><![CDATA[Avoid expressions in return statements of void functions]]></name>
		<configKey><![CDATA[Avoid expressions in return statements of void functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid expressions in return statements of void functions]]></description>
	</rule>
	<rule key="MISRA-085" priority="INFO">
		<name><![CDATA[Use empty parentheses when calling function with no arguments]]></name>
		<configKey><![CDATA[Use empty parentheses when calling function with no arguments]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use empty parentheses when calling function with no arguments]]></description>
	</rule>
	<rule key="MISRA-086" priority="INFO">
		<name><![CDATA[If a function return error information, then that error information should be tested]]></name>
		<configKey><![CDATA[If a function return error information, then that error information should be tested]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If a function return error information, then that error information should be tested]]></description>
	</rule>
	<rule key="MISRA-089" priority="MAJOR">
		<name><![CDATA[#include directive must be followed by a filename in double-quotes or angle brackets]]></name>
		<configKey><![CDATA[#include directive must be followed by a filename in double-quotes or angle brackets]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[#include directive must be followed by a filename in double-quotes or angle brackets]]></description>
	</rule>
	<rule key="MISRA-096" priority="MAJOR">
		<name><![CDATA[Enclose in parentheses whole definition of a function-like macro]]></name>
		<configKey><![CDATA[Enclose in parentheses whole definition of a function-like macro]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Enclose in parentheses whole definition of a function-like macro]]></description>
	</rule>
	<rule key="MISRA-100" priority="MAJOR">
		<name><![CDATA[Use only non-ambiguous forms of defined pre-processor operator]]></name>
		<configKey><![CDATA[Use only non-ambiguous forms of defined pre-processor operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use only non-ambiguous forms of defined pre-processor operator]]></description>
	</rule>
	<rule key="MISRA-101" priority="INFO">
		<name><![CDATA[Avoid pointer arithmetic]]></name>
		<configKey><![CDATA[Avoid pointer arithmetic]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid pointer arithmetic]]></description>
	</rule>
	<rule key="MISRA-104" priority="MAJOR">
		<name><![CDATA[Do not use non-constant pointers to functions]]></name>
		<configKey><![CDATA[Do not use non-constant pointers to functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use non-constant pointers to functions]]></description>
	</rule>
	<rule key="MISRA-105" priority="MAJOR">
		<name><![CDATA[All the functions pointed to by a single pointer to function shall be identical in the number and type of parameters and the return type]]></name>
		<configKey><![CDATA[All the functions pointed to by a single pointer to function shall be identical in the number and type of parameters and the return type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All the functions pointed to by a single pointer to function shall be identical in the number and type of parameters and the return type]]></description>
	</rule>
	<rule key="MISRA-107_a" priority="MAJOR">
		<name><![CDATA[The NULL pointer shall not be dereferenced]]></name>
		<configKey><![CDATA[The NULL pointer shall not be dereferenced]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The NULL pointer shall not be dereferenced]]></description>
	</rule>
	<rule key="MISRA-107_b" priority="MAJOR">
		<name><![CDATA[The NULL pointer shall not be dereferenced]]></name>
		<configKey><![CDATA[The NULL pointer shall not be dereferenced]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The NULL pointer shall not be dereferenced]]></description>
	</rule>
	<rule key="MISRA-108" priority="MAJOR">
		<name><![CDATA[All members of structure or union should be fully specified]]></name>
		<configKey><![CDATA[All members of structure or union should be fully specified]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All members of structure or union should be fully specified]]></description>
	</rule>
	<rule key="MISRA-110" priority="MAJOR">
		<name><![CDATA[Unions shall not be used to access the sub-parts of larger data structure]]></name>
		<configKey><![CDATA[Unions shall not be used to access the sub-parts of larger data structure]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Unions shall not be used to access the sub-parts of larger data structure]]></description>
	</rule>
	<rule key="MISRA-113" priority="MAJOR">
		<name><![CDATA[All the members of a structure (or union) shall be named]]></name>
		<configKey><![CDATA[All the members of a structure (or union) shall be named]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All the members of a structure (or union) shall be named]]></description>
	</rule>
	<rule key="MISRA-115" priority="MAJOR">
		<name><![CDATA[Standard library function names shall not be reused]]></name>
		<configKey><![CDATA[Standard library function names shall not be reused]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Standard library function names shall not be reused]]></description>
	</rule>
	<rule key="MISRA-121_a" priority="MAJOR">
		<name><![CDATA[Do not use locale.h header and setlocale function]]></name>
		<configKey><![CDATA[Do not use locale.h header and setlocale function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use locale.h header and setlocale function]]></description>
	</rule>
	<rule key="MISRA-121_b" priority="MAJOR">
		<name><![CDATA[Do not use locale.h header and setlocale function]]></name>
		<configKey><![CDATA[Do not use locale.h header and setlocale function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use locale.h header and setlocale function]]></description>
	</rule>
	<rule key="MISRA2004-10_1_a" priority="MAJOR">
		<name><![CDATA[Avoid implicit conversions between signed and unsigned integer types]]></name>
		<configKey><![CDATA[Avoid implicit conversions between signed and unsigned integer types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions between signed and unsigned integer types]]></description>
	</rule>
	<rule key="MISRA2004-10_1_b" priority="MAJOR">
		<name><![CDATA[Avoid implicit conversions between integer and floating types]]></name>
		<configKey><![CDATA[Avoid implicit conversions between integer and floating types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions between integer and floating types]]></description>
	</rule>
	<rule key="MISRA2004-10_1_c" priority="MAJOR">
		<name><![CDATA[Avoid implicit conversions of complex expressions]]></name>
		<configKey><![CDATA[Avoid implicit conversions of complex expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions of complex expressions]]></description>
	</rule>
	<rule key="MISRA2004-10_1_d" priority="MAJOR">
		<name><![CDATA[Avoid implicit conversions from wider to narrower types]]></name>
		<configKey><![CDATA[Avoid implicit conversions from wider to narrower types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions from wider to narrower types]]></description>
	</rule>
	<rule key="MISRA2004-10_1_e" priority="MAJOR">
		<name><![CDATA[Avoid implicit conversions of function return expressions]]></name>
		<configKey><![CDATA[Avoid implicit conversions of function return expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions of function return expressions]]></description>
	</rule>
	<rule key="MISRA2004-10_1_f" priority="MAJOR">
		<name><![CDATA[Avoid implicit conversions of complex expressions]]></name>
		<configKey><![CDATA[Avoid implicit conversions of complex expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions of complex expressions]]></description>
	</rule>
	<rule key="MISRA2004-10_1_g" priority="MAJOR">
		<name><![CDATA[Avoid implicit conversions of function arguments]]></name>
		<configKey><![CDATA[Avoid implicit conversions of function arguments]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions of function arguments]]></description>
	</rule>
	<rule key="MISRA2004-10_1_h" priority="MAJOR">
		<name><![CDATA[Avoid implicit conversions between signed and unsigned integer types]]></name>
		<configKey><![CDATA[Avoid implicit conversions between signed and unsigned integer types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions between signed and unsigned integer types]]></description>
	</rule>
	<rule key="MISRA2004-10_1_i" priority="MAJOR">
		<name><![CDATA[Avoid implicit conversions of complex expressions]]></name>
		<configKey><![CDATA[Avoid implicit conversions of complex expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions of complex expressions]]></description>
	</rule>
	<rule key="MISRA2004-10_2" priority="MAJOR">
		<name><![CDATA[Avoid implicit conversions of float type resulting in a loss of information]]></name>
		<configKey><![CDATA[Avoid implicit conversions of float type resulting in a loss of information]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions of float type resulting in a loss of information]]></description>
	</rule>
	<rule key="MISRA2004-10_2_b" priority="MAJOR">
		<name><![CDATA[Avoid implicit conversions of float type resulting in a loss of information]]></name>
		<configKey><![CDATA[Avoid implicit conversions of float type resulting in a loss of information]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit conversions of float type resulting in a loss of information]]></description>
	</rule>
	<rule key="MISRA2004-10_3" priority="MAJOR">
		<name><![CDATA[The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression]]></name>
		<configKey><![CDATA[The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression]]></description>
	</rule>
	<rule key="MISRA2004-10_4" priority="MAJOR">
		<name><![CDATA[The value of a complex expression of floating type may only be cast to a narrower floating type]]></name>
		<configKey><![CDATA[The value of a complex expression of floating type may only be cast to a narrower floating type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The value of a complex expression of floating type may only be cast to a narrower floating type]]></description>
	</rule>
	<rule key="MISRA2004-10_5" priority="MAJOR">
		<name><![CDATA[If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the opera]]></name>
		<configKey><![CDATA[If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the opera]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the opera]]></description>
	</rule>
	<rule key="MISRA2004-10_6" priority="INFO">
		<name><![CDATA[A "U" suffix shall be applied to all constants of unsigned type]]></name>
		<configKey><![CDATA[A "U" suffix shall be applied to all constants of unsigned type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A "U" suffix shall be applied to all constants of unsigned type]]></description>
	</rule>
	<rule key="MISRA2004-11_1" priority="MAJOR">
		<name><![CDATA[Conversions shall not be performed between a pointer to a function and any type other than an integral type]]></name>
		<configKey><![CDATA[Conversions shall not be performed between a pointer to a function and any type other than an integral type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Conversions shall not be performed between a pointer to a function and any type other than an integral type]]></description>
	</rule>
	<rule key="MISRA2004-11_2" priority="MAJOR">
		<name><![CDATA[Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void]]></name>
		<configKey><![CDATA[Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void]]></description>
	</rule>
	<rule key="MISRA2004-11_2_b" priority="MAJOR">
		<name><![CDATA[Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void]]></name>
		<configKey><![CDATA[Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void]]></description>
	</rule>
	<rule key="MISRA2004-11_2_c" priority="MAJOR">
		<name><![CDATA[Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void]]></name>
		<configKey><![CDATA[Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void]]></description>
	</rule>
	<rule key="MISRA2004-11_3_a" priority="MAJOR">
		<name><![CDATA[A cast should not convert a pointer type to an integral type]]></name>
		<configKey><![CDATA[A cast should not convert a pointer type to an integral type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A cast should not convert a pointer type to an integral type]]></description>
	</rule>
	<rule key="MISRA2004-11_3_b" priority="MAJOR">
		<name><![CDATA[A cast should not convert an integral type to a pointer type]]></name>
		<configKey><![CDATA[A cast should not convert an integral type to a pointer type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A cast should not convert an integral type to a pointer type]]></description>
	</rule>
	<rule key="MISRA2004-11_4" priority="MAJOR">
		<name><![CDATA[A cast should not be performed between a pointer to object type and a different pointer to object type]]></name>
		<configKey><![CDATA[A cast should not be performed between a pointer to object type and a different pointer to object type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A cast should not be performed between a pointer to object type and a different pointer to object type]]></description>
	</rule>
	<rule key="MISRA2004-11_5" priority="MAJOR">
		<name><![CDATA[A cast shall not be performed that removes any const or volatile qualification from the type addressed by a pointer]]></name>
		<configKey><![CDATA[A cast shall not be performed that removes any const or volatile qualification from the type addressed by a pointer]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A cast shall not be performed that removes any const or volatile qualification from the type addressed by a pointer]]></description>
	</rule>
	<rule key="MISRA2004-12_10" priority="MAJOR">
		<name><![CDATA[The comma operator shall not be used]]></name>
		<configKey><![CDATA[The comma operator shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The comma operator shall not be used]]></description>
	</rule>
	<rule key="MISRA2004-12_12" priority="MAJOR">
		<name><![CDATA[The underlying bit representations of floating-point values shall not be used]]></name>
		<configKey><![CDATA[The underlying bit representations of floating-point values shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The underlying bit representations of floating-point values shall not be used]]></description>
	</rule>
	<rule key="MISRA2004-12_13" priority="MAJOR">
		<name><![CDATA[The increment (++) and decrement (--) operators should not be mixed with other operators in an expression]]></name>
		<configKey><![CDATA[The increment (++) and decrement (--) operators should not be mixed with other operators in an expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The increment (++) and decrement (--) operators should not be mixed with other operators in an expression]]></description>
	</rule>
	<rule key="MISRA2004-12_1_a" priority="MAJOR">
		<name><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></name>
		<configKey><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></description>
	</rule>
	<rule key="MISRA2004-12_1_b" priority="INFO">
		<name><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></name>
		<configKey><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></description>
	</rule>
	<rule key="MISRA2004-12_1_c" priority="INFO">
		<name><![CDATA[No parentheses are required for the operand of a unary operator]]></name>
		<configKey><![CDATA[No parentheses are required for the operand of a unary operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[No parentheses are required for the operand of a unary operator]]></description>
	</rule>
	<rule key="MISRA2004-12_1_d" priority="MAJOR">
		<name><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></name>
		<configKey><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></description>
	</rule>
	<rule key="MISRA2004-12_1_e" priority="MAJOR">
		<name><![CDATA[Use parentheses unless all operators in the expression are the same]]></name>
		<configKey><![CDATA[Use parentheses unless all operators in the expression are the same]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use parentheses unless all operators in the expression are the same]]></description>
	</rule>
	<rule key="MISRA2004-12_1_f" priority="INFO">
		<name><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></name>
		<configKey><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Limited dependence should be placed on C's operator precedence rules in expressions]]></description>
	</rule>
	<rule key="MISRA2004-12_2_a" priority="MAJOR">
		<name><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></name>
		<configKey><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></description>
	</rule>
	<rule key="MISRA2004-12_2_b" priority="BLOCKER">
		<name><![CDATA[Don't write code that depends on the order of evaluation of function arguments]]></name>
		<configKey><![CDATA[Don't write code that depends on the order of evaluation of function arguments]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't write code that depends on the order of evaluation of function arguments]]></description>
	</rule>
	<rule key="MISRA2004-12_2_c" priority="MAJOR">
		<name><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></name>
		<configKey><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></description>
	</rule>
	<rule key="MISRA2004-12_2_d" priority="MAJOR">
		<name><![CDATA[Don't write code that depends on the order of evaluation of function calls]]></name>
		<configKey><![CDATA[Don't write code that depends on the order of evaluation of function calls]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't write code that depends on the order of evaluation of function calls]]></description>
	</rule>
	<rule key="MISRA2004-12_2_e" priority="MAJOR">
		<name><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></name>
		<configKey><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></description>
	</rule>
	<rule key="MISRA2004-12_2_f" priority="MAJOR">
		<name><![CDATA[Do not use more than one volatile in one expression]]></name>
		<configKey><![CDATA[Do not use more than one volatile in one expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use more than one volatile in one expression]]></description>
	</rule>
	<rule key="MISRA2004-12_2_g" priority="MAJOR">
		<name><![CDATA[Don't write code that depends on the order of evaluation of function calls]]></name>
		<configKey><![CDATA[Don't write code that depends on the order of evaluation of function calls]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't write code that depends on the order of evaluation of function calls]]></description>
	</rule>
	<rule key="MISRA2004-12_3" priority="MAJOR">
		<name><![CDATA[The sizeof operator shall not be used on expressions that contain side effects]]></name>
		<configKey><![CDATA[The sizeof operator shall not be used on expressions that contain side effects]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The sizeof operator shall not be used on expressions that contain side effects]]></description>
	</rule>
	<rule key="MISRA2004-12_4_a" priority="MAJOR">
		<name><![CDATA[The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects]]></name>
		<configKey><![CDATA[The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects]]></description>
	</rule>
	<rule key="MISRA2004-12_4_b" priority="MINOR">
		<name><![CDATA[The second or third operand of a ternary operator '?:' shall not contain side effects]]></name>
		<configKey><![CDATA[The second or third operand of a ternary operator '?:' shall not contain side effects]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The second or third operand of a ternary operator '?:' shall not contain side effects]]></description>
	</rule>
	<rule key="MISRA2004-12_5" priority="MAJOR">
		<name><![CDATA[The operands of a logical &amp;&amp; or || shall be primary-expressions]]></name>
		<configKey><![CDATA[The operands of a logical &amp;&amp; or || shall be primary-expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The operands of a logical &amp;&amp; or || shall be primary-expressions]]></description>
	</rule>
	<rule key="MISRA2004-12_6_a" priority="MAJOR">
		<name><![CDATA[The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean]]></name>
		<configKey><![CDATA[The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean]]></description>
	</rule>
	<rule key="MISRA2004-12_6_b" priority="MAJOR">
		<name><![CDATA[Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)]]></name>
		<configKey><![CDATA[Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)]]></description>
	</rule>
	<rule key="MISRA2004-12_7" priority="MAJOR">
		<name><![CDATA[Bitwise operators shall not be applied to operands whose underlying type is signed]]></name>
		<configKey><![CDATA[Bitwise operators shall not be applied to operands whose underlying type is signed]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Bitwise operators shall not be applied to operands whose underlying type is signed]]></description>
	</rule>
	<rule key="MISRA2004-12_8" priority="MAJOR">
		<name><![CDATA[The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand]]></name>
		<configKey><![CDATA[The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand]]></description>
	</rule>
	<rule key="MISRA2004-12_9" priority="MAJOR">
		<name><![CDATA[The unary minus operator shall not be applied to an expression whose underlying type is unsigned]]></name>
		<configKey><![CDATA[The unary minus operator shall not be applied to an expression whose underlying type is unsigned]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The unary minus operator shall not be applied to an expression whose underlying type is unsigned]]></description>
	</rule>
	<rule key="MISRA2004-13_1" priority="MAJOR">
		<name><![CDATA[Assignment operators shall not be used in expressions that yield a Boolean value]]></name>
		<configKey><![CDATA[Assignment operators shall not be used in expressions that yield a Boolean value]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Assignment operators shall not be used in expressions that yield a Boolean value]]></description>
	</rule>
	<rule key="MISRA2004-13_2" priority="MAJOR">
		<name><![CDATA[Tests of a value against zero should be made explicit, unless the operand is effectively Boolean]]></name>
		<configKey><![CDATA[Tests of a value against zero should be made explicit, unless the operand is effectively Boolean]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Tests of a value against zero should be made explicit, unless the operand is effectively Boolean]]></description>
	</rule>
	<rule key="MISRA2004-13_3" priority="MAJOR">
		<name><![CDATA[Floating-point expressions shall not be tested for equality or inequality]]></name>
		<configKey><![CDATA[Floating-point expressions shall not be tested for equality or inequality]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Floating-point expressions shall not be tested for equality or inequality]]></description>
	</rule>
	<rule key="MISRA2004-13_4" priority="MAJOR">
		<name><![CDATA[The controlling expression of a for statement shall not contain any objects of floating type]]></name>
		<configKey><![CDATA[The controlling expression of a for statement shall not contain any objects of floating type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The controlling expression of a for statement shall not contain any objects of floating type]]></description>
	</rule>
	<rule key="MISRA2004-13_5" priority="MAJOR">
		<name><![CDATA[The three expressions of a for statement shall be concerned only with loop control]]></name>
		<configKey><![CDATA[The three expressions of a for statement shall be concerned only with loop control]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The three expressions of a for statement shall be concerned only with loop control]]></description>
	</rule>
	<rule key="MISRA2004-13_6" priority="MAJOR">
		<name><![CDATA[Do not modify for loop counter within a body of the loop]]></name>
		<configKey><![CDATA[Do not modify for loop counter within a body of the loop]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not modify for loop counter within a body of the loop]]></description>
	</rule>
	<rule key="MISRA2004-13_7_a" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_aa" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_ab" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_ac" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_ad" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_ae" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_af" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_ag" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_ah" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_ai" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_aj" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_ak" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_b" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_c" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_d" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_j" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_k" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_l" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_m" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_n" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_s" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_t" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_u" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_v" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_w" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_x" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_y" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-13_7_z" priority="MAJOR">
		<name><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Boolean operations whose results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="MISRA2004-14_10" priority="MAJOR">
		<name><![CDATA[All if ... else if constructs shall be terminated with an else clause]]></name>
		<configKey><![CDATA[All if ... else if constructs shall be terminated with an else clause]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All if ... else if constructs shall be terminated with an else clause]]></description>
	</rule>
	<rule key="MISRA2004-14_1_a" priority="MAJOR">
		<name><![CDATA[There shall be no unreachable code in "else" block]]></name>
		<configKey><![CDATA[There shall be no unreachable code in "else" block]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unreachable code in "else" block]]></description>
	</rule>
	<rule key="MISRA2004-14_1_b" priority="MAJOR">
		<name><![CDATA[There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements]]></name>
		<configKey><![CDATA[There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements]]></description>
	</rule>
	<rule key="MISRA2004-14_1_c" priority="MAJOR">
		<name><![CDATA[There shall be no unreachable code in "if/else/while/for" block]]></name>
		<configKey><![CDATA[There shall be no unreachable code in "if/else/while/for" block]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unreachable code in "if/else/while/for" block]]></description>
	</rule>
	<rule key="MISRA2004-14_1_d" priority="MAJOR">
		<name><![CDATA[There shall be no unreachable code in switch statement]]></name>
		<configKey><![CDATA[There shall be no unreachable code in switch statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unreachable code in switch statement]]></description>
	</rule>
	<rule key="MISRA2004-14_1_e" priority="MAJOR">
		<name><![CDATA[There shall be no unreachable code in 'for' loop]]></name>
		<configKey><![CDATA[There shall be no unreachable code in 'for' loop]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unreachable code in 'for' loop]]></description>
	</rule>
	<rule key="MISRA2004-14_1_f" priority="MAJOR">
		<name><![CDATA[There shall be no unreachable code after 'if' or 'switch' statement]]></name>
		<configKey><![CDATA[There shall be no unreachable code after 'if' or 'switch' statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unreachable code after 'if' or 'switch' statement]]></description>
	</rule>
	<rule key="MISRA2004-14_1_g" priority="MAJOR">
		<name><![CDATA[There shall be no unreachable code after "if" or "switch" statement inside while/for/do...while loop]]></name>
		<configKey><![CDATA[There shall be no unreachable code after "if" or "switch" statement inside while/for/do...while loop]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unreachable code after "if" or "switch" statement inside while/for/do...while loop]]></description>
	</rule>
	<rule key="MISRA2004-14_2" priority="MAJOR">
		<name><![CDATA[All non-null statements shall either have at least one side-effect however executed or cause control flow to change]]></name>
		<configKey><![CDATA[All non-null statements shall either have at least one side-effect however executed or cause control flow to change]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All non-null statements shall either have at least one side-effect however executed or cause control flow to change]]></description>
	</rule>
	<rule key="MISRA2004-14_3" priority="MAJOR">
		<name><![CDATA[Null statement shall only occur on a line by itself or it may be followed by a comment]]></name>
		<configKey><![CDATA[Null statement shall only occur on a line by itself or it may be followed by a comment]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Null statement shall only occur on a line by itself or it may be followed by a comment]]></description>
	</rule>
	<rule key="MISRA2004-14_4" priority="MAJOR">
		<name><![CDATA[The goto statement shall not be used]]></name>
		<configKey><![CDATA[The goto statement shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The goto statement shall not be used]]></description>
	</rule>
	<rule key="MISRA2004-14_5" priority="MAJOR">
		<name><![CDATA[The continue statement shall not be used]]></name>
		<configKey><![CDATA[The continue statement shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The continue statement shall not be used]]></description>
	</rule>
	<rule key="MISRA2004-14_6" priority="MAJOR">
		<name><![CDATA[For any iteration statement there shall be at most one break statement used for loop termination]]></name>
		<configKey><![CDATA[For any iteration statement there shall be at most one break statement used for loop termination]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[For any iteration statement there shall be at most one break statement used for loop termination]]></description>
	</rule>
	<rule key="MISRA2004-14_7" priority="MAJOR">
		<name><![CDATA[A function shall have a single point of exit at the end of the function]]></name>
		<configKey><![CDATA[A function shall have a single point of exit at the end of the function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A function shall have a single point of exit at the end of the function]]></description>
	</rule>
	<rule key="MISRA2004-14_8" priority="MAJOR">
		<name><![CDATA[The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement]]></name>
		<configKey><![CDATA[The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement]]></description>
	</rule>
	<rule key="MISRA2004-14_9" priority="MAJOR">
		<name><![CDATA['if' and 'else' should be followed by a compound statement]]></name>
		<configKey><![CDATA['if' and 'else' should be followed by a compound statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA['if' and 'else' should be followed by a compound statement]]></description>
	</rule>
	<rule key="MISRA2004-15_0_a" priority="MAJOR">
		<name><![CDATA[A switch statement shall only contain switch labels and switch clauses, and no other code]]></name>
		<configKey><![CDATA[A switch statement shall only contain switch labels and switch clauses, and no other code]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A switch statement shall only contain switch labels and switch clauses, and no other code]]></description>
	</rule>
	<rule key="MISRA2004-15_0_b" priority="MAJOR">
		<name><![CDATA[A switch statement shall only contain switch labels and switch clauses, and no other code]]></name>
		<configKey><![CDATA[A switch statement shall only contain switch labels and switch clauses, and no other code]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A switch statement shall only contain switch labels and switch clauses, and no other code]]></description>
	</rule>
	<rule key="MISRA2004-15_0_c" priority="MAJOR">
		<name><![CDATA[A switch statement shall only contain switch labels and switch clauses, and no other code]]></name>
		<configKey><![CDATA[A switch statement shall only contain switch labels and switch clauses, and no other code]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A switch statement shall only contain switch labels and switch clauses, and no other code]]></description>
	</rule>
	<rule key="MISRA2004-15_1" priority="MAJOR">
		<name><![CDATA[A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement]]></name>
		<configKey><![CDATA[A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement]]></description>
	</rule>
	<rule key="MISRA2004-15_2" priority="MAJOR">
		<name><![CDATA[An unconditional break statement shall terminate every non-empty switch clause]]></name>
		<configKey><![CDATA[An unconditional break statement shall terminate every non-empty switch clause]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An unconditional break statement shall terminate every non-empty switch clause]]></description>
	</rule>
	<rule key="MISRA2004-15_3" priority="MAJOR">
		<name><![CDATA[The final clause of a switch statement shall be the default clause]]></name>
		<configKey><![CDATA[The final clause of a switch statement shall be the default clause]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The final clause of a switch statement shall be the default clause]]></description>
	</rule>
	<rule key="MISRA2004-15_4" priority="MAJOR">
		<name><![CDATA[A switch expression shall not represent a value that is effectively Boolean]]></name>
		<configKey><![CDATA[A switch expression shall not represent a value that is effectively Boolean]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A switch expression shall not represent a value that is effectively Boolean]]></description>
	</rule>
	<rule key="MISRA2004-15_5" priority="MAJOR">
		<name><![CDATA[Every switch statement shall have at least one case clause]]></name>
		<configKey><![CDATA[Every switch statement shall have at least one case clause]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Every switch statement shall have at least one case clause]]></description>
	</rule>
	<rule key="MISRA2004-16_1" priority="MAJOR">
		<name><![CDATA[Functions shall not be defined with a variable number of arguments]]></name>
		<configKey><![CDATA[Functions shall not be defined with a variable number of arguments]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Functions shall not be defined with a variable number of arguments]]></description>
	</rule>
	<rule key="MISRA2004-16_10" priority="MAJOR">
		<name><![CDATA[If a function returns error information, then that error information shall be tested]]></name>
		<configKey><![CDATA[If a function returns error information, then that error information shall be tested]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If a function returns error information, then that error information shall be tested]]></description>
	</rule>
	<rule key="MISRA2004-16_2" priority="MAJOR">
		<name><![CDATA[Functions shall not call themselves, either directly or indirectly]]></name>
		<configKey><![CDATA[Functions shall not call themselves, either directly or indirectly]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Functions shall not call themselves, either directly or indirectly]]></description>
	</rule>
	<rule key="MISRA2004-16_3" priority="MAJOR">
		<name><![CDATA[Identifiers shall be given for all of the parameters in a function prototype declaration]]></name>
		<configKey><![CDATA[Identifiers shall be given for all of the parameters in a function prototype declaration]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Identifiers shall be given for all of the parameters in a function prototype declaration]]></description>
	</rule>
	<rule key="MISRA2004-16_4" priority="MAJOR">
		<name><![CDATA[The identifiers used in the declaration and definition of a function shall be identical]]></name>
		<configKey><![CDATA[The identifiers used in the declaration and definition of a function shall be identical]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The identifiers used in the declaration and definition of a function shall be identical]]></description>
	</rule>
	<rule key="MISRA2004-16_5" priority="MAJOR">
		<name><![CDATA[Functions with no parameters shall be declared with parameter type void]]></name>
		<configKey><![CDATA[Functions with no parameters shall be declared with parameter type void]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Functions with no parameters shall be declared with parameter type void]]></description>
	</rule>
	<rule key="MISRA2004-16_6" priority="MAJOR">
		<name><![CDATA[The number of arguments passed to a function shall match the number of parameters]]></name>
		<configKey><![CDATA[The number of arguments passed to a function shall match the number of parameters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The number of arguments passed to a function shall match the number of parameters]]></description>
	</rule>
	<rule key="MISRA2004-16_7" priority="MAJOR">
		<name><![CDATA[A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object]]></name>
		<configKey><![CDATA[A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object]]></description>
	</rule>
	<rule key="MISRA2004-16_8" priority="MAJOR">
		<name><![CDATA[All exit paths from a function with non-void return type shall have an explicit return statement with an expression]]></name>
		<configKey><![CDATA[All exit paths from a function with non-void return type shall have an explicit return statement with an expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All exit paths from a function with non-void return type shall have an explicit return statement with an expression]]></description>
	</rule>
	<rule key="MISRA2004-17_1" priority="MAJOR">
		<name><![CDATA[Pointer arithmetic shall only be applied to pointers that address an array or array element]]></name>
		<configKey><![CDATA[Pointer arithmetic shall only be applied to pointers that address an array or array element]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Pointer arithmetic shall only be applied to pointers that address an array or array element]]></description>
	</rule>
	<rule key="MISRA2004-17_2" priority="MAJOR">
		<name><![CDATA[Pointer arithmetic shall only be applied to pointers that address an array or array element]]></name>
		<configKey><![CDATA[Pointer arithmetic shall only be applied to pointers that address an array or array element]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Pointer arithmetic shall only be applied to pointers that address an array or array element]]></description>
	</rule>
	<rule key="MISRA2004-17_3" priority="MAJOR">
		<name><![CDATA[&gt;, &gt;=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array]]></name>
		<configKey><![CDATA[&gt;, &gt;=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[&gt;, &gt;=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array]]></description>
	</rule>
	<rule key="MISRA2004-17_4" priority="MAJOR">
		<name><![CDATA[Array indexing shall be the only allowed form of pointer arithmetic]]></name>
		<configKey><![CDATA[Array indexing shall be the only allowed form of pointer arithmetic]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Array indexing shall be the only allowed form of pointer arithmetic]]></description>
	</rule>
	<rule key="MISRA2004-17_5_a" priority="MAJOR">
		<name><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></name>
		<configKey><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></description>
	</rule>
	<rule key="MISRA2004-17_5_b" priority="MAJOR">
		<name><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></name>
		<configKey><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></description>
	</rule>
	<rule key="MISRA2004-17_5_c" priority="MAJOR">
		<name><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></name>
		<configKey><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></description>
	</rule>
	<rule key="MISRA2004-17_5_d" priority="MAJOR">
		<name><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></name>
		<configKey><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The declaration of objects should contain no more than 2 levels of pointer indirection]]></description>
	</rule>
	<rule key="MISRA2004-17_6" priority="MAJOR">
		<name><![CDATA[The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist]]></name>
		<configKey><![CDATA[The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist]]></description>
	</rule>
	<rule key="MISRA2004-18_1" priority="MAJOR">
		<name><![CDATA[All structure and union types shall be complete at the end of a translation unit]]></name>
		<configKey><![CDATA[All structure and union types shall be complete at the end of a translation unit]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All structure and union types shall be complete at the end of a translation unit]]></description>
	</rule>
	<rule key="MISRA2004-18_2" priority="MAJOR">
		<name><![CDATA[An object shall not be assigned to an overlapping object]]></name>
		<configKey><![CDATA[An object shall not be assigned to an overlapping object]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An object shall not be assigned to an overlapping object]]></description>
	</rule>
	<rule key="MISRA2004-18_2_b" priority="MAJOR">
		<name><![CDATA[An object shall not be assigned to an overlapping object]]></name>
		<configKey><![CDATA[An object shall not be assigned to an overlapping object]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An object shall not be assigned to an overlapping object]]></description>
	</rule>
	<rule key="MISRA2004-18_4" priority="MAJOR">
		<name><![CDATA[Unions shall not be used]]></name>
		<configKey><![CDATA[Unions shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Unions shall not be used]]></description>
	</rule>
	<rule key="MISRA2004-19_1" priority="MAJOR">
		<name><![CDATA[#include statements in a file should only be preceded by other preprocessor directives or comments]]></name>
		<configKey><![CDATA[#include statements in a file should only be preceded by other preprocessor directives or comments]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[#include statements in a file should only be preceded by other preprocessor directives or comments]]></description>
	</rule>
	<rule key="MISRA2004-19_10" priority="MAJOR">
		<name><![CDATA[In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##]]></name>
		<configKey><![CDATA[In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##]]></description>
	</rule>
	<rule key="MISRA2004-19_11" priority="MAJOR">
		<name><![CDATA[All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator]]></name>
		<configKey><![CDATA[All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator]]></description>
	</rule>
	<rule key="MISRA2004-19_12" priority="MAJOR">
		<name><![CDATA[There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition]]></name>
		<configKey><![CDATA[There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition]]></description>
	</rule>
	<rule key="MISRA2004-19_13" priority="MAJOR">
		<name><![CDATA[The # and ## preprocessor operators should not be used]]></name>
		<configKey><![CDATA[The # and ## preprocessor operators should not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The # and ## preprocessor operators should not be used]]></description>
	</rule>
	<rule key="MISRA2004-19_14" priority="MAJOR">
		<name><![CDATA[The defined preprocessor operator shall only be used in one of the two standard forms]]></name>
		<configKey><![CDATA[The defined preprocessor operator shall only be used in one of the two standard forms]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The defined preprocessor operator shall only be used in one of the two standard forms]]></description>
	</rule>
	<rule key="MISRA2004-19_15" priority="MAJOR">
		<name><![CDATA[Precautions shall be taken in order to prevent the contents of a header file being included twice]]></name>
		<configKey><![CDATA[Precautions shall be taken in order to prevent the contents of a header file being included twice]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Precautions shall be taken in order to prevent the contents of a header file being included twice]]></description>
	</rule>
	<rule key="MISRA2004-19_16" priority="MAJOR">
		<name><![CDATA[Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor]]></name>
		<configKey><![CDATA[Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor]]></description>
	</rule>
	<rule key="MISRA2004-19_17" priority="MAJOR">
		<name><![CDATA[All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related]]></name>
		<configKey><![CDATA[All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related]]></description>
	</rule>
	<rule key="MISRA2004-19_2" priority="MAJOR">
		<name><![CDATA[Non-standard characters should not occur in header file names in #include directives]]></name>
		<configKey><![CDATA[Non-standard characters should not occur in header file names in #include directives]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Non-standard characters should not occur in header file names in #include directives]]></description>
	</rule>
	<rule key="MISRA2004-19_4" priority="MAJOR">
		<name><![CDATA[Avoid keywords and basic types in macros]]></name>
		<configKey><![CDATA[Avoid keywords and basic types in macros]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid keywords and basic types in macros]]></description>
	</rule>
	<rule key="MISRA2004-19_5" priority="MAJOR">
		<name><![CDATA[Macros shall not be #define'd or #undef'd within a block]]></name>
		<configKey><![CDATA[Macros shall not be #define'd or #undef'd within a block]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Macros shall not be #define'd or #undef'd within a block]]></description>
	</rule>
	<rule key="MISRA2004-19_6" priority="MAJOR">
		<name><![CDATA[#undef shall not be used]]></name>
		<configKey><![CDATA[#undef shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[#undef shall not be used]]></description>
	</rule>
	<rule key="MISRA2004-19_7" priority="MAJOR">
		<name><![CDATA[A function should be used in preference to a function-like macro]]></name>
		<configKey><![CDATA[A function should be used in preference to a function-like macro]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A function should be used in preference to a function-like macro]]></description>
	</rule>
	<rule key="MISRA2004-19_8" priority="MAJOR">
		<name><![CDATA[A function-like macro shall not be invoked without all of its arguments]]></name>
		<configKey><![CDATA[A function-like macro shall not be invoked without all of its arguments]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A function-like macro shall not be invoked without all of its arguments]]></description>
	</rule>
	<rule key="MISRA2004-19_9" priority="MAJOR">
		<name><![CDATA[Arguments to a function-like macro shall not contain tokens that look like preprocessing directives]]></name>
		<configKey><![CDATA[Arguments to a function-like macro shall not contain tokens that look like preprocessing directives]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Arguments to a function-like macro shall not contain tokens that look like preprocessing directives]]></description>
	</rule>
	<rule key="MISRA2004-20_10" priority="MAJOR">
		<name><![CDATA[The library functions atof, atoi and atol from library stdlib.h shall not be used]]></name>
		<configKey><![CDATA[The library functions atof, atoi and atol from library stdlib.h shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The library functions atof, atoi and atol from library stdlib.h shall not be used]]></description>
	</rule>
	<rule key="MISRA2004-20_11" priority="MAJOR">
		<name><![CDATA[The library functions abort, exit, getenv and system from library stdlib.h shall not be used]]></name>
		<configKey><![CDATA[The library functions abort, exit, getenv and system from library stdlib.h shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The library functions abort, exit, getenv and system from library stdlib.h shall not be used]]></description>
	</rule>
	<rule key="MISRA2004-20_12" priority="MAJOR">
		<name><![CDATA[The time handling functions of library time.h shall not be used]]></name>
		<configKey><![CDATA[The time handling functions of library time.h shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The time handling functions of library time.h shall not be used]]></description>
	</rule>
	<rule key="MISRA2004-20_1_a" priority="MAJOR">
		<name><![CDATA[Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined]]></name>
		<configKey><![CDATA[Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined]]></description>
	</rule>
	<rule key="MISRA2004-20_1_b" priority="MAJOR">
		<name><![CDATA[Do not redefine reserved words]]></name>
		<configKey><![CDATA[Do not redefine reserved words]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not redefine reserved words]]></description>
	</rule>
	<rule key="MISRA2004-20_2" priority="MAJOR">
		<name><![CDATA[The names of standard library macros, objects and functions shall not be reused]]></name>
		<configKey><![CDATA[The names of standard library macros, objects and functions shall not be reused]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The names of standard library macros, objects and functions shall not be reused]]></description>
	</rule>
	<rule key="MISRA2004-20_3" priority="MAJOR">
		<name><![CDATA[The validity of values passed to library functions shall be checked]]></name>
		<configKey><![CDATA[The validity of values passed to library functions shall be checked]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The validity of values passed to library functions shall be checked]]></description>
	</rule>
	<rule key="MISRA2004-20_4" priority="MAJOR">
		<name><![CDATA[Dynamic heap memory allocation shall not be used]]></name>
		<configKey><![CDATA[Dynamic heap memory allocation shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Dynamic heap memory allocation shall not be used]]></description>
	</rule>
	<rule key="MISRA2004-20_5" priority="MAJOR">
		<name><![CDATA[The error indicator errno shall not be used]]></name>
		<configKey><![CDATA[The error indicator errno shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The error indicator errno shall not be used]]></description>
	</rule>
	<rule key="MISRA2004-20_6" priority="MAJOR">
		<name><![CDATA[The macro offsetof, in library stddef.h, shall not be used]]></name>
		<configKey><![CDATA[The macro offsetof, in library stddef.h, shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The macro offsetof, in library stddef.h, shall not be used]]></description>
	</rule>
	<rule key="MISRA2004-20_7" priority="MAJOR">
		<name><![CDATA[The setjmp macro and the longjmp function shall not be used]]></name>
		<configKey><![CDATA[The setjmp macro and the longjmp function shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The setjmp macro and the longjmp function shall not be used]]></description>
	</rule>
	<rule key="MISRA2004-20_8" priority="MAJOR">
		<name><![CDATA[The signal handling facilities of signal.h shall not be used]]></name>
		<configKey><![CDATA[The signal handling facilities of signal.h shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The signal handling facilities of signal.h shall not be used]]></description>
	</rule>
	<rule key="MISRA2004-20_9" priority="MAJOR">
		<name><![CDATA[The input/output library stdio.h shall not be used]]></name>
		<configKey><![CDATA[The input/output library stdio.h shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The input/output library stdio.h shall not be used]]></description>
	</rule>
	<rule key="MISRA2004-2_1" priority="MAJOR">
		<name><![CDATA[Assembly language shall be encapsulated and isolated]]></name>
		<configKey><![CDATA[Assembly language shall be encapsulated and isolated]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Assembly language shall be encapsulated and isolated]]></description>
	</rule>
	<rule key="MISRA2004-2_2" priority="MAJOR">
		<name><![CDATA[Source code shall only use /* ... */ style comments]]></name>
		<configKey><![CDATA[Source code shall only use /* ... */ style comments]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Source code shall only use /* ... */ style comments]]></description>
	</rule>
	<rule key="MISRA2004-2_3" priority="MAJOR">
		<name><![CDATA[The character sequence /* shall not be used within a comment]]></name>
		<configKey><![CDATA[The character sequence /* shall not be used within a comment]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The character sequence /* shall not be used within a comment]]></description>
	</rule>
	<rule key="MISRA2004-2_4" priority="MINOR">
		<name><![CDATA[Sections of code should not be "commented out"]]></name>
		<configKey><![CDATA[Sections of code should not be "commented out"]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Sections of code should not be "commented out"]]></description>
	</rule>
	<rule key="MISRA2004-3_4" priority="MAJOR">
		<name><![CDATA[All uses of the #pragma directive shall be documented and explained]]></name>
		<configKey><![CDATA[All uses of the #pragma directive shall be documented and explained]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All uses of the #pragma directive shall be documented and explained]]></description>
	</rule>
	<rule key="MISRA2004-3_5" priority="MAJOR">
		<name><![CDATA[Do not mix bit-fields and other data within the same structure]]></name>
		<configKey><![CDATA[Do not mix bit-fields and other data within the same structure]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not mix bit-fields and other data within the same structure]]></description>
	</rule>
	<rule key="MISRA2004-4_1" priority="MAJOR">
		<name><![CDATA[Only those escape sequences that are defined in the ISO C standard shall be used]]></name>
		<configKey><![CDATA[Only those escape sequences that are defined in the ISO C standard shall be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Only those escape sequences that are defined in the ISO C standard shall be used]]></description>
	</rule>
	<rule key="MISRA2004-4_2" priority="MAJOR">
		<name><![CDATA[Trigraphs shall not be used]]></name>
		<configKey><![CDATA[Trigraphs shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Trigraphs shall not be used]]></description>
	</rule>
	<rule key="MISRA2004-5_1" priority="MAJOR">
		<name><![CDATA[Identifiers (internal and external) shall not rely on the significance of more than 31 characters]]></name>
		<configKey><![CDATA[Identifiers (internal and external) shall not rely on the significance of more than 31 characters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Identifiers (internal and external) shall not rely on the significance of more than 31 characters]]></description>
	</rule>
	<rule key="MISRA2004-5_2_a" priority="MAJOR">
		<name><![CDATA[Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that identifier]]></name>
		<configKey><![CDATA[Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that identifier]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that identifier]]></description>
	</rule>
	<rule key="MISRA2004-5_2_b" priority="MAJOR">
		<name><![CDATA[Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that identifier]]></name>
		<configKey><![CDATA[Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that identifier]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that identifier]]></description>
	</rule>
	<rule key="MISRA2004-5_3_a" priority="MAJOR">
		<name><![CDATA[Do not reuse typedef names]]></name>
		<configKey><![CDATA[Do not reuse typedef names]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not reuse typedef names]]></description>
	</rule>
	<rule key="MISRA2004-5_3_b" priority="MAJOR">
		<name><![CDATA[Do not reuse typedef names as a typedef name]]></name>
		<configKey><![CDATA[Do not reuse typedef names as a typedef name]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not reuse typedef names as a typedef name]]></description>
	</rule>
	<rule key="MISRA2004-5_4_a" priority="MAJOR">
		<name><![CDATA[A tag name shall not be reused for other purpose within the program]]></name>
		<configKey><![CDATA[A tag name shall not be reused for other purpose within the program]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A tag name shall not be reused for other purpose within the program]]></description>
	</rule>
	<rule key="MISRA2004-5_4_b" priority="MAJOR">
		<name><![CDATA[A tag name shall not be reused to define a different tag]]></name>
		<configKey><![CDATA[A tag name shall not be reused to define a different tag]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A tag name shall not be reused to define a different tag]]></description>
	</rule>
	<rule key="MISRA2004-5_5_a" priority="MINOR">
		<name><![CDATA[No object or function identifier with static storage duration should be reused]]></name>
		<configKey><![CDATA[No object or function identifier with static storage duration should be reused]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[No object or function identifier with static storage duration should be reused]]></description>
	</rule>
	<rule key="MISRA2004-5_5_b" priority="MINOR">
		<name><![CDATA[No object or function identifier with static storage duration should be reused]]></name>
		<configKey><![CDATA[No object or function identifier with static storage duration should be reused]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[No object or function identifier with static storage duration should be reused]]></description>
	</rule>
	<rule key="MISRA2004-5_6" priority="MINOR">
		<name><![CDATA[No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure and union member names]]></name>
		<configKey><![CDATA[No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure and union member names]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure and union member names]]></description>
	</rule>
	<rule key="MISRA2004-5_7" priority="MINOR">
		<name><![CDATA[No identifier name should be reused]]></name>
		<configKey><![CDATA[No identifier name should be reused]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[No identifier name should be reused]]></description>
	</rule>
	<rule key="MISRA2004-6_1" priority="MAJOR">
		<name><![CDATA[The plain char type shall be used only for the storage and use of character values]]></name>
		<configKey><![CDATA[The plain char type shall be used only for the storage and use of character values]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The plain char type shall be used only for the storage and use of character values]]></description>
	</rule>
	<rule key="MISRA2004-6_2" priority="MAJOR">
		<name><![CDATA[signed and unsigned char type shall be used only for the storage and use of numeric values]]></name>
		<configKey><![CDATA[signed and unsigned char type shall be used only for the storage and use of numeric values]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[signed and unsigned char type shall be used only for the storage and use of numeric values]]></description>
	</rule>
	<rule key="MISRA2004-6_3" priority="MAJOR">
		<name><![CDATA[typedefs that indicate size and signedness should be used in place of the basic types]]></name>
		<configKey><![CDATA[typedefs that indicate size and signedness should be used in place of the basic types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[typedefs that indicate size and signedness should be used in place of the basic types]]></description>
	</rule>
	<rule key="MISRA2004-6_4" priority="MAJOR">
		<name><![CDATA[Bit fields shall only be defined to be of type unsigned int or signed int]]></name>
		<configKey><![CDATA[Bit fields shall only be defined to be of type unsigned int or signed int]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Bit fields shall only be defined to be of type unsigned int or signed int]]></description>
	</rule>
	<rule key="MISRA2004-6_5" priority="MAJOR">
		<name><![CDATA[Bit fields of signed types shall be at least 2 bits long]]></name>
		<configKey><![CDATA[Bit fields of signed types shall be at least 2 bits long]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Bit fields of signed types shall be at least 2 bits long]]></description>
	</rule>
	<rule key="MISRA2004-7_1" priority="MAJOR">
		<name><![CDATA[Octal constants (other than zero) and octal escape sequences shall not be used]]></name>
		<configKey><![CDATA[Octal constants (other than zero) and octal escape sequences shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Octal constants (other than zero) and octal escape sequences shall not be used]]></description>
	</rule>
	<rule key="MISRA2004-8_11" priority="MAJOR">
		<name><![CDATA[The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage]]></name>
		<configKey><![CDATA[The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage]]></description>
	</rule>
	<rule key="MISRA2004-8_12" priority="MAJOR">
		<name><![CDATA[When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation]]></name>
		<configKey><![CDATA[When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation]]></description>
	</rule>
	<rule key="MISRA2004-8_2_a" priority="MAJOR">
		<name><![CDATA[Whenever a function is declared or defined, its type shall be explicitly stated]]></name>
		<configKey><![CDATA[Whenever a function is declared or defined, its type shall be explicitly stated]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Whenever a function is declared or defined, its type shall be explicitly stated]]></description>
	</rule>
	<rule key="MISRA2004-8_2_b" priority="MAJOR">
		<name><![CDATA[Whenever an object is declared or defined, its type shall be explicitly stated]]></name>
		<configKey><![CDATA[Whenever an object is declared or defined, its type shall be explicitly stated]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Whenever an object is declared or defined, its type shall be explicitly stated]]></description>
	</rule>
	<rule key="MISRA2004-8_3_a" priority="MAJOR">
		<name><![CDATA[Use identical types in declaration and definition]]></name>
		<configKey><![CDATA[Use identical types in declaration and definition]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use identical types in declaration and definition]]></description>
	</rule>
	<rule key="MISRA2004-8_3_b" priority="MAJOR">
		<name><![CDATA[Use identical types in declaration and definition]]></name>
		<configKey><![CDATA[Use identical types in declaration and definition]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use identical types in declaration and definition]]></description>
	</rule>
	<rule key="MISRA2004-8_5" priority="MAJOR">
		<name><![CDATA[There shall be no definitions of objects or functions in a header file]]></name>
		<configKey><![CDATA[There shall be no definitions of objects or functions in a header file]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no definitions of objects or functions in a header file]]></description>
	</rule>
	<rule key="MISRA2004-8_6" priority="MAJOR">
		<name><![CDATA[Always declare functions at file scope]]></name>
		<configKey><![CDATA[Always declare functions at file scope]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Always declare functions at file scope]]></description>
	</rule>
	<rule key="MISRA2004-8_7" priority="MAJOR">
		<name><![CDATA[Objects shall be defined at block scope if they are only accessed from within a single function]]></name>
		<configKey><![CDATA[Objects shall be defined at block scope if they are only accessed from within a single function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Objects shall be defined at block scope if they are only accessed from within a single function]]></description>
	</rule>
	<rule key="MISRA2004-9_2" priority="MAJOR">
		<name><![CDATA[Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures]]></name>
		<configKey><![CDATA[Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures]]></description>
	</rule>
	<rule key="MISRA2004-9_3" priority="MAJOR">
		<name><![CDATA[In an enumerator list, the "=" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised]]></name>
		<configKey><![CDATA[In an enumerator list, the "=" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[In an enumerator list, the "=" construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised]]></description>
	</rule>
	<rule key="MISRA2008-0_1_10" priority="MAJOR">
		<name><![CDATA[Every defined function shall be called at least once]]></name>
		<configKey><![CDATA[Every defined function shall be called at least once]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Every defined function shall be called at least once]]></description>
	</rule>
	<rule key="MISRA2008-0_1_11" priority="MAJOR">
		<name><![CDATA[There shall be no unused parameters (named or unnamed) in nonvirtual functions]]></name>
		<configKey><![CDATA[There shall be no unused parameters (named or unnamed) in nonvirtual functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unused parameters (named or unnamed) in nonvirtual functions]]></description>
	</rule>
	<rule key="MISRA2008-0_1_1_a" priority="MAJOR">
		<name><![CDATA[A project shall not contain unreachable code in 'else' block]]></name>
		<configKey><![CDATA[A project shall not contain unreachable code in 'else' block]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain unreachable code in 'else' block]]></description>
	</rule>
	<rule key="MISRA2008-0_1_1_b" priority="MAJOR">
		<name><![CDATA[A project shall not contain unreachable code after 'return', 'break', 'continue', and 'goto' statements]]></name>
		<configKey><![CDATA[A project shall not contain unreachable code after 'return', 'break', 'continue', and 'goto' statements]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain unreachable code after 'return', 'break', 'continue', and 'goto' statements]]></description>
	</rule>
	<rule key="MISRA2008-0_1_1_c" priority="MAJOR">
		<name><![CDATA[A project shall not contain unreachable code in 'if/else/while/for' block]]></name>
		<configKey><![CDATA[A project shall not contain unreachable code in 'if/else/while/for' block]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain unreachable code in 'if/else/while/for' block]]></description>
	</rule>
	<rule key="MISRA2008-0_1_1_d" priority="MAJOR">
		<name><![CDATA[A project shall not contain unreachable code in switch statement]]></name>
		<configKey><![CDATA[A project shall not contain unreachable code in switch statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain unreachable code in switch statement]]></description>
	</rule>
	<rule key="MISRA2008-0_1_1_e" priority="MAJOR">
		<name><![CDATA[A project shall not contain unreachable code in 'for' loop]]></name>
		<configKey><![CDATA[A project shall not contain unreachable code in 'for' loop]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain unreachable code in 'for' loop]]></description>
	</rule>
	<rule key="MISRA2008-0_1_1_f" priority="MAJOR">
		<name><![CDATA[A project shall not contain unreachable code after 'if' or 'switch' statement outside 'for/while/catch' block]]></name>
		<configKey><![CDATA[A project shall not contain unreachable code after 'if' or 'switch' statement outside 'for/while/catch' block]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain unreachable code after 'if' or 'switch' statement outside 'for/while/catch' block]]></description>
	</rule>
	<rule key="MISRA2008-0_1_1_g" priority="MAJOR">
		<name><![CDATA[A project shall not contain unreachable code after 'if' or 'switch' statement inside 'while/for/catch' block]]></name>
		<configKey><![CDATA[A project shall not contain unreachable code after 'if' or 'switch' statement inside 'while/for/catch' block]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain unreachable code after 'if' or 'switch' statement inside 'while/for/catch' block]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_a" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_b" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_c" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_d" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_e" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_f" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_g" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_h" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_i" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_j" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_k" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_l" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_m" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_n" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_o" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_p" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_q" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_r" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_rz" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_s" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_sz" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_t" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_u" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_v" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_w" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_x" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_y" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_2_z" priority="MAJOR">
		<name><![CDATA[A project shall not contain infeasible paths]]></name>
		<configKey><![CDATA[A project shall not contain infeasible paths]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain infeasible paths]]></description>
	</rule>
	<rule key="MISRA2008-0_1_3_a" priority="MAJOR">
		<name><![CDATA[A project shall not contain unused variables]]></name>
		<configKey><![CDATA[A project shall not contain unused variables]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain unused variables]]></description>
	</rule>
	<rule key="MISRA2008-0_1_3_b" priority="MAJOR">
		<name><![CDATA[A project shall not contain unused variables]]></name>
		<configKey><![CDATA[A project shall not contain unused variables]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A project shall not contain unused variables]]></description>
	</rule>
	<rule key="MISRA2008-0_1_7" priority="MAJOR">
		<name><![CDATA[The value returned by a function having a non-void return type that is not an overloaded operator shall always be used]]></name>
		<configKey><![CDATA[The value returned by a function having a non-void return type that is not an overloaded operator shall always be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The value returned by a function having a non-void return type that is not an overloaded operator shall always be used]]></description>
	</rule>
	<rule key="MISRA2008-0_1_8" priority="MAJOR">
		<name><![CDATA[All functions with void return type shall have external side effect(s)]]></name>
		<configKey><![CDATA[All functions with void return type shall have external side effect(s)]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All functions with void return type shall have external side effect(s)]]></description>
	</rule>
	<rule key="MISRA2008-0_2_1_a" priority="MAJOR">
		<name><![CDATA[An object shall not be assigned to an overlapping object]]></name>
		<configKey><![CDATA[An object shall not be assigned to an overlapping object]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An object shall not be assigned to an overlapping object]]></description>
	</rule>
	<rule key="MISRA2008-0_2_1_b" priority="MAJOR">
		<name><![CDATA[An object shall not be assigned to an overlapping object]]></name>
		<configKey><![CDATA[An object shall not be assigned to an overlapping object]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An object shall not be assigned to an overlapping object]]></description>
	</rule>
	<rule key="MISRA2008-0_3_2" priority="MAJOR">
		<name><![CDATA[If a function generates error information, then that error information shall be tested]]></name>
		<configKey><![CDATA[If a function generates error information, then that error information shall be tested]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If a function generates error information, then that error information shall be tested]]></description>
	</rule>
	<rule key="MISRA2008-0_4_2" priority="MAJOR">
		<name><![CDATA[Use of floating-point arithmetic shall be documented]]></name>
		<configKey><![CDATA[Use of floating-point arithmetic shall be documented]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use of floating-point arithmetic shall be documented]]></description>
	</rule>
	<rule key="MISRA2008-10_1_1" priority="MINOR">
		<name><![CDATA[Classes should not be derived from virtual bases]]></name>
		<configKey><![CDATA[Classes should not be derived from virtual bases]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Classes should not be derived from virtual bases]]></description>
	</rule>
	<rule key="MISRA2008-10_1_3" priority="MAJOR">
		<name><![CDATA[An accessible base class shall not be both virtual and non-virtual in the same hierarchy]]></name>
		<configKey><![CDATA[An accessible base class shall not be both virtual and non-virtual in the same hierarchy]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An accessible base class shall not be both virtual and non-virtual in the same hierarchy]]></description>
	</rule>
	<rule key="MISRA2008-10_3_1" priority="MAJOR">
		<name><![CDATA[There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy]]></name>
		<configKey><![CDATA[There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy]]></description>
	</rule>
	<rule key="MISRA2008-10_3_2" priority="MAJOR">
		<name><![CDATA[Each overriding virtual function shall be declared with the virtual keyword]]></name>
		<configKey><![CDATA[Each overriding virtual function shall be declared with the virtual keyword]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each overriding virtual function shall be declared with the virtual keyword]]></description>
	</rule>
	<rule key="MISRA2008-10_3_3" priority="MAJOR">
		<name><![CDATA[A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual]]></name>
		<configKey><![CDATA[A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual]]></description>
	</rule>
	<rule key="MISRA2008-11_0_1" priority="MAJOR">
		<name><![CDATA[Member data in non-POD class types shall be private]]></name>
		<configKey><![CDATA[Member data in non-POD class types shall be private]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Member data in non-POD class types shall be private]]></description>
	</rule>
	<rule key="MISRA2008-12_1_1" priority="MAJOR">
		<name><![CDATA[An object's dynamic type shall not be used from the body of its constructor or destructor]]></name>
		<configKey><![CDATA[An object's dynamic type shall not be used from the body of its constructor or destructor]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An object's dynamic type shall not be used from the body of its constructor or destructor]]></description>
	</rule>
	<rule key="MISRA2008-12_1_2" priority="MINOR">
		<name><![CDATA[All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes]]></name>
		<configKey><![CDATA[All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes]]></description>
	</rule>
	<rule key="MISRA2008-12_1_3" priority="MAJOR">
		<name><![CDATA[All constructors that are callable with a single argument of fundamental type shall be declared explicit]]></name>
		<configKey><![CDATA[All constructors that are callable with a single argument of fundamental type shall be declared explicit]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All constructors that are callable with a single argument of fundamental type shall be declared explicit]]></description>
	</rule>
	<rule key="MISRA2008-12_8_1" priority="MAJOR">
		<name><![CDATA[A copy constructor shall only initialize its base classes and the nonstatic members of the class of which it is a member]]></name>
		<configKey><![CDATA[A copy constructor shall only initialize its base classes and the nonstatic members of the class of which it is a member]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A copy constructor shall only initialize its base classes and the nonstatic members of the class of which it is a member]]></description>
	</rule>
	<rule key="MISRA2008-12_8_2" priority="MAJOR">
		<name><![CDATA[The copy assignment operator shall be declared protected or private in an abstract class]]></name>
		<configKey><![CDATA[The copy assignment operator shall be declared protected or private in an abstract class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The copy assignment operator shall be declared protected or private in an abstract class]]></description>
	</rule>
	<rule key="MISRA2008-14_5_2" priority="MAJOR">
		<name><![CDATA[A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter]]></name>
		<configKey><![CDATA[A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter]]></description>
	</rule>
	<rule key="MISRA2008-14_5_3" priority="MAJOR">
		<name><![CDATA[A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter]]></name>
		<configKey><![CDATA[A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter]]></description>
	</rule>
	<rule key="MISRA2008-14_6_1" priority="MAJOR">
		<name><![CDATA[In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-&gt;]]></name>
		<configKey><![CDATA[In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-&gt;]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-&gt;]]></description>
	</rule>
	<rule key="MISRA2008-14_7_3" priority="MAJOR">
		<name><![CDATA[All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template]]></name>
		<configKey><![CDATA[All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template]]></description>
	</rule>
	<rule key="MISRA2008-14_8_1" priority="MAJOR">
		<name><![CDATA[Overloaded function templates shall not be explicitly specialized]]></name>
		<configKey><![CDATA[Overloaded function templates shall not be explicitly specialized]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Overloaded function templates shall not be explicitly specialized]]></description>
	</rule>
	<rule key="MISRA2008-14_8_2" priority="MINOR">
		<name><![CDATA[The viable function set for a function call should either contain no function specializations, or only contain function specializations]]></name>
		<configKey><![CDATA[The viable function set for a function call should either contain no function specializations, or only contain function specializations]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The viable function set for a function call should either contain no function specializations, or only contain function specializations]]></description>
	</rule>
	<rule key="MISRA2008-15_0_2" priority="MINOR">
		<name><![CDATA[An exception object should not have pointer type]]></name>
		<configKey><![CDATA[An exception object should not have pointer type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An exception object should not have pointer type]]></description>
	</rule>
	<rule key="MISRA2008-15_0_3" priority="MAJOR">
		<name><![CDATA[Control shall not be transferred into a try or catch block using a goto or a switch statement]]></name>
		<configKey><![CDATA[Control shall not be transferred into a try or catch block using a goto or a switch statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Control shall not be transferred into a try or catch block using a goto or a switch statement]]></description>
	</rule>
	<rule key="MISRA2008-15_1_1" priority="MAJOR">
		<name><![CDATA[The assignment-expression of a throw statement shall not itself cause an exception to be thrown]]></name>
		<configKey><![CDATA[The assignment-expression of a throw statement shall not itself cause an exception to be thrown]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The assignment-expression of a throw statement shall not itself cause an exception to be thrown]]></description>
	</rule>
	<rule key="MISRA2008-15_1_2" priority="MAJOR">
		<name><![CDATA[NULL shall not be thrown explicitly]]></name>
		<configKey><![CDATA[NULL shall not be thrown explicitly]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[NULL shall not be thrown explicitly]]></description>
	</rule>
	<rule key="MISRA2008-15_1_3" priority="MAJOR">
		<name><![CDATA[An empty throw (throw;) shall only be used in the compound statement of a catch handler]]></name>
		<configKey><![CDATA[An empty throw (throw;) shall only be used in the compound statement of a catch handler]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An empty throw (throw;) shall only be used in the compound statement of a catch handler]]></description>
	</rule>
	<rule key="MISRA2008-15_3_1" priority="MAJOR">
		<name><![CDATA[Exceptions shall be raised only after start-up and before termination of the program]]></name>
		<configKey><![CDATA[Exceptions shall be raised only after start-up and before termination of the program]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Exceptions shall be raised only after start-up and before termination of the program]]></description>
	</rule>
	<rule key="MISRA2008-15_3_2" priority="MINOR">
		<name><![CDATA[There should be at least one exception handler to catch all otherwise unhandled exceptions]]></name>
		<configKey><![CDATA[There should be at least one exception handler to catch all otherwise unhandled exceptions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There should be at least one exception handler to catch all otherwise unhandled exceptions]]></description>
	</rule>
	<rule key="MISRA2008-15_3_3" priority="MAJOR">
		<name><![CDATA[Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases]]></name>
		<configKey><![CDATA[Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases]]></description>
	</rule>
	<rule key="MISRA2008-15_3_4_a" priority="MAJOR">
		<name><![CDATA[Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point]]></name>
		<configKey><![CDATA[Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point]]></description>
	</rule>
	<rule key="MISRA2008-15_3_4_b" priority="MAJOR">
		<name><![CDATA[Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point]]></name>
		<configKey><![CDATA[Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point]]></description>
	</rule>
	<rule key="MISRA2008-15_3_5" priority="MAJOR">
		<name><![CDATA[A class type exception shall always be caught by reference]]></name>
		<configKey><![CDATA[A class type exception shall always be caught by reference]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A class type exception shall always be caught by reference]]></description>
	</rule>
	<rule key="MISRA2008-15_3_6" priority="MAJOR">
		<name><![CDATA[Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to bas]]></name>
		<configKey><![CDATA[Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to bas]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to bas]]></description>
	</rule>
	<rule key="MISRA2008-15_5_1" priority="MAJOR">
		<name><![CDATA[A class destructor shall not exit with an exception]]></name>
		<configKey><![CDATA[A class destructor shall not exit with an exception]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A class destructor shall not exit with an exception]]></description>
	</rule>
	<rule key="MISRA2008-15_5_2" priority="MAJOR">
		<name><![CDATA[Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)]]></name>
		<configKey><![CDATA[Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)]]></description>
	</rule>
	<rule key="MISRA2008-15_5_3" priority="MAJOR">
		<name><![CDATA[The terminate() function shall not be called implicitly]]></name>
		<configKey><![CDATA[The terminate() function shall not be called implicitly]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The terminate() function shall not be called implicitly]]></description>
	</rule>
	<rule key="MISRA2008-16_0_1" priority="MAJOR">
		<name><![CDATA[#include directives in a file shall only be preceded by other preprocessor directives or comments]]></name>
		<configKey><![CDATA[#include directives in a file shall only be preceded by other preprocessor directives or comments]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[#include directives in a file shall only be preceded by other preprocessor directives or comments]]></description>
	</rule>
	<rule key="MISRA2008-16_0_2" priority="MAJOR">
		<name><![CDATA[Macros shall only be #define'd or #undef'd in the global namespace]]></name>
		<configKey><![CDATA[Macros shall only be #define'd or #undef'd in the global namespace]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Macros shall only be #define'd or #undef'd in the global namespace]]></description>
	</rule>
	<rule key="MISRA2008-16_0_3" priority="MAJOR">
		<name><![CDATA[#undef shall not be used]]></name>
		<configKey><![CDATA[#undef shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[#undef shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-16_0_4" priority="MAJOR">
		<name><![CDATA[Function-like macros shall not be defined]]></name>
		<configKey><![CDATA[Function-like macros shall not be defined]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Function-like macros shall not be defined]]></description>
	</rule>
	<rule key="MISRA2008-16_0_5" priority="MAJOR">
		<name><![CDATA[Arguments to a function-like macro shall not contain tokens that look like preprocessing directives]]></name>
		<configKey><![CDATA[Arguments to a function-like macro shall not contain tokens that look like preprocessing directives]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Arguments to a function-like macro shall not contain tokens that look like preprocessing directives]]></description>
	</rule>
	<rule key="MISRA2008-16_0_6" priority="MAJOR">
		<name><![CDATA[In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##]]></name>
		<configKey><![CDATA[In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##]]></description>
	</rule>
	<rule key="MISRA2008-16_0_7" priority="MAJOR">
		<name><![CDATA[Undefined macro identifiers shall not be used in #if or #elif preprocessor directives, except as operands to the defined operator]]></name>
		<configKey><![CDATA[Undefined macro identifiers shall not be used in #if or #elif preprocessor directives, except as operands to the defined operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Undefined macro identifiers shall not be used in #if or #elif preprocessor directives, except as operands to the defined operator]]></description>
	</rule>
	<rule key="MISRA2008-16_0_8" priority="MAJOR">
		<name><![CDATA[If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token]]></name>
		<configKey><![CDATA[If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token]]></description>
	</rule>
	<rule key="MISRA2008-16_1_1" priority="MAJOR">
		<name><![CDATA[The defined preprocessor operator shall only be used in one of the two standard forms]]></name>
		<configKey><![CDATA[The defined preprocessor operator shall only be used in one of the two standard forms]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The defined preprocessor operator shall only be used in one of the two standard forms]]></description>
	</rule>
	<rule key="MISRA2008-16_1_2" priority="MAJOR">
		<name><![CDATA[All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related]]></name>
		<configKey><![CDATA[All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related]]></description>
	</rule>
	<rule key="MISRA2008-16_2_1_a" priority="MAJOR">
		<name><![CDATA[Macros shall not be used]]></name>
		<configKey><![CDATA[Macros shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Macros shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-16_2_1_b" priority="MAJOR">
		<name><![CDATA[The #ifndef and #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file]]></name>
		<configKey><![CDATA[The #ifndef and #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The #ifndef and #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file]]></description>
	</rule>
	<rule key="MISRA2008-16_2_1_c" priority="MAJOR">
		<name><![CDATA[The following pre-processor directives shall not be used: #if, #elif, #else, #ifdef, #undef, #pragma]]></name>
		<configKey><![CDATA[The following pre-processor directives shall not be used: #if, #elif, #else, #ifdef, #undef, #pragma]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The following pre-processor directives shall not be used: #if, #elif, #else, #ifdef, #undef, #pragma]]></description>
	</rule>
	<rule key="MISRA2008-16_2_2" priority="MAJOR">
		<name><![CDATA[C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers]]></name>
		<configKey><![CDATA[C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers]]></description>
	</rule>
	<rule key="MISRA2008-16_2_3" priority="MAJOR">
		<name><![CDATA[Include guards shall be provided]]></name>
		<configKey><![CDATA[Include guards shall be provided]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Include guards shall be provided]]></description>
	</rule>
	<rule key="MISRA2008-16_2_4" priority="MAJOR">
		<name><![CDATA[The ', ", /* or // characters shall not occur in a header file name]]></name>
		<configKey><![CDATA[The ', ", /* or // characters shall not occur in a header file name]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The ', ", /* or // characters shall not occur in a header file name]]></description>
	</rule>
	<rule key="MISRA2008-16_2_5" priority="MINOR">
		<name><![CDATA[The \ character should not occur in a header file name]]></name>
		<configKey><![CDATA[The \ character should not occur in a header file name]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The \ character should not occur in a header file name]]></description>
	</rule>
	<rule key="MISRA2008-16_3_1" priority="MAJOR">
		<name><![CDATA[There shall be at most one occurrence of the # or ## operators in a single macro definition]]></name>
		<configKey><![CDATA[There shall be at most one occurrence of the # or ## operators in a single macro definition]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be at most one occurrence of the # or ## operators in a single macro definition]]></description>
	</rule>
	<rule key="MISRA2008-16_3_2" priority="MINOR">
		<name><![CDATA[The # and ## operators should not be used]]></name>
		<configKey><![CDATA[The # and ## operators should not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The # and ## operators should not be used]]></description>
	</rule>
	<rule key="MISRA2008-16_6_1" priority="MAJOR">
		<name><![CDATA[All uses of the #pragma directive shall be documented]]></name>
		<configKey><![CDATA[All uses of the #pragma directive shall be documented]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All uses of the #pragma directive shall be documented]]></description>
	</rule>
	<rule key="MISRA2008-17_0_1_a" priority="MAJOR">
		<name><![CDATA[Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined]]></name>
		<configKey><![CDATA[Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined]]></description>
	</rule>
	<rule key="MISRA2008-17_0_1_b" priority="MAJOR">
		<name><![CDATA[Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined]]></name>
		<configKey><![CDATA[Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined]]></description>
	</rule>
	<rule key="MISRA2008-17_0_2" priority="MAJOR">
		<name><![CDATA[The names of standard library macros and objects shall not be reused]]></name>
		<configKey><![CDATA[The names of standard library macros and objects shall not be reused]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The names of standard library macros and objects shall not be reused]]></description>
	</rule>
	<rule key="MISRA2008-17_0_3" priority="MAJOR">
		<name><![CDATA[The names of standard library functions shall not be overridden]]></name>
		<configKey><![CDATA[The names of standard library functions shall not be overridden]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The names of standard library functions shall not be overridden]]></description>
	</rule>
	<rule key="MISRA2008-17_0_5" priority="MAJOR">
		<name><![CDATA[The setjmp macro and the longjmp function shall not be used]]></name>
		<configKey><![CDATA[The setjmp macro and the longjmp function shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The setjmp macro and the longjmp function shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-18_0_1" priority="MAJOR">
		<name><![CDATA[The C library shall not be used]]></name>
		<configKey><![CDATA[The C library shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The C library shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-18_0_2" priority="MAJOR">
		<name><![CDATA[The library functions atof, atoi and atol from library &lt;cstdlib&gt; shall not be used]]></name>
		<configKey><![CDATA[The library functions atof, atoi and atol from library &lt;cstdlib&gt; shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The library functions atof, atoi and atol from library &lt;cstdlib&gt; shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-18_0_3" priority="MAJOR">
		<name><![CDATA[The library functions abort, exit, getenv and system from library &lt;cstdlib&gt; shall not be used]]></name>
		<configKey><![CDATA[The library functions abort, exit, getenv and system from library &lt;cstdlib&gt; shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The library functions abort, exit, getenv and system from library &lt;cstdlib&gt; shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-18_0_4" priority="MAJOR">
		<name><![CDATA[The time handling functions of library &lt;ctime&gt; shall not be used]]></name>
		<configKey><![CDATA[The time handling functions of library &lt;ctime&gt; shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The time handling functions of library &lt;ctime&gt; shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-18_0_5" priority="MAJOR">
		<name><![CDATA[The unbounded functions of library &lt;cstring&gt; shall not be used]]></name>
		<configKey><![CDATA[The unbounded functions of library &lt;cstring&gt; shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The unbounded functions of library &lt;cstring&gt; shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-18_2_1" priority="MAJOR">
		<name><![CDATA[The macro offsetof shall not be used]]></name>
		<configKey><![CDATA[The macro offsetof shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The macro offsetof shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-18_4_1" priority="MAJOR">
		<name><![CDATA[Dynamic heap memory allocation shall not be used]]></name>
		<configKey><![CDATA[Dynamic heap memory allocation shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Dynamic heap memory allocation shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-18_7_1" priority="MAJOR">
		<name><![CDATA[The signal handling facilities of &lt;csignal&gt; shall not be used]]></name>
		<configKey><![CDATA[The signal handling facilities of &lt;csignal&gt; shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The signal handling facilities of &lt;csignal&gt; shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-19_3_1" priority="MAJOR">
		<name><![CDATA[The error indicator errno shall not be used]]></name>
		<configKey><![CDATA[The error indicator errno shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The error indicator errno shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-27_0_1" priority="MAJOR">
		<name><![CDATA[The stream input/output library &lt;cstdio&gt; shall not be used]]></name>
		<configKey><![CDATA[The stream input/output library &lt;cstdio&gt; shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The stream input/output library &lt;cstdio&gt; shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-2_10_1" priority="MAJOR">
		<name><![CDATA[Different identifiers shall be typographically unambiguous]]></name>
		<configKey><![CDATA[Different identifiers shall be typographically unambiguous]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Different identifiers shall be typographically unambiguous]]></description>
	</rule>
	<rule key="MISRA2008-2_10_2_a" priority="MAJOR">
		<name><![CDATA[Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope]]></name>
		<configKey><![CDATA[Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope]]></description>
	</rule>
	<rule key="MISRA2008-2_10_2_b" priority="MAJOR">
		<name><![CDATA[Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope]]></name>
		<configKey><![CDATA[Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope]]></description>
	</rule>
	<rule key="MISRA2008-2_10_4_a" priority="MAJOR">
		<name><![CDATA[A class, union or enum name (including qualification, if any) shall be a unique identifier]]></name>
		<configKey><![CDATA[A class, union or enum name (including qualification, if any) shall be a unique identifier]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A class, union or enum name (including qualification, if any) shall be a unique identifier]]></description>
	</rule>
	<rule key="MISRA2008-2_10_4_b" priority="MAJOR">
		<name><![CDATA[A class, union or enum name (including qualification, if any) shall be a unique identifier]]></name>
		<configKey><![CDATA[A class, union or enum name (including qualification, if any) shall be a unique identifier]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A class, union or enum name (including qualification, if any) shall be a unique identifier]]></description>
	</rule>
	<rule key="MISRA2008-2_10_5_a" priority="MINOR">
		<name><![CDATA[The identifier name of a non-member object or function with static storage duration should not be reused]]></name>
		<configKey><![CDATA[The identifier name of a non-member object or function with static storage duration should not be reused]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The identifier name of a non-member object or function with static storage duration should not be reused]]></description>
	</rule>
	<rule key="MISRA2008-2_10_5_b" priority="MINOR">
		<name><![CDATA[The identifier name of a non-member object or function with static storage duration should not be reused]]></name>
		<configKey><![CDATA[The identifier name of a non-member object or function with static storage duration should not be reused]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The identifier name of a non-member object or function with static storage duration should not be reused]]></description>
	</rule>
	<rule key="MISRA2008-2_10_6" priority="MAJOR">
		<name><![CDATA[If an identifier refers to a type, it shall not also refer to an object or a function in the same scope]]></name>
		<configKey><![CDATA[If an identifier refers to a type, it shall not also refer to an object or a function in the same scope]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If an identifier refers to a type, it shall not also refer to an object or a function in the same scope]]></description>
	</rule>
	<rule key="MISRA2008-2_13_1" priority="MAJOR">
		<name><![CDATA[Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used]]></name>
		<configKey><![CDATA[Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used]]></description>
	</rule>
	<rule key="MISRA2008-2_13_2" priority="MAJOR">
		<name><![CDATA[Octal constants (other than zero) and octal escape sequences (other than "\0") shall not be used]]></name>
		<configKey><![CDATA[Octal constants (other than zero) and octal escape sequences (other than "\0") shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Octal constants (other than zero) and octal escape sequences (other than "\0") shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-2_13_3" priority="MAJOR">
		<name><![CDATA[A "U" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type]]></name>
		<configKey><![CDATA[A "U" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A "U" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type]]></description>
	</rule>
	<rule key="MISRA2008-2_13_4" priority="MAJOR">
		<name><![CDATA[Literal suffixes shall be upper case]]></name>
		<configKey><![CDATA[Literal suffixes shall be upper case]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Literal suffixes shall be upper case]]></description>
	</rule>
	<rule key="MISRA2008-2_13_5" priority="MAJOR">
		<name><![CDATA[Narrow and wide string literals shall not be concatenated]]></name>
		<configKey><![CDATA[Narrow and wide string literals shall not be concatenated]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Narrow and wide string literals shall not be concatenated]]></description>
	</rule>
	<rule key="MISRA2008-2_3_1" priority="MAJOR">
		<name><![CDATA[Trigraphs shall not be used]]></name>
		<configKey><![CDATA[Trigraphs shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Trigraphs shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-2_5_1" priority="MINOR">
		<name><![CDATA[Digraphs should not be used]]></name>
		<configKey><![CDATA[Digraphs should not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Digraphs should not be used]]></description>
	</rule>
	<rule key="MISRA2008-2_7_1" priority="MAJOR">
		<name><![CDATA[The character sequence /* shall not be used within a C-style comment]]></name>
		<configKey><![CDATA[The character sequence /* shall not be used within a C-style comment]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The character sequence /* shall not be used within a C-style comment]]></description>
	</rule>
	<rule key="MISRA2008-2_7_2" priority="MAJOR">
		<name><![CDATA[Sections of code shall not be "commented out" using C-style comments]]></name>
		<configKey><![CDATA[Sections of code shall not be "commented out" using C-style comments]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Sections of code shall not be "commented out" using C-style comments]]></description>
	</rule>
	<rule key="MISRA2008-2_7_3" priority="MINOR">
		<name><![CDATA[Sections of code should not be "commented out" using C++ comments]]></name>
		<configKey><![CDATA[Sections of code should not be "commented out" using C++ comments]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Sections of code should not be "commented out" using C++ comments]]></description>
	</rule>
	<rule key="MISRA2008-3_1_1" priority="MAJOR">
		<name><![CDATA[It shall be possible to include any header file in multiple translation units without violating the One Definition Rule]]></name>
		<configKey><![CDATA[It shall be possible to include any header file in multiple translation units without violating the One Definition Rule]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[It shall be possible to include any header file in multiple translation units without violating the One Definition Rule]]></description>
	</rule>
	<rule key="MISRA2008-3_1_2" priority="MAJOR">
		<name><![CDATA[Functions shall not be declared at block scope]]></name>
		<configKey><![CDATA[Functions shall not be declared at block scope]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Functions shall not be declared at block scope]]></description>
	</rule>
	<rule key="MISRA2008-3_1_3" priority="MAJOR">
		<name><![CDATA[When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization]]></name>
		<configKey><![CDATA[When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization]]></description>
	</rule>
	<rule key="MISRA2008-3_3_1" priority="MAJOR">
		<name><![CDATA[Objects or functions with external linkage shall be declared in a header file]]></name>
		<configKey><![CDATA[Objects or functions with external linkage shall be declared in a header file]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Objects or functions with external linkage shall be declared in a header file]]></description>
	</rule>
	<rule key="MISRA2008-3_3_2" priority="MAJOR">
		<name><![CDATA[If a function has internal linkage then all re-declarations shall include the static storage class specifier]]></name>
		<configKey><![CDATA[If a function has internal linkage then all re-declarations shall include the static storage class specifier]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If a function has internal linkage then all re-declarations shall include the static storage class specifier]]></description>
	</rule>
	<rule key="MISRA2008-3_4_1" priority="MAJOR">
		<name><![CDATA[An identifier declared to be an object or type shall be defined in a block that minimizes its visibility]]></name>
		<configKey><![CDATA[An identifier declared to be an object or type shall be defined in a block that minimizes its visibility]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An identifier declared to be an object or type shall be defined in a block that minimizes its visibility]]></description>
	</rule>
	<rule key="MISRA2008-3_9_1" priority="MAJOR">
		<name><![CDATA[The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations]]></name>
		<configKey><![CDATA[The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations]]></description>
	</rule>
	<rule key="MISRA2008-3_9_2" priority="MINOR">
		<name><![CDATA[typedefs that indicate size and signedness should be used in place of the basic numerical types]]></name>
		<configKey><![CDATA[typedefs that indicate size and signedness should be used in place of the basic numerical types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[typedefs that indicate size and signedness should be used in place of the basic numerical types]]></description>
	</rule>
	<rule key="MISRA2008-3_9_3" priority="MAJOR">
		<name><![CDATA[The underlying bit representations of floating-point values shall not be used]]></name>
		<configKey><![CDATA[The underlying bit representations of floating-point values shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The underlying bit representations of floating-point values shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-4_10_1" priority="MAJOR">
		<name><![CDATA[NULL shall not be used as an integer value]]></name>
		<configKey><![CDATA[NULL shall not be used as an integer value]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[NULL shall not be used as an integer value]]></description>
	</rule>
	<rule key="MISRA2008-4_10_2" priority="MAJOR">
		<name><![CDATA[Literal zero (0) shall not be used as the null-pointer-constant]]></name>
		<configKey><![CDATA[Literal zero (0) shall not be used as the null-pointer-constant]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Literal zero (0) shall not be used as the null-pointer-constant]]></description>
	</rule>
	<rule key="MISRA2008-4_5_1" priority="MAJOR">
		<name><![CDATA[Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=]]></name>
		<configKey><![CDATA[Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=]]></description>
	</rule>
	<rule key="MISRA2008-4_5_2" priority="MAJOR">
		<name><![CDATA[Expressions with type enum shall not be used as operands to built-in operators other than [ ], =,  ==, !=, &lt;, &lt;=, &gt;, &gt;=, and the unary &amp; operator]]></name>
		<configKey><![CDATA[Expressions with type enum shall not be used as operands to built-in operators other than [ ], =,  ==, !=, &lt;, &lt;=, &gt;, &gt;=, and the unary &amp; operator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Expressions with type enum shall not be used as operands to built-in operators other than [ ], =,  ==, !=, &lt;, &lt;=, &gt;, &gt;=, and the unary &amp; operator]]></description>
	</rule>
	<rule key="MISRA2008-4_5_3" priority="MAJOR">
		<name><![CDATA[Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp;]]></name>
		<configKey><![CDATA[Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp;]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp;]]></description>
	</rule>
	<rule key="MISRA2008-5_0_10" priority="MAJOR">
		<name><![CDATA[If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of t]]></name>
		<configKey><![CDATA[If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of t]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of t]]></description>
	</rule>
	<rule key="MISRA2008-5_0_11" priority="MAJOR">
		<name><![CDATA[The plain char type shall only be used for the storage and use of character values]]></name>
		<configKey><![CDATA[The plain char type shall only be used for the storage and use of character values]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The plain char type shall only be used for the storage and use of character values]]></description>
	</rule>
	<rule key="MISRA2008-5_0_12" priority="MAJOR">
		<name><![CDATA[signed char and unsigned char type shall only be used for the storage and use of numeric values]]></name>
		<configKey><![CDATA[signed char and unsigned char type shall only be used for the storage and use of numeric values]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[signed char and unsigned char type shall only be used for the storage and use of numeric values]]></description>
	</rule>
	<rule key="MISRA2008-5_0_13" priority="MAJOR">
		<name><![CDATA[The condition of an if-statement and the condition of an iteration-statement shall have type bool]]></name>
		<configKey><![CDATA[The condition of an if-statement and the condition of an iteration-statement shall have type bool]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The condition of an if-statement and the condition of an iteration-statement shall have type bool]]></description>
	</rule>
	<rule key="MISRA2008-5_0_14" priority="MAJOR">
		<name><![CDATA[The first operand of a conditional-operator shall have type bool]]></name>
		<configKey><![CDATA[The first operand of a conditional-operator shall have type bool]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The first operand of a conditional-operator shall have type bool]]></description>
	</rule>
	<rule key="MISRA2008-5_0_15" priority="MAJOR">
		<name><![CDATA[Array indexing shall be the only form of pointer arithmetic]]></name>
		<configKey><![CDATA[Array indexing shall be the only form of pointer arithmetic]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Array indexing shall be the only form of pointer arithmetic]]></description>
	</rule>
	<rule key="MISRA2008-5_0_17" priority="MAJOR">
		<name><![CDATA[Subtraction between pointers shall only be applied to pointers that address elements of the same array]]></name>
		<configKey><![CDATA[Subtraction between pointers shall only be applied to pointers that address elements of the same array]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Subtraction between pointers shall only be applied to pointers that address elements of the same array]]></description>
	</rule>
	<rule key="MISRA2008-5_0_18" priority="MAJOR">
		<name><![CDATA[&gt;, &gt;=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array]]></name>
		<configKey><![CDATA[&gt;, &gt;=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[&gt;, &gt;=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array]]></description>
	</rule>
	<rule key="MISRA2008-5_0_19_a" priority="MAJOR">
		<name><![CDATA[The declaration of objects shall contain no more than two levels of pointer indirection]]></name>
		<configKey><![CDATA[The declaration of objects shall contain no more than two levels of pointer indirection]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The declaration of objects shall contain no more than two levels of pointer indirection]]></description>
	</rule>
	<rule key="MISRA2008-5_0_19_b" priority="MAJOR">
		<name><![CDATA[The declaration of objects shall contain no more than two levels of pointer indirection]]></name>
		<configKey><![CDATA[The declaration of objects shall contain no more than two levels of pointer indirection]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The declaration of objects shall contain no more than two levels of pointer indirection]]></description>
	</rule>
	<rule key="MISRA2008-5_0_19_c" priority="MAJOR">
		<name><![CDATA[The declaration of objects shall contain no more than two levels of pointer indirection]]></name>
		<configKey><![CDATA[The declaration of objects shall contain no more than two levels of pointer indirection]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The declaration of objects shall contain no more than two levels of pointer indirection]]></description>
	</rule>
	<rule key="MISRA2008-5_0_19_d" priority="MAJOR">
		<name><![CDATA[The declaration of objects shall contain no more than two levels of pointer indirection]]></name>
		<configKey><![CDATA[The declaration of objects shall contain no more than two levels of pointer indirection]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The declaration of objects shall contain no more than two levels of pointer indirection]]></description>
	</rule>
	<rule key="MISRA2008-5_0_1_a" priority="MAJOR">
		<name><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></name>
		<configKey><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></description>
	</rule>
	<rule key="MISRA2008-5_0_1_b" priority="MAJOR">
		<name><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></name>
		<configKey><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></description>
	</rule>
	<rule key="MISRA2008-5_0_1_c" priority="MAJOR">
		<name><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></name>
		<configKey><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></description>
	</rule>
	<rule key="MISRA2008-5_0_1_d" priority="MAJOR">
		<name><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></name>
		<configKey><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></description>
	</rule>
	<rule key="MISRA2008-5_0_1_e" priority="MAJOR">
		<name><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></name>
		<configKey><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></description>
	</rule>
	<rule key="MISRA2008-5_0_1_f" priority="MAJOR">
		<name><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></name>
		<configKey><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></description>
	</rule>
	<rule key="MISRA2008-5_0_1_g" priority="MAJOR">
		<name><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></name>
		<configKey><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The value of an expression shall be the same under any order of evaluation that the standard permits]]></description>
	</rule>
	<rule key="MISRA2008-5_0_20" priority="MAJOR">
		<name><![CDATA[Non-constant operands to a binary bitwise operator shall have the same underlying type]]></name>
		<configKey><![CDATA[Non-constant operands to a binary bitwise operator shall have the same underlying type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Non-constant operands to a binary bitwise operator shall have the same underlying type]]></description>
	</rule>
	<rule key="MISRA2008-5_0_21" priority="MAJOR">
		<name><![CDATA[Bitwise operators shall only be applied to operands of unsigned underlying type]]></name>
		<configKey><![CDATA[Bitwise operators shall only be applied to operands of unsigned underlying type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Bitwise operators shall only be applied to operands of unsigned underlying type]]></description>
	</rule>
	<rule key="MISRA2008-5_0_2_a" priority="MINOR">
		<name><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></name>
		<configKey><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></description>
	</rule>
	<rule key="MISRA2008-5_0_2_b" priority="MINOR">
		<name><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></name>
		<configKey><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></description>
	</rule>
	<rule key="MISRA2008-5_0_2_c" priority="MINOR">
		<name><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></name>
		<configKey><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></description>
	</rule>
	<rule key="MISRA2008-5_0_2_d" priority="MINOR">
		<name><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></name>
		<configKey><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></description>
	</rule>
	<rule key="MISRA2008-5_0_2_e" priority="MINOR">
		<name><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></name>
		<configKey><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></description>
	</rule>
	<rule key="MISRA2008-5_0_2_f" priority="MINOR">
		<name><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></name>
		<configKey><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Limited dependence should be placed on C++ operator precedence rules in expressions]]></description>
	</rule>
	<rule key="MISRA2008-5_0_3_a" priority="MAJOR">
		<name><![CDATA[A cvalue expression shall not be implicitly converted to a different underlying type]]></name>
		<configKey><![CDATA[A cvalue expression shall not be implicitly converted to a different underlying type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A cvalue expression shall not be implicitly converted to a different underlying type]]></description>
	</rule>
	<rule key="MISRA2008-5_0_3_b" priority="MAJOR">
		<name><![CDATA[A cvalue expression shall not be implicitly converted to a different underlying type]]></name>
		<configKey><![CDATA[A cvalue expression shall not be implicitly converted to a different underlying type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A cvalue expression shall not be implicitly converted to a different underlying type]]></description>
	</rule>
	<rule key="MISRA2008-5_0_3_c" priority="MAJOR">
		<name><![CDATA[A cvalue expression shall not be implicitly converted to a different underlying type]]></name>
		<configKey><![CDATA[A cvalue expression shall not be implicitly converted to a different underlying type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A cvalue expression shall not be implicitly converted to a different underlying type]]></description>
	</rule>
	<rule key="MISRA2008-5_0_4_a" priority="MAJOR">
		<name><![CDATA[An implicit integral conversion shall not change the signedness of the underlying type]]></name>
		<configKey><![CDATA[An implicit integral conversion shall not change the signedness of the underlying type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An implicit integral conversion shall not change the signedness of the underlying type]]></description>
	</rule>
	<rule key="MISRA2008-5_0_4_b" priority="MAJOR">
		<name><![CDATA[An implicit integral conversion shall not change the signedness of the underlying type]]></name>
		<configKey><![CDATA[An implicit integral conversion shall not change the signedness of the underlying type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An implicit integral conversion shall not change the signedness of the underlying type]]></description>
	</rule>
	<rule key="MISRA2008-5_0_5_a" priority="MAJOR">
		<name><![CDATA[There shall be no implicit floating-integral conversions]]></name>
		<configKey><![CDATA[There shall be no implicit floating-integral conversions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no implicit floating-integral conversions]]></description>
	</rule>
	<rule key="MISRA2008-5_0_5_b" priority="MAJOR">
		<name><![CDATA[There shall be no implicit floating-integral conversions]]></name>
		<configKey><![CDATA[There shall be no implicit floating-integral conversions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no implicit floating-integral conversions]]></description>
	</rule>
	<rule key="MISRA2008-5_0_5_c" priority="MAJOR">
		<name><![CDATA[There shall be no implicit floating-integral conversions]]></name>
		<configKey><![CDATA[There shall be no implicit floating-integral conversions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no implicit floating-integral conversions]]></description>
	</rule>
	<rule key="MISRA2008-5_0_6_a" priority="MAJOR">
		<name><![CDATA[An implicit integral or floating-point conversion shall not reduce the size of the underlying type]]></name>
		<configKey><![CDATA[An implicit integral or floating-point conversion shall not reduce the size of the underlying type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An implicit integral or floating-point conversion shall not reduce the size of the underlying type]]></description>
	</rule>
	<rule key="MISRA2008-5_0_6_b" priority="MAJOR">
		<name><![CDATA[An implicit integral or floating-point conversion shall not reduce the size of the underlying type]]></name>
		<configKey><![CDATA[An implicit integral or floating-point conversion shall not reduce the size of the underlying type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An implicit integral or floating-point conversion shall not reduce the size of the underlying type]]></description>
	</rule>
	<rule key="MISRA2008-5_0_6_c" priority="MAJOR">
		<name><![CDATA[An implicit integral or floating-point conversion shall not reduce the size of the underlying type]]></name>
		<configKey><![CDATA[An implicit integral or floating-point conversion shall not reduce the size of the underlying type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An implicit integral or floating-point conversion shall not reduce the size of the underlying type]]></description>
	</rule>
	<rule key="MISRA2008-5_0_7_a" priority="MAJOR">
		<name><![CDATA[There shall be no explicit floating-integral conversions of a cvalue expression]]></name>
		<configKey><![CDATA[There shall be no explicit floating-integral conversions of a cvalue expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no explicit floating-integral conversions of a cvalue expression]]></description>
	</rule>
	<rule key="MISRA2008-5_0_7_b" priority="MAJOR">
		<name><![CDATA[There shall be no explicit floating-integral conversions of a cvalue expression]]></name>
		<configKey><![CDATA[There shall be no explicit floating-integral conversions of a cvalue expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no explicit floating-integral conversions of a cvalue expression]]></description>
	</rule>
	<rule key="MISRA2008-5_0_8" priority="MAJOR">
		<name><![CDATA[An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression]]></name>
		<configKey><![CDATA[An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression]]></description>
	</rule>
	<rule key="MISRA2008-5_0_9" priority="MAJOR">
		<name><![CDATA[An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression]]></name>
		<configKey><![CDATA[An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression]]></description>
	</rule>
	<rule key="MISRA2008-5_14_1" priority="MAJOR">
		<name><![CDATA[The right hand operand of a logical &amp;&amp; or || operator shall not contain side effects]]></name>
		<configKey><![CDATA[The right hand operand of a logical &amp;&amp; or || operator shall not contain side effects]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The right hand operand of a logical &amp;&amp; or || operator shall not contain side effects]]></description>
	</rule>
	<rule key="MISRA2008-5_18_1" priority="MAJOR">
		<name><![CDATA[The comma operator shall not be used]]></name>
		<configKey><![CDATA[The comma operator shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The comma operator shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-5_2_1" priority="MAJOR">
		<name><![CDATA[Each operand of a logical &amp;&amp; or || shall be a postfix-expression]]></name>
		<configKey><![CDATA[Each operand of a logical &amp;&amp; or || shall be a postfix-expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each operand of a logical &amp;&amp; or || shall be a postfix-expression]]></description>
	</rule>
	<rule key="MISRA2008-5_2_10" priority="MINOR">
		<name><![CDATA[The increment (++) and decrement (--) operators should not be mixed with other operators in an expression]]></name>
		<configKey><![CDATA[The increment (++) and decrement (--) operators should not be mixed with other operators in an expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The increment (++) and decrement (--) operators should not be mixed with other operators in an expression]]></description>
	</rule>
	<rule key="MISRA2008-5_2_11" priority="MAJOR">
		<name><![CDATA[The comma operator, &amp;&amp; operator and the || operator shall not be overloaded]]></name>
		<configKey><![CDATA[The comma operator, &amp;&amp; operator and the || operator shall not be overloaded]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The comma operator, &amp;&amp; operator and the || operator shall not be overloaded]]></description>
	</rule>
	<rule key="MISRA2008-5_2_12" priority="MAJOR">
		<name><![CDATA[An identifier with array type passed as a function argument shall not decay to a pointer]]></name>
		<configKey><![CDATA[An identifier with array type passed as a function argument shall not decay to a pointer]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An identifier with array type passed as a function argument shall not decay to a pointer]]></description>
	</rule>
	<rule key="MISRA2008-5_2_2" priority="MAJOR">
		<name><![CDATA[A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast]]></name>
		<configKey><![CDATA[A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast]]></description>
	</rule>
	<rule key="MISRA2008-5_2_3" priority="MINOR">
		<name><![CDATA[Casts from a base class to a derived class should not be performed on polymorphic types]]></name>
		<configKey><![CDATA[Casts from a base class to a derived class should not be performed on polymorphic types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Casts from a base class to a derived class should not be performed on polymorphic types]]></description>
	</rule>
	<rule key="MISRA2008-5_2_4" priority="MAJOR">
		<name><![CDATA[C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used]]></name>
		<configKey><![CDATA[C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-5_2_5" priority="MAJOR">
		<name><![CDATA[A cast shall not remove any const or volatile qualification from the type of a pointer or reference]]></name>
		<configKey><![CDATA[A cast shall not remove any const or volatile qualification from the type of a pointer or reference]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A cast shall not remove any const or volatile qualification from the type of a pointer or reference]]></description>
	</rule>
	<rule key="MISRA2008-5_2_6" priority="MAJOR">
		<name><![CDATA[A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type]]></name>
		<configKey><![CDATA[A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type]]></description>
	</rule>
	<rule key="MISRA2008-5_2_7" priority="MAJOR">
		<name><![CDATA[An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly]]></name>
		<configKey><![CDATA[An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly]]></description>
	</rule>
	<rule key="MISRA2008-5_2_8" priority="MAJOR">
		<name><![CDATA[An object with integer type or pointer to void type shall not be converted to an object with pointer type]]></name>
		<configKey><![CDATA[An object with integer type or pointer to void type shall not be converted to an object with pointer type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An object with integer type or pointer to void type shall not be converted to an object with pointer type]]></description>
	</rule>
	<rule key="MISRA2008-5_2_9" priority="MINOR">
		<name><![CDATA[A cast should not convert a pointer type to an integral type]]></name>
		<configKey><![CDATA[A cast should not convert a pointer type to an integral type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A cast should not convert a pointer type to an integral type]]></description>
	</rule>
	<rule key="MISRA2008-5_3_1" priority="MAJOR">
		<name><![CDATA[Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool]]></name>
		<configKey><![CDATA[Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool]]></description>
	</rule>
	<rule key="MISRA2008-5_3_2" priority="MAJOR">
		<name><![CDATA[The unary minus operator shall not be applied to an expression whose underlying type is unsigned]]></name>
		<configKey><![CDATA[The unary minus operator shall not be applied to an expression whose underlying type is unsigned]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The unary minus operator shall not be applied to an expression whose underlying type is unsigned]]></description>
	</rule>
	<rule key="MISRA2008-5_3_3" priority="MAJOR">
		<name><![CDATA[The unary &amp; operator shall not be overloaded]]></name>
		<configKey><![CDATA[The unary &amp; operator shall not be overloaded]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The unary &amp; operator shall not be overloaded]]></description>
	</rule>
	<rule key="MISRA2008-5_3_4" priority="MAJOR">
		<name><![CDATA[Evaluation of the operand to the sizeof operator shall not contain side effects]]></name>
		<configKey><![CDATA[Evaluation of the operand to the sizeof operator shall not contain side effects]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Evaluation of the operand to the sizeof operator shall not contain side effects]]></description>
	</rule>
	<rule key="MISRA2008-5_8_1" priority="MAJOR">
		<name><![CDATA[The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand]]></name>
		<configKey><![CDATA[The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand]]></description>
	</rule>
	<rule key="MISRA2008-6_2_1" priority="MAJOR">
		<name><![CDATA[Assignment operators shall not be used in sub-expressions]]></name>
		<configKey><![CDATA[Assignment operators shall not be used in sub-expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Assignment operators shall not be used in sub-expressions]]></description>
	</rule>
	<rule key="MISRA2008-6_2_2" priority="MAJOR">
		<name><![CDATA[Floating-point expressions shall not be directly or indirectly tested for equality or inequality]]></name>
		<configKey><![CDATA[Floating-point expressions shall not be directly or indirectly tested for equality or inequality]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Floating-point expressions shall not be directly or indirectly tested for equality or inequality]]></description>
	</rule>
	<rule key="MISRA2008-6_2_3" priority="MAJOR">
		<name><![CDATA[Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space ]]></name>
		<configKey><![CDATA[Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space ]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space ]]></description>
	</rule>
	<rule key="MISRA2008-6_3_1" priority="MAJOR">
		<name><![CDATA[The statement forming the body of a switch, while, do  while or for statement shall be a compound statement]]></name>
		<configKey><![CDATA[The statement forming the body of a switch, while, do  while or for statement shall be a compound statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The statement forming the body of a switch, while, do  while or for statement shall be a compound statement]]></description>
	</rule>
	<rule key="MISRA2008-6_4_1" priority="MAJOR">
		<name><![CDATA[An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement]]></name>
		<configKey><![CDATA[An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement]]></description>
	</rule>
	<rule key="MISRA2008-6_4_2" priority="MAJOR">
		<name><![CDATA[All if ... else if constructs shall be terminated with an else clause]]></name>
		<configKey><![CDATA[All if ... else if constructs shall be terminated with an else clause]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All if ... else if constructs shall be terminated with an else clause]]></description>
	</rule>
	<rule key="MISRA2008-6_4_3_a" priority="MAJOR">
		<name><![CDATA[A switch statement shall be a well-formed switch statement]]></name>
		<configKey><![CDATA[A switch statement shall be a well-formed switch statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A switch statement shall be a well-formed switch statement]]></description>
	</rule>
	<rule key="MISRA2008-6_4_3_b" priority="MAJOR">
		<name><![CDATA[A switch statement shall be a well-formed switch statement]]></name>
		<configKey><![CDATA[A switch statement shall be a well-formed switch statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A switch statement shall be a well-formed switch statement]]></description>
	</rule>
	<rule key="MISRA2008-6_4_3_c" priority="MAJOR">
		<name><![CDATA[A switch statement shall be a well-formed switch statement]]></name>
		<configKey><![CDATA[A switch statement shall be a well-formed switch statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A switch statement shall be a well-formed switch statement]]></description>
	</rule>
	<rule key="MISRA2008-6_4_3_d" priority="MAJOR">
		<name><![CDATA[A switch statement shall be a well-formed switch statement]]></name>
		<configKey><![CDATA[A switch statement shall be a well-formed switch statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A switch statement shall be a well-formed switch statement]]></description>
	</rule>
	<rule key="MISRA2008-6_4_3_e" priority="MAJOR">
		<name><![CDATA[A switch statement shall be a well-formed switch statement]]></name>
		<configKey><![CDATA[A switch statement shall be a well-formed switch statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A switch statement shall be a well-formed switch statement]]></description>
	</rule>
	<rule key="MISRA2008-6_4_4" priority="MAJOR">
		<name><![CDATA[A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement]]></name>
		<configKey><![CDATA[A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement]]></description>
	</rule>
	<rule key="MISRA2008-6_4_5" priority="MAJOR">
		<name><![CDATA[An unconditional throw or break statement shall terminate every non-empty switch-clause]]></name>
		<configKey><![CDATA[An unconditional throw or break statement shall terminate every non-empty switch-clause]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An unconditional throw or break statement shall terminate every non-empty switch-clause]]></description>
	</rule>
	<rule key="MISRA2008-6_4_6" priority="MAJOR">
		<name><![CDATA[The final clause of a switch statement shall be the default-clause]]></name>
		<configKey><![CDATA[The final clause of a switch statement shall be the default-clause]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The final clause of a switch statement shall be the default-clause]]></description>
	</rule>
	<rule key="MISRA2008-6_4_7" priority="MAJOR">
		<name><![CDATA[The condition of a switch statement shall not have bool type]]></name>
		<configKey><![CDATA[The condition of a switch statement shall not have bool type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The condition of a switch statement shall not have bool type]]></description>
	</rule>
	<rule key="MISRA2008-6_4_8" priority="MAJOR">
		<name><![CDATA[Every switch statement shall have at least one case-clause]]></name>
		<configKey><![CDATA[Every switch statement shall have at least one case-clause]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Every switch statement shall have at least one case-clause]]></description>
	</rule>
	<rule key="MISRA2008-6_5_1" priority="MAJOR">
		<name><![CDATA[A for loop shall contain a single loop-counter which shall not have floating type]]></name>
		<configKey><![CDATA[A for loop shall contain a single loop-counter which shall not have floating type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A for loop shall contain a single loop-counter which shall not have floating type]]></description>
	</rule>
	<rule key="MISRA2008-6_5_2" priority="MAJOR">
		<name><![CDATA[If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, &gt; or &gt;=]]></name>
		<configKey><![CDATA[If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, &gt; or &gt;=]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, &gt; or &gt;=]]></description>
	</rule>
	<rule key="MISRA2008-6_5_3" priority="MAJOR">
		<name><![CDATA[The loop-counter shall not be modified within condition or statement]]></name>
		<configKey><![CDATA[The loop-counter shall not be modified within condition or statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The loop-counter shall not be modified within condition or statement]]></description>
	</rule>
	<rule key="MISRA2008-6_5_4" priority="MAJOR">
		<name><![CDATA[The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop]]></name>
		<configKey><![CDATA[The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop]]></description>
	</rule>
	<rule key="MISRA2008-6_5_5" priority="MAJOR">
		<name><![CDATA[A loop-control-variable other than the loop-counter shall not be modified within condition or expression]]></name>
		<configKey><![CDATA[A loop-control-variable other than the loop-counter shall not be modified within condition or expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A loop-control-variable other than the loop-counter shall not be modified within condition or expression]]></description>
	</rule>
	<rule key="MISRA2008-6_5_6" priority="MAJOR">
		<name><![CDATA[A loop-control-variable other than the loop-counter which is modified in statement within a body of the loop shall have type bool]]></name>
		<configKey><![CDATA[A loop-control-variable other than the loop-counter which is modified in statement within a body of the loop shall have type bool]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A loop-control-variable other than the loop-counter which is modified in statement within a body of the loop shall have type bool]]></description>
	</rule>
	<rule key="MISRA2008-6_6_1" priority="MAJOR">
		<name><![CDATA[Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement]]></name>
		<configKey><![CDATA[Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement]]></description>
	</rule>
	<rule key="MISRA2008-6_6_2" priority="MAJOR">
		<name><![CDATA[The goto statement shall jump to a label declared later in the same function body]]></name>
		<configKey><![CDATA[The goto statement shall jump to a label declared later in the same function body]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The goto statement shall jump to a label declared later in the same function body]]></description>
	</rule>
	<rule key="MISRA2008-6_6_3" priority="MAJOR">
		<name><![CDATA[The continue statement shall only be used within a well-formed for loop]]></name>
		<configKey><![CDATA[The continue statement shall only be used within a well-formed for loop]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The continue statement shall only be used within a well-formed for loop]]></description>
	</rule>
	<rule key="MISRA2008-6_6_4" priority="MAJOR">
		<name><![CDATA[For any iteration statement there shall be no more than one break or goto statement used for loop termination]]></name>
		<configKey><![CDATA[For any iteration statement there shall be no more than one break or goto statement used for loop termination]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[For any iteration statement there shall be no more than one break or goto statement used for loop termination]]></description>
	</rule>
	<rule key="MISRA2008-6_6_5" priority="MAJOR">
		<name><![CDATA[A function shall have a single point of exit at the end of the function]]></name>
		<configKey><![CDATA[A function shall have a single point of exit at the end of the function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A function shall have a single point of exit at the end of the function]]></description>
	</rule>
	<rule key="MISRA2008-7_1_1" priority="MAJOR">
		<name><![CDATA[A variable which is not modified shall be const qualified]]></name>
		<configKey><![CDATA[A variable which is not modified shall be const qualified]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A variable which is not modified shall be const qualified]]></description>
	</rule>
	<rule key="MISRA2008-7_1_2_a" priority="MAJOR">
		<name><![CDATA[A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified]]></name>
		<configKey><![CDATA[A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified]]></description>
	</rule>
	<rule key="MISRA2008-7_1_2_b" priority="MAJOR">
		<name><![CDATA[A reference parameter in a function shall be declared as reference to const if the corresponding object is not modified]]></name>
		<configKey><![CDATA[A reference parameter in a function shall be declared as reference to const if the corresponding object is not modified]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A reference parameter in a function shall be declared as reference to const if the corresponding object is not modified]]></description>
	</rule>
	<rule key="MISRA2008-7_3_1" priority="MAJOR">
		<name><![CDATA[The global namespace shall only contain main, namespace declarations and extern "C" declarations]]></name>
		<configKey><![CDATA[The global namespace shall only contain main, namespace declarations and extern "C" declarations]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The global namespace shall only contain main, namespace declarations and extern "C" declarations]]></description>
	</rule>
	<rule key="MISRA2008-7_3_2" priority="MAJOR">
		<name><![CDATA[The identifier main shall not be used for a function other than the global function main]]></name>
		<configKey><![CDATA[The identifier main shall not be used for a function other than the global function main]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The identifier main shall not be used for a function other than the global function main]]></description>
	</rule>
	<rule key="MISRA2008-7_3_3" priority="MAJOR">
		<name><![CDATA[There shall be no unnamed namespaces in header files]]></name>
		<configKey><![CDATA[There shall be no unnamed namespaces in header files]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unnamed namespaces in header files]]></description>
	</rule>
	<rule key="MISRA2008-7_3_4" priority="MAJOR">
		<name><![CDATA[using-directives shall not be used]]></name>
		<configKey><![CDATA[using-directives shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[using-directives shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-7_3_5" priority="MAJOR">
		<name><![CDATA[Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier]]></name>
		<configKey><![CDATA[Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier]]></description>
	</rule>
	<rule key="MISRA2008-7_4_1" priority="MAJOR">
		<name><![CDATA[All usage of assembler shall be documented]]></name>
		<configKey><![CDATA[All usage of assembler shall be documented]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All usage of assembler shall be documented]]></description>
	</rule>
	<rule key="MISRA2008-7_4_2" priority="MAJOR">
		<name><![CDATA[Assembler instructions shall only be introduced using the asm declaration]]></name>
		<configKey><![CDATA[Assembler instructions shall only be introduced using the asm declaration]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Assembler instructions shall only be introduced using the asm declaration]]></description>
	</rule>
	<rule key="MISRA2008-7_4_3" priority="MAJOR">
		<name><![CDATA[Assembly language shall be encapsulated and isolated]]></name>
		<configKey><![CDATA[Assembly language shall be encapsulated and isolated]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Assembly language shall be encapsulated and isolated]]></description>
	</rule>
	<rule key="MISRA2008-7_5_1" priority="MAJOR">
		<name><![CDATA[A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function]]></name>
		<configKey><![CDATA[A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function]]></description>
	</rule>
	<rule key="MISRA2008-7_5_2" priority="MAJOR">
		<name><![CDATA[The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist]]></name>
		<configKey><![CDATA[The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist]]></description>
	</rule>
	<rule key="MISRA2008-7_5_3" priority="MAJOR">
		<name><![CDATA[A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference]]></name>
		<configKey><![CDATA[A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference]]></description>
	</rule>
	<rule key="MISRA2008-7_5_4" priority="MINOR">
		<name><![CDATA[Functions should not call themselves, either directly or indirectly]]></name>
		<configKey><![CDATA[Functions should not call themselves, either directly or indirectly]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Functions should not call themselves, either directly or indirectly]]></description>
	</rule>
	<rule key="MISRA2008-8_0_1" priority="MAJOR">
		<name><![CDATA[An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively]]></name>
		<configKey><![CDATA[An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively]]></description>
	</rule>
	<rule key="MISRA2008-8_3_1" priority="MAJOR">
		<name><![CDATA[Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments]]></name>
		<configKey><![CDATA[Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments]]></description>
	</rule>
	<rule key="MISRA2008-8_4_1" priority="MAJOR">
		<name><![CDATA[Functions shall not be defined using the ellipsis notation]]></name>
		<configKey><![CDATA[Functions shall not be defined using the ellipsis notation]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Functions shall not be defined using the ellipsis notation]]></description>
	</rule>
	<rule key="MISRA2008-8_4_2" priority="MAJOR">
		<name><![CDATA[The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration]]></name>
		<configKey><![CDATA[The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration]]></description>
	</rule>
	<rule key="MISRA2008-8_4_3" priority="MAJOR">
		<name><![CDATA[All exit paths from a function with non-void return type shall have an explicit return statement with an expression]]></name>
		<configKey><![CDATA[All exit paths from a function with non-void return type shall have an explicit return statement with an expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All exit paths from a function with non-void return type shall have an explicit return statement with an expression]]></description>
	</rule>
	<rule key="MISRA2008-8_5_1" priority="MAJOR">
		<name><![CDATA[All variables shall have a defined value before they are used]]></name>
		<configKey><![CDATA[All variables shall have a defined value before they are used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All variables shall have a defined value before they are used]]></description>
	</rule>
	<rule key="MISRA2008-8_5_2" priority="MAJOR">
		<name><![CDATA[Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures]]></name>
		<configKey><![CDATA[Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures]]></description>
	</rule>
	<rule key="MISRA2008-8_5_3" priority="MAJOR">
		<name><![CDATA[In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized]]></name>
		<configKey><![CDATA[In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized]]></description>
	</rule>
	<rule key="MISRA2008-9_3_1" priority="MAJOR">
		<name><![CDATA[const member functions shall not return non-const pointers or references to class-data]]></name>
		<configKey><![CDATA[const member functions shall not return non-const pointers or references to class-data]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[const member functions shall not return non-const pointers or references to class-data]]></description>
	</rule>
	<rule key="MISRA2008-9_3_2_a" priority="MAJOR">
		<name><![CDATA[Protected member functions shall not return non-const handles to class-data]]></name>
		<configKey><![CDATA[Protected member functions shall not return non-const handles to class-data]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Protected member functions shall not return non-const handles to class-data]]></description>
	</rule>
	<rule key="MISRA2008-9_3_2_b" priority="MAJOR">
		<name><![CDATA[Public member functions shall not return non-const handles to class-data]]></name>
		<configKey><![CDATA[Public member functions shall not return non-const handles to class-data]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Public member functions shall not return non-const handles to class-data]]></description>
	</rule>
	<rule key="MISRA2008-9_3_3" priority="MAJOR">
		<name><![CDATA[If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const]]></name>
		<configKey><![CDATA[If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const]]></description>
	</rule>
	<rule key="MISRA2008-9_5_1" priority="MAJOR">
		<name><![CDATA[Unions shall not be used]]></name>
		<configKey><![CDATA[Unions shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Unions shall not be used]]></description>
	</rule>
	<rule key="MISRA2008-9_6_2" priority="MAJOR">
		<name><![CDATA[Bit-fields shall be either bool type or an explicitly unsigned or signed integral type]]></name>
		<configKey><![CDATA[Bit-fields shall be either bool type or an explicitly unsigned or signed integral type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Bit-fields shall be either bool type or an explicitly unsigned or signed integral type]]></description>
	</rule>
	<rule key="MISRA2008-9_6_3" priority="MAJOR">
		<name><![CDATA[Bit-fields shall not have enum type]]></name>
		<configKey><![CDATA[Bit-fields shall not have enum type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Bit-fields shall not have enum type]]></description>
	</rule>
	<rule key="MISRA2008-9_6_4" priority="MAJOR">
		<name><![CDATA[Named bit-fields with signed integer type shall have a length of more than one bit]]></name>
		<configKey><![CDATA[Named bit-fields with signed integer type shall have a length of more than one bit]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Named bit-fields with signed integer type shall have a length of more than one bit]]></description>
	</rule>
	<rule key="MRM-01" priority="BLOCKER">
		<name><![CDATA[Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined]]></name>
		<configKey><![CDATA[Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined]]></description>
	</rule>
	<rule key="MRM-02" priority="MAJOR">
		<name><![CDATA[Do not allocate more than one resource in a single statement]]></name>
		<configKey><![CDATA[Do not allocate more than one resource in a single statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not allocate more than one resource in a single statement]]></description>
	</rule>
	<rule key="MRM-04" priority="MAJOR">
		<name><![CDATA[All classes should contain the assignment operator or appropriate comment]]></name>
		<configKey><![CDATA[All classes should contain the assignment operator or appropriate comment]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All classes should contain the assignment operator or appropriate comment]]></description>
	</rule>
	<rule key="MRM-05" priority="MAJOR">
		<name><![CDATA[All classes should contain the copy constructor or appropriate comment]]></name>
		<configKey><![CDATA[All classes should contain the copy constructor or appropriate comment]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All classes should contain the copy constructor or appropriate comment]]></description>
	</rule>
	<rule key="MRM-06" priority="BLOCKER">
		<name><![CDATA[Use the same form in corresponding calls to new/malloc and delete/free]]></name>
		<configKey><![CDATA[Use the same form in corresponding calls to new/malloc and delete/free]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use the same form in corresponding calls to new/malloc and delete/free]]></description>
	</rule>
	<rule key="MRM-07" priority="MAJOR">
		<name><![CDATA[Don't memcpy or memcmp non-PODs]]></name>
		<configKey><![CDATA[Don't memcpy or memcmp non-PODs]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't memcpy or memcmp non-PODs]]></description>
	</rule>
	<rule key="MRM-08" priority="BLOCKER">
		<name><![CDATA[Do not invoke malloc/realloc for objects having constructors]]></name>
		<configKey><![CDATA[Do not invoke malloc/realloc for objects having constructors]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not invoke malloc/realloc for objects having constructors]]></description>
	</rule>
	<rule key="MRM-09" priority="MAJOR">
		<name><![CDATA[Always assign a new value to a pointer that points to deallocated memory]]></name>
		<configKey><![CDATA[Always assign a new value to a pointer that points to deallocated memory]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Always assign a new value to a pointer that points to deallocated memory]]></description>
	</rule>
	<rule key="MRM-10" priority="MAJOR">
		<name><![CDATA[Always assign a new value to a pointer that points to deallocated memory]]></name>
		<configKey><![CDATA[Always assign a new value to a pointer that points to deallocated memory]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Always assign a new value to a pointer that points to deallocated memory]]></description>
	</rule>
	<rule key="MRM-11" priority="MAJOR">
		<name><![CDATA[Always assign a new value to a pointer that points to deallocated memory]]></name>
		<configKey><![CDATA[Always assign a new value to a pointer that points to deallocated memory]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Always assign a new value to a pointer that points to deallocated memory]]></description>
	</rule>
	<rule key="MRM-12" priority="MAJOR">
		<name><![CDATA[Adhere to convention when writing new and delete]]></name>
		<configKey><![CDATA[Adhere to convention when writing new and delete]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Adhere to convention when writing new and delete]]></description>
	</rule>
	<rule key="MRM-13" priority="MAJOR">
		<name><![CDATA[Adhere to convention when writing new]]></name>
		<configKey><![CDATA[Adhere to convention when writing new]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Adhere to convention when writing new]]></description>
	</rule>
	<rule key="MRM-14" priority="MAJOR">
		<name><![CDATA[If a class defines any overload of operator new, it should provide overloads of all three of plain, in-place, and non-throwing operator new]]></name>
		<configKey><![CDATA[If a class defines any overload of operator new, it should provide overloads of all three of plain, in-place, and non-throwing operator new]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If a class defines any overload of operator new, it should provide overloads of all three of plain, in-place, and non-throwing operator new]]></description>
	</rule>
	<rule key="MRM-15" priority="MAJOR">
		<name><![CDATA[If a class defines any overload of operator new[], it should provide overloads of all three of plain, in-place, and non-throwing operator new[]]]></name>
		<configKey><![CDATA[If a class defines any overload of operator new[], it should provide overloads of all three of plain, in-place, and non-throwing operator new[]]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If a class defines any overload of operator new[], it should provide overloads of all three of plain, in-place, and non-throwing operator new[]]]></description>
	</rule>
	<rule key="MRM-16" priority="MAJOR">
		<name><![CDATA[If a class defines any overload of operator delete, it should provide overloads of all three of plain, in-place, and non-throwing operator delete]]></name>
		<configKey><![CDATA[If a class defines any overload of operator delete, it should provide overloads of all three of plain, in-place, and non-throwing operator delete]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If a class defines any overload of operator delete, it should provide overloads of all three of plain, in-place, and non-throwing operator delete]]></description>
	</rule>
	<rule key="MRM-17" priority="MAJOR">
		<name><![CDATA[If a class defines any overload of operator delete[], it should provide overloads of all three of plain, in-place, and non-throwing operator delete[]]]></name>
		<configKey><![CDATA[If a class defines any overload of operator delete[], it should provide overloads of all three of plain, in-place, and non-throwing operator delete[]]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If a class defines any overload of operator delete[], it should provide overloads of all three of plain, in-place, and non-throwing operator delete[]]]></description>
	</rule>
	<rule key="MRM-18" priority="MAJOR">
		<name><![CDATA[Do not allocate memory and expect that someone else will deallocate it later]]></name>
		<configKey><![CDATA[Do not allocate memory and expect that someone else will deallocate it later]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not allocate memory and expect that someone else will deallocate it later]]></description>
	</rule>
	<rule key="MRM-19" priority="MAJOR">
		<name><![CDATA[Do not allocate memory and expect that someone else will deallocate it later]]></name>
		<configKey><![CDATA[Do not allocate memory and expect that someone else will deallocate it later]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not allocate memory and expect that someone else will deallocate it later]]></description>
	</rule>
	<rule key="MRM-20" priority="MAJOR">
		<name><![CDATA[Do not allocate memory and expect that someone else will deallocate it later]]></name>
		<configKey><![CDATA[Do not allocate memory and expect that someone else will deallocate it later]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not allocate memory and expect that someone else will deallocate it later]]></description>
	</rule>
	<rule key="MRM-21" priority="MAJOR">
		<name><![CDATA[Use objects to manage resources]]></name>
		<configKey><![CDATA[Use objects to manage resources]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use objects to manage resources]]></description>
	</rule>
	<rule key="MRM-22" priority="MAJOR">
		<name><![CDATA[Use objects to manage resources]]></name>
		<configKey><![CDATA[Use objects to manage resources]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use objects to manage resources]]></description>
	</rule>
	<rule key="MRM-23" priority="CRITICAL">
		<name><![CDATA[Never return a dereferenced local pointer initialized by new in this function scope]]></name>
		<configKey><![CDATA[Never return a dereferenced local pointer initialized by new in this function scope]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Never return a dereferenced local pointer initialized by new in this function scope]]></description>
	</rule>
	<rule key="MRM-24" priority="BLOCKER">
		<name><![CDATA[Never return a reference to a local object]]></name>
		<configKey><![CDATA[Never return a reference to a local object]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Never return a reference to a local object]]></description>
	</rule>
	<rule key="MRM-25" priority="MAJOR">
		<name><![CDATA[Store newed objects in smart pointers in standalone statements]]></name>
		<configKey><![CDATA[Store newed objects in smart pointers in standalone statements]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Store newed objects in smart pointers in standalone statements]]></description>
	</rule>
	<rule key="MRM-26" priority="MAJOR">
		<name><![CDATA[Write operator delete if you write operator new]]></name>
		<configKey><![CDATA[Write operator delete if you write operator new]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Write operator delete if you write operator new]]></description>
	</rule>
	<rule key="MRM-27" priority="MAJOR">
		<name><![CDATA[Write operator delete[] if you write operator new[]]]></name>
		<configKey><![CDATA[Write operator delete[] if you write operator new[]]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Write operator delete[] if you write operator new[]]]></description>
	</rule>
	<rule key="MRM-28" priority="MAJOR">
		<name><![CDATA[Always provide new and delete together]]></name>
		<configKey><![CDATA[Always provide new and delete together]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Always provide new and delete together]]></description>
	</rule>
	<rule key="MRM-29" priority="MAJOR">
		<name><![CDATA[Always provide new[] and delete[] together]]></name>
		<configKey><![CDATA[Always provide new[] and delete[] together]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Always provide new[] and delete[] together]]></description>
	</rule>
	<rule key="MRM-30" priority="MAJOR">
		<name><![CDATA[Use allocation by declaration rather than by new or malloc]]></name>
		<configKey><![CDATA[Use allocation by declaration rather than by new or malloc]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use allocation by declaration rather than by new or malloc]]></description>
	</rule>
	<rule key="MRM-31" priority="MAJOR">
		<name><![CDATA[Freed memory shouldn't be accessed under any circumstances. Destructor should not be called manually]]></name>
		<configKey><![CDATA[Freed memory shouldn't be accessed under any circumstances. Destructor should not be called manually]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Freed memory shouldn't be accessed under any circumstances. Destructor should not be called manually]]></description>
	</rule>
	<rule key="MRM-32" priority="BLOCKER">
		<name><![CDATA[Avoid hiding the global new]]></name>
		<configKey><![CDATA[Avoid hiding the global new]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid hiding the global new]]></description>
	</rule>
	<rule key="MRM-33" priority="CRITICAL">
		<name><![CDATA[Call delete on pointer members in destructors]]></name>
		<configKey><![CDATA[Call delete on pointer members in destructors]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Call delete on pointer members in destructors]]></description>
	</rule>
	<rule key="MRM-34" priority="MAJOR">
		<name><![CDATA[Check the return value of new]]></name>
		<configKey><![CDATA[Check the return value of new]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Check the return value of new]]></description>
	</rule>
	<rule key="MRM-35" priority="MAJOR">
		<name><![CDATA[Never provide brackets ([]) for delete when deallocating non-arrays]]></name>
		<configKey><![CDATA[Never provide brackets ([]) for delete when deallocating non-arrays]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Never provide brackets ([]) for delete when deallocating non-arrays]]></description>
	</rule>
	<rule key="MRM-36" priority="MAJOR">
		<name><![CDATA[Always provide empty brackets ([]) for delete when deallocating arrays]]></name>
		<configKey><![CDATA[Always provide empty brackets ([]) for delete when deallocating arrays]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Always provide empty brackets ([]) for delete when deallocating arrays]]></description>
	</rule>
	<rule key="MRM-37" priority="BLOCKER">
		<name><![CDATA[Declare an assignment operator for classes with dynamically allocated memory]]></name>
		<configKey><![CDATA[Declare an assignment operator for classes with dynamically allocated memory]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Declare an assignment operator for classes with dynamically allocated memory]]></description>
	</rule>
	<rule key="MRM-38" priority="BLOCKER">
		<name><![CDATA[Declare a copy constructor for classes with dynamically allocated memory]]></name>
		<configKey><![CDATA[Declare a copy constructor for classes with dynamically allocated memory]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Declare a copy constructor for classes with dynamically allocated memory]]></description>
	</rule>
	<rule key="MRM-39" priority="CRITICAL">
		<name><![CDATA[Provide error handling for file opening errors right next to the call to fopen]]></name>
		<configKey><![CDATA[Provide error handling for file opening errors right next to the call to fopen]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Provide error handling for file opening errors right next to the call to fopen]]></description>
	</rule>
	<rule key="MRM-40" priority="MAJOR">
		<name><![CDATA[Copy and destroy consistently]]></name>
		<configKey><![CDATA[Copy and destroy consistently]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Copy and destroy consistently]]></description>
	</rule>
	<rule key="MRM-41" priority="CRITICAL">
		<name><![CDATA[A copy constructor shall copy all data members and bases]]></name>
		<configKey><![CDATA[A copy constructor shall copy all data members and bases]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A copy constructor shall copy all data members and bases]]></description>
	</rule>
	<rule key="MRM-42" priority="CRITICAL">
		<name><![CDATA[Call fclose() on pointer member in destructor if the pointer was used to open a file]]></name>
		<configKey><![CDATA[Call fclose() on pointer member in destructor if the pointer was used to open a file]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Call fclose() on pointer member in destructor if the pointer was used to open a file]]></description>
	</rule>
	<rule key="MRM-43" priority="CRITICAL">
		<name><![CDATA[The assignment operator must assign all members, including those in base classes]]></name>
		<configKey><![CDATA[The assignment operator must assign all members, including those in base classes]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The assignment operator must assign all members, including those in base classes]]></description>
	</rule>
	<rule key="MRM-44" priority="CRITICAL">
		<name><![CDATA[Avoid passing address of auto variable into caller space]]></name>
		<configKey><![CDATA[Avoid passing address of auto variable into caller space]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid passing address of auto variable into caller space]]></description>
	</rule>
	<rule key="MRM-45" priority="MAJOR">
		<name><![CDATA[Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function]]></name>
		<configKey><![CDATA[Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function]]></description>
	</rule>
	<rule key="MRM-46" priority="MAJOR">
		<name><![CDATA[Do not use calloc, malloc, realloc and free functions]]></name>
		<configKey><![CDATA[Do not use calloc, malloc, realloc and free functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use calloc, malloc, realloc and free functions]]></description>
	</rule>
	<rule key="MRM-47" priority="MAJOR">
		<name><![CDATA[Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment]]></name>
		<configKey><![CDATA[Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment]]></description>
	</rule>
	<rule key="MRM-48" priority="MAJOR">
		<name><![CDATA[Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment]]></name>
		<configKey><![CDATA[Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment]]></description>
	</rule>
	<rule key="NAMING-01" priority="MAJOR">
		<name><![CDATA[All "#define" constants shall be in uppercase]]></name>
		<configKey><![CDATA[All "#define" constants shall be in uppercase]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All "#define" constants shall be in uppercase]]></description>
	</rule>
	<rule key="NAMING-02" priority="MAJOR">
		<name><![CDATA[In an enumerated list, list members (elements) shall be in uppercase and names or tags for the list shall be in lowercase]]></name>
		<configKey><![CDATA[In an enumerated list, list members (elements) shall be in uppercase and names or tags for the list shall be in lowercase]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[In an enumerated list, list members (elements) shall be in uppercase and names or tags for the list shall be in lowercase]]></description>
	</rule>
	<rule key="NAMING-03" priority="MAJOR">
		<name><![CDATA[Use lowercase for file names]]></name>
		<configKey><![CDATA[Use lowercase for file names]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use lowercase for file names]]></description>
	</rule>
	<rule key="NAMING-04" priority="MAJOR">
		<name><![CDATA[Global prefixes should only be used for global variables]]></name>
		<configKey><![CDATA[Global prefixes should only be used for global variables]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Global prefixes should only be used for global variables]]></description>
	</rule>
	<rule key="NAMING-05" priority="MAJOR">
		<name><![CDATA[Begin local variable names with a lowercase letters]]></name>
		<configKey><![CDATA[Begin local variable names with a lowercase letters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin local variable names with a lowercase letters]]></description>
	</rule>
	<rule key="NAMING-06" priority="MAJOR">
		<name><![CDATA[Begin global variable names with a lowercase letters]]></name>
		<configKey><![CDATA[Begin global variable names with a lowercase letters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin global variable names with a lowercase letters]]></description>
	</rule>
	<rule key="NAMING-07" priority="MAJOR">
		<name><![CDATA[Begin member variable names with a lowercase letters]]></name>
		<configKey><![CDATA[Begin member variable names with a lowercase letters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin member variable names with a lowercase letters]]></description>
	</rule>
	<rule key="NAMING-08" priority="MAJOR">
		<name><![CDATA[Begin all boolean type variables with 'b']]></name>
		<configKey><![CDATA[Begin all boolean type variables with 'b']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin all boolean type variables with 'b']]></description>
	</rule>
	<rule key="NAMING-09" priority="MAJOR">
		<name><![CDATA[Begin class, struct, union, enum, and typedef names with an uppercase letter]]></name>
		<configKey><![CDATA[Begin class, struct, union, enum, and typedef names with an uppercase letter]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin class, struct, union, enum, and typedef names with an uppercase letter]]></description>
	</rule>
	<rule key="NAMING-10" priority="MAJOR">
		<name><![CDATA[Class, struct, union, enum, and typedef names are to start with an uppercase letter]]></name>
		<configKey><![CDATA[Class, struct, union, enum, and typedef names are to start with an uppercase letter]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Class, struct, union, enum, and typedef names are to start with an uppercase letter]]></description>
	</rule>
	<rule key="NAMING-11" priority="MAJOR">
		<name><![CDATA[Enumerated type name shall begin with an uppercase letter prefixed by software element and suffixed by '_t']]></name>
		<configKey><![CDATA[Enumerated type name shall begin with an uppercase letter prefixed by software element and suffixed by '_t']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Enumerated type name shall begin with an uppercase letter prefixed by software element and suffixed by '_t']]></description>
	</rule>
	<rule key="NAMING-12" priority="MAJOR">
		<name><![CDATA[Struct type name shall begin with an uppercase letter prefixed by software element and suffixed by '_t']]></name>
		<configKey><![CDATA[Struct type name shall begin with an uppercase letter prefixed by software element and suffixed by '_t']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Struct type name shall begin with an uppercase letter prefixed by software element and suffixed by '_t']]></description>
	</rule>
	<rule key="NAMING-13" priority="MAJOR">
		<name><![CDATA[Begin constant variables with 'c']]></name>
		<configKey><![CDATA[Begin constant variables with 'c']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin constant variables with 'c']]></description>
	</rule>
	<rule key="NAMING-14" priority="MAJOR">
		<name><![CDATA[Begin class data member names with 'its']]></name>
		<configKey><![CDATA[Begin class data member names with 'its']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin class data member names with 'its']]></description>
	</rule>
	<rule key="NAMING-15" priority="MAJOR">
		<name><![CDATA[Begin all double type variable with 'd']]></name>
		<configKey><![CDATA[Begin all double type variable with 'd']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin all double type variable with 'd']]></description>
	</rule>
	<rule key="NAMING-16" priority="MAJOR">
		<name><![CDATA[Begin all float type variables with 'f']]></name>
		<configKey><![CDATA[Begin all float type variables with 'f']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin all float type variables with 'f']]></description>
	</rule>
	<rule key="NAMING-17" priority="MAJOR">
		<name><![CDATA[Begin all function names with uppercase letter]]></name>
		<configKey><![CDATA[Begin all function names with uppercase letter]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin all function names with uppercase letter]]></description>
	</rule>
	<rule key="NAMING-18" priority="MAJOR">
		<name><![CDATA[Begin global variable names with 'the']]></name>
		<configKey><![CDATA[Begin global variable names with 'the']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin global variable names with 'the']]></description>
	</rule>
	<rule key="NAMING-19" priority="MAJOR">
		<name><![CDATA[Begin all integer type variable with 'i']]></name>
		<configKey><![CDATA[Begin all integer type variable with 'i']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin all integer type variable with 'i']]></description>
	</rule>
	<rule key="NAMING-20" priority="MAJOR">
		<name><![CDATA[Functions that begin with 'is' should return boolean values]]></name>
		<configKey><![CDATA[Functions that begin with 'is' should return boolean values]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Functions that begin with 'is' should return boolean values]]></description>
	</rule>
	<rule key="NAMING-21" priority="MAJOR">
		<name><![CDATA[Begin all long integer variables with 'li']]></name>
		<configKey><![CDATA[Begin all long integer variables with 'li']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin all long integer variables with 'li']]></description>
	</rule>
	<rule key="NAMING-22" priority="MAJOR">
		<name><![CDATA[Prefix a variable type 'pointer' with a 'p' character]]></name>
		<configKey><![CDATA[Prefix a variable type 'pointer' with a 'p' character]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefix a variable type 'pointer' with a 'p' character]]></description>
	</rule>
	<rule key="NAMING-23" priority="MAJOR">
		<name><![CDATA[Begin all short integer variables with 'si']]></name>
		<configKey><![CDATA[Begin all short integer variables with 'si']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin all short integer variables with 'si']]></description>
	</rule>
	<rule key="NAMING-24" priority="MAJOR">
		<name><![CDATA[Begin all signed character variables with 'c']]></name>
		<configKey><![CDATA[Begin all signed character variables with 'c']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin all signed character variables with 'c']]></description>
	</rule>
	<rule key="NAMING-25" priority="MAJOR">
		<name><![CDATA[Begin all terminated characters string variables with 'sz']]></name>
		<configKey><![CDATA[Begin all terminated characters string variables with 'sz']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin all terminated characters string variables with 'sz']]></description>
	</rule>
	<rule key="NAMING-26" priority="MAJOR">
		<name><![CDATA[Begin all unsigned character type variables with 'uc']]></name>
		<configKey><![CDATA[Begin all unsigned character type variables with 'uc']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin all unsigned character type variables with 'uc']]></description>
	</rule>
	<rule key="NAMING-27" priority="MAJOR">
		<name><![CDATA[Begin all unsigned integer type variables with 'ui']]></name>
		<configKey><![CDATA[Begin all unsigned integer type variables with 'ui']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Begin all unsigned integer type variables with 'ui']]></description>
	</rule>
	<rule key="NAMING-28" priority="MAJOR">
		<name><![CDATA[Use lowercase letters for structure and union member names]]></name>
		<configKey><![CDATA[Use lowercase letters for structure and union member names]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use lowercase letters for structure and union member names]]></description>
	</rule>
	<rule key="NAMING-29" priority="MAJOR">
		<name><![CDATA[Append names of non-scalar typedefs with "_t"]]></name>
		<configKey><![CDATA[Append names of non-scalar typedefs with "_t"]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Append names of non-scalar typedefs with "_t"]]></description>
	</rule>
	<rule key="NAMING-30" priority="MAJOR">
		<name><![CDATA[Use the ".c" extension for names of source files]]></name>
		<configKey><![CDATA[Use the ".c" extension for names of source files]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use the ".c" extension for names of source files]]></description>
	</rule>
	<rule key="NAMING-31" priority="MAJOR">
		<name><![CDATA[Do not use typenames that differ only by the use of uppercase and lowercase letters]]></name>
		<configKey><![CDATA[Do not use typenames that differ only by the use of uppercase and lowercase letters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use typenames that differ only by the use of uppercase and lowercase letters]]></description>
	</rule>
	<rule key="NAMING-32" priority="MAJOR">
		<name><![CDATA[An include file for a class should have a file name of the form &lt;class name&gt; + extension]]></name>
		<configKey><![CDATA[An include file for a class should have a file name of the form &lt;class name&gt; + extension]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An include file for a class should have a file name of the form &lt;class name&gt; + extension]]></description>
	</rule>
	<rule key="NAMING-33" priority="MAJOR">
		<name><![CDATA[Do not use identifiers which begin with one or two underscores (`_' or `__')]]></name>
		<configKey><![CDATA[Do not use identifiers which begin with one or two underscores (`_' or `__')]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use identifiers which begin with one or two underscores (`_' or `__')]]></description>
	</rule>
	<rule key="NAMING-34" priority="MAJOR">
		<name><![CDATA[Global function names should start with lowercase]]></name>
		<configKey><![CDATA[Global function names should start with lowercase]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Global function names should start with lowercase]]></description>
	</rule>
	<rule key="NAMING-35" priority="MAJOR">
		<name><![CDATA[Member function names should start with lowercase]]></name>
		<configKey><![CDATA[Member function names should start with lowercase]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Member function names should start with lowercase]]></description>
	</rule>
	<rule key="NAMING-36" priority="MAJOR">
		<name><![CDATA[Names of parameters in declaration and definition should be identical]]></name>
		<configKey><![CDATA[Names of parameters in declaration and definition should be identical]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Names of parameters in declaration and definition should be identical]]></description>
	</rule>
	<rule key="NAMING-37" priority="MAJOR">
		<name><![CDATA[Include files in C++ always have the file name extension ".hh"]]></name>
		<configKey><![CDATA[Include files in C++ always have the file name extension ".hh"]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Include files in C++ always have the file name extension ".hh"]]></description>
	</rule>
	<rule key="NAMING-38" priority="MAJOR">
		<name><![CDATA[Implementation files in C++ always have the file name extension ".cc"]]></name>
		<configKey><![CDATA[Implementation files in C++ always have the file name extension ".cc"]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Implementation files in C++ always have the file name extension ".cc"]]></description>
	</rule>
	<rule key="NAMING-39" priority="MAJOR">
		<name><![CDATA[Inline definition files always have the file name extension ".icc"]]></name>
		<configKey><![CDATA[Inline definition files always have the file name extension ".icc"]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Inline definition files always have the file name extension ".icc"]]></description>
	</rule>
	<rule key="NAMING-40" priority="MAJOR">
		<name><![CDATA[Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter]]></name>
		<configKey><![CDATA[Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter]]></description>
	</rule>
	<rule key="NAMING-41" priority="MAJOR">
		<name><![CDATA[Header files will always have a file name extension of ".h"]]></name>
		<configKey><![CDATA[Header files will always have a file name extension of ".h"]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Header files will always have a file name extension of ".h"]]></description>
	</rule>
	<rule key="NAMING-42" priority="CRITICAL">
		<name><![CDATA[Identifiers for constant and enumerator values shall be lowercase]]></name>
		<configKey><![CDATA[Identifiers for constant and enumerator values shall be lowercase]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Identifiers for constant and enumerator values shall be lowercase]]></description>
	</rule>
	<rule key="NAMING-43" priority="MAJOR">
		<name><![CDATA[Implementation files will always have a file name extension of ".cpp"]]></name>
		<configKey><![CDATA[Implementation files will always have a file name extension of ".cpp"]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Implementation files will always have a file name extension of ".cpp"]]></description>
	</rule>
	<rule key="NAMING-44" priority="MAJOR">
		<name><![CDATA[All letters contained in function and variable names will be composed entirely of lowercase letters]]></name>
		<configKey><![CDATA[All letters contained in function and variable names will be composed entirely of lowercase letters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All letters contained in function and variable names will be composed entirely of lowercase letters]]></description>
	</rule>
	<rule key="NAMING-45" priority="MAJOR">
		<name><![CDATA[Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers]]></name>
		<configKey><![CDATA[Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers]]></description>
	</rule>
	<rule key="NAMING-46" priority="MAJOR">
		<name><![CDATA[The ', ", /* or // characters shall not occur in a header file name]]></name>
		<configKey><![CDATA[The ', ", /* or // characters shall not occur in a header file name]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The ', ", /* or // characters shall not occur in a header file name]]></description>
	</rule>
	<rule key="NAMING-47" priority="MAJOR">
		<name><![CDATA[Different identifiers shall be typographically unambiguous]]></name>
		<configKey><![CDATA[Different identifiers shall be typographically unambiguous]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Different identifiers shall be typographically unambiguous]]></description>
	</rule>
	<rule key="NAMING-48" priority="MAJOR">
		<name><![CDATA[The \ character should not occur in a header file name]]></name>
		<configKey><![CDATA[The \ character should not occur in a header file name]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The \ character should not occur in a header file name]]></description>
	</rule>
	<rule key="NAMING-HN-01" priority="MAJOR">
		<name><![CDATA[Hungarian notation for array variables and parameters]]></name>
		<configKey><![CDATA[Hungarian notation for array variables and parameters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for array variables and parameters]]></description>
	</rule>
	<rule key="NAMING-HN-02" priority="MAJOR">
		<name><![CDATA[Hungarian notation for bool types]]></name>
		<configKey><![CDATA[Hungarian notation for bool types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for bool types]]></description>
	</rule>
	<rule key="NAMING-HN-03" priority="MAJOR">
		<name><![CDATA[Hungarian notation for bool pointer, array, or reference types]]></name>
		<configKey><![CDATA[Hungarian notation for bool pointer, array, or reference types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for bool pointer, array, or reference types]]></description>
	</rule>
	<rule key="NAMING-HN-04" priority="MAJOR">
		<name><![CDATA[Hungarian notation for byte types]]></name>
		<configKey><![CDATA[Hungarian notation for byte types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for byte types]]></description>
	</rule>
	<rule key="NAMING-HN-05" priority="MAJOR">
		<name><![CDATA[Hungarian notation for byte pointer, array, or reference types]]></name>
		<configKey><![CDATA[Hungarian notation for byte pointer, array, or reference types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for byte pointer, array, or reference types]]></description>
	</rule>
	<rule key="NAMING-HN-06" priority="MAJOR">
		<name><![CDATA[Hungarian notation for char types]]></name>
		<configKey><![CDATA[Hungarian notation for char types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for char types]]></description>
	</rule>
	<rule key="NAMING-HN-07" priority="MAJOR">
		<name><![CDATA[Hungarian notation for array of char types]]></name>
		<configKey><![CDATA[Hungarian notation for array of char types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for array of char types]]></description>
	</rule>
	<rule key="NAMING-HN-08" priority="MAJOR">
		<name><![CDATA[Hungarian notation for pointer, array, or reference to array of char types]]></name>
		<configKey><![CDATA[Hungarian notation for pointer, array, or reference to array of char types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for pointer, array, or reference to array of char types]]></description>
	</rule>
	<rule key="NAMING-HN-09" priority="MAJOR">
		<name><![CDATA[Hungarian notation for char pointer, array, or reference types]]></name>
		<configKey><![CDATA[Hungarian notation for char pointer, array, or reference types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for char pointer, array, or reference types]]></description>
	</rule>
	<rule key="NAMING-HN-10" priority="MAJOR">
		<name><![CDATA[Hungarian notation for char pointer or reference types]]></name>
		<configKey><![CDATA[Hungarian notation for char pointer or reference types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for char pointer or reference types]]></description>
	</rule>
	<rule key="NAMING-HN-11" priority="MAJOR">
		<name><![CDATA[Hungarian notation for constant parameters]]></name>
		<configKey><![CDATA[Hungarian notation for constant parameters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for constant parameters]]></description>
	</rule>
	<rule key="NAMING-HN-12" priority="MAJOR">
		<name><![CDATA[Hungarian notation for double-precision floating point types]]></name>
		<configKey><![CDATA[Hungarian notation for double-precision floating point types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for double-precision floating point types]]></description>
	</rule>
	<rule key="NAMING-HN-13" priority="MAJOR">
		<name><![CDATA[Hungarian notation for double-precision floating point pointer, array, or reference types]]></name>
		<configKey><![CDATA[Hungarian notation for double-precision floating point pointer, array, or reference types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for double-precision floating point pointer, array, or reference types]]></description>
	</rule>
	<rule key="NAMING-HN-14" priority="MAJOR">
		<name><![CDATA[Hungarian notation for dword types]]></name>
		<configKey><![CDATA[Hungarian notation for dword types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for dword types]]></description>
	</rule>
	<rule key="NAMING-HN-15" priority="MAJOR">
		<name><![CDATA[Hungarian notation for dword pointer, array, or reference types]]></name>
		<configKey><![CDATA[Hungarian notation for dword pointer, array, or reference types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for dword pointer, array, or reference types]]></description>
	</rule>
	<rule key="NAMING-HN-16" priority="MAJOR">
		<name><![CDATA[Hungarian notation for dynamically allocated array]]></name>
		<configKey><![CDATA[Hungarian notation for dynamically allocated array]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for dynamically allocated array]]></description>
	</rule>
	<rule key="NAMING-HN-17" priority="MAJOR">
		<name><![CDATA[Hungarian notation for floating point types]]></name>
		<configKey><![CDATA[Hungarian notation for floating point types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for floating point types]]></description>
	</rule>
	<rule key="NAMING-HN-18" priority="MAJOR">
		<name><![CDATA[Hungarian notation for floating point pointer, array, or reference types]]></name>
		<configKey><![CDATA[Hungarian notation for floating point pointer, array, or reference types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for floating point pointer, array, or reference types]]></description>
	</rule>
	<rule key="NAMING-HN-19" priority="MAJOR">
		<name><![CDATA[Hungarian notation for class declaration]]></name>
		<configKey><![CDATA[Hungarian notation for class declaration]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for class declaration]]></description>
	</rule>
	<rule key="NAMING-HN-20" priority="MAJOR">
		<name><![CDATA[Hungarian notation for structs declaration]]></name>
		<configKey><![CDATA[Hungarian notation for structs declaration]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for structs declaration]]></description>
	</rule>
	<rule key="NAMING-HN-21" priority="MAJOR">
		<name><![CDATA[Hungarian notation for ifstream type variables and parameters]]></name>
		<configKey><![CDATA[Hungarian notation for ifstream type variables and parameters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for ifstream type variables and parameters]]></description>
	</rule>
	<rule key="NAMING-HN-22" priority="MAJOR">
		<name><![CDATA[Hungarian notation for int types]]></name>
		<configKey><![CDATA[Hungarian notation for int types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for int types]]></description>
	</rule>
	<rule key="NAMING-HN-23" priority="MAJOR">
		<name><![CDATA[Hungarian notation for int pointer, array, or reference types]]></name>
		<configKey><![CDATA[Hungarian notation for int pointer, array, or reference types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for int pointer, array, or reference types]]></description>
	</rule>
	<rule key="NAMING-HN-24" priority="MAJOR">
		<name><![CDATA[Hungarian notation for istream type parameters and variables]]></name>
		<configKey><![CDATA[Hungarian notation for istream type parameters and variables]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for istream type parameters and variables]]></description>
	</rule>
	<rule key="NAMING-HN-25" priority="MAJOR">
		<name><![CDATA[Hungarian notation for long int types]]></name>
		<configKey><![CDATA[Hungarian notation for long int types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for long int types]]></description>
	</rule>
	<rule key="NAMING-HN-26" priority="MAJOR">
		<name><![CDATA[Hungarian notation for long double-precision floating point types]]></name>
		<configKey><![CDATA[Hungarian notation for long double-precision floating point types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for long double-precision floating point types]]></description>
	</rule>
	<rule key="NAMING-HN-27" priority="MAJOR">
		<name><![CDATA[Hungarian notation for long double-precision floating point pointer, array, or reference types]]></name>
		<configKey><![CDATA[Hungarian notation for long double-precision floating point pointer, array, or reference types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for long double-precision floating point pointer, array, or reference types]]></description>
	</rule>
	<rule key="NAMING-HN-28" priority="MAJOR">
		<name><![CDATA[Hungarian notation for long int pointer, array, or reference types]]></name>
		<configKey><![CDATA[Hungarian notation for long int pointer, array, or reference types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for long int pointer, array, or reference types]]></description>
	</rule>
	<rule key="NAMING-HN-29" priority="MAJOR">
		<name><![CDATA[Hungarian notation for member variables]]></name>
		<configKey><![CDATA[Hungarian notation for member variables]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for member variables]]></description>
	</rule>
	<rule key="NAMING-HN-30" priority="MAJOR">
		<name><![CDATA[Hungarian notation for int types]]></name>
		<configKey><![CDATA[Hungarian notation for int types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for int types]]></description>
	</rule>
	<rule key="NAMING-HN-31" priority="MAJOR">
		<name><![CDATA[Hungarian notation for int pointer, array, or reference types]]></name>
		<configKey><![CDATA[Hungarian notation for int pointer, array, or reference types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for int pointer, array, or reference types]]></description>
	</rule>
	<rule key="NAMING-HN-32" priority="MAJOR">
		<name><![CDATA[Hungarian notation for ofstream type parameters and variables]]></name>
		<configKey><![CDATA[Hungarian notation for ofstream type parameters and variables]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for ofstream type parameters and variables]]></description>
	</rule>
	<rule key="NAMING-HN-33" priority="MAJOR">
		<name><![CDATA[Hungarian notation for ostream type parameters and variables]]></name>
		<configKey><![CDATA[Hungarian notation for ostream type parameters and variables]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for ostream type parameters and variables]]></description>
	</rule>
	<rule key="NAMING-HN-34" priority="MAJOR">
		<name><![CDATA[Hungarian notation for pointer]]></name>
		<configKey><![CDATA[Hungarian notation for pointer]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for pointer]]></description>
	</rule>
	<rule key="NAMING-HN-35" priority="MAJOR">
		<name><![CDATA[Hungarian notation for reference parameters]]></name>
		<configKey><![CDATA[Hungarian notation for reference parameters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for reference parameters]]></description>
	</rule>
	<rule key="NAMING-HN-36" priority="MAJOR">
		<name><![CDATA[Hungarian notation for short int types]]></name>
		<configKey><![CDATA[Hungarian notation for short int types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for short int types]]></description>
	</rule>
	<rule key="NAMING-HN-37" priority="MAJOR">
		<name><![CDATA[Hungarian notation for short int pointer, array, or reference types]]></name>
		<configKey><![CDATA[Hungarian notation for short int pointer, array, or reference types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for short int pointer, array, or reference types]]></description>
	</rule>
	<rule key="NAMING-HN-38" priority="MAJOR">
		<name><![CDATA[Hungarian notation for static variables]]></name>
		<configKey><![CDATA[Hungarian notation for static variables]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for static variables]]></description>
	</rule>
	<rule key="NAMING-HN-39" priority="MAJOR">
		<name><![CDATA[Hungarian notation for string types]]></name>
		<configKey><![CDATA[Hungarian notation for string types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for string types]]></description>
	</rule>
	<rule key="NAMING-HN-40" priority="MAJOR">
		<name><![CDATA[Hungarian notation for string pointer, array, or reference types]]></name>
		<configKey><![CDATA[Hungarian notation for string pointer, array, or reference types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for string pointer, array, or reference types]]></description>
	</rule>
	<rule key="NAMING-HN-41" priority="MAJOR">
		<name><![CDATA[Hungarian notation for unsigned types]]></name>
		<configKey><![CDATA[Hungarian notation for unsigned types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for unsigned types]]></description>
	</rule>
	<rule key="NAMING-HN-42" priority="MAJOR">
		<name><![CDATA[Hungarian notation for void pointer types]]></name>
		<configKey><![CDATA[Hungarian notation for void pointer types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for void pointer types]]></description>
	</rule>
	<rule key="NAMING-HN-43" priority="MAJOR">
		<name><![CDATA[Hungarian notation for word types]]></name>
		<configKey><![CDATA[Hungarian notation for word types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for word types]]></description>
	</rule>
	<rule key="NAMING-HN-44" priority="MAJOR">
		<name><![CDATA[Hungarian notation for word pointer, array, or reference types]]></name>
		<configKey><![CDATA[Hungarian notation for word pointer, array, or reference types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hungarian notation for word pointer, array, or reference types]]></description>
	</rule>
	<rule key="OOP-01" priority="MAJOR">
		<name><![CDATA[Base class copy constructor should be protected or public with smart pointer as parameter]]></name>
		<configKey><![CDATA[Base class copy constructor should be protected or public with smart pointer as parameter]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Base class copy constructor should be protected or public with smart pointer as parameter]]></description>
	</rule>
	<rule key="OOP-02" priority="MAJOR">
		<name><![CDATA[Avoid slicing. Consider Clone instead of copying in base classes]]></name>
		<configKey><![CDATA[Avoid slicing. Consider Clone instead of copying in base classes]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid slicing. Consider Clone instead of copying in base classes]]></description>
	</rule>
	<rule key="OOP-03" priority="BLOCKER">
		<name><![CDATA[Class cannot inherit other class more than once unless it is virtual inheritance]]></name>
		<configKey><![CDATA[Class cannot inherit other class more than once unless it is virtual inheritance]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Class cannot inherit other class more than once unless it is virtual inheritance]]></description>
	</rule>
	<rule key="OOP-04" priority="MAJOR">
		<name><![CDATA[Do not derive functions with the same name from more than one base class]]></name>
		<configKey><![CDATA[Do not derive functions with the same name from more than one base class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not derive functions with the same name from more than one base class]]></description>
	</rule>
	<rule key="OOP-05" priority="CRITICAL">
		<name><![CDATA[Do not use multiple inheritance]]></name>
		<configKey><![CDATA[Do not use multiple inheritance]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use multiple inheritance]]></description>
	</rule>
	<rule key="OOP-06" priority="MAJOR">
		<name><![CDATA[For multiple inheritance use virtual common base class]]></name>
		<configKey><![CDATA[For multiple inheritance use virtual common base class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[For multiple inheritance use virtual common base class]]></description>
	</rule>
	<rule key="OOP-07" priority="BLOCKER">
		<name><![CDATA[Be wary about using multiple inheritance of classes that are not abstract interfaces]]></name>
		<configKey><![CDATA[Be wary about using multiple inheritance of classes that are not abstract interfaces]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Be wary about using multiple inheritance of classes that are not abstract interfaces]]></description>
	</rule>
	<rule key="OOP-08" priority="BLOCKER">
		<name><![CDATA[Do not directly access global data from a constructor]]></name>
		<configKey><![CDATA[Do not directly access global data from a constructor]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not directly access global data from a constructor]]></description>
	</rule>
	<rule key="OOP-09" priority="MAJOR">
		<name><![CDATA[Avoid the use of global objects in destructors]]></name>
		<configKey><![CDATA[Avoid the use of global objects in destructors]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid the use of global objects in destructors]]></description>
	</rule>
	<rule key="OOP-10" priority="CRITICAL">
		<name><![CDATA[Avoid using global data in member functions]]></name>
		<configKey><![CDATA[Avoid using global data in member functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using global data in member functions]]></description>
	</rule>
	<rule key="OOP-11" priority="MAJOR">
		<name><![CDATA[Avoid using the friend mechanism]]></name>
		<configKey><![CDATA[Avoid using the friend mechanism]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using the friend mechanism]]></description>
	</rule>
	<rule key="OOP-12" priority="MAJOR">
		<name><![CDATA[Protected member function shall not return non-const handles to private class-data]]></name>
		<configKey><![CDATA[Protected member function shall not return non-const handles to private class-data]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Protected member function shall not return non-const handles to private class-data]]></description>
	</rule>
	<rule key="OOP-13" priority="MAJOR">
		<name><![CDATA[Do not redefine an inherited virtual function with a different default parameter value]]></name>
		<configKey><![CDATA[Do not redefine an inherited virtual function with a different default parameter value]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not redefine an inherited virtual function with a different default parameter value]]></description>
	</rule>
	<rule key="OOP-14" priority="MAJOR">
		<name><![CDATA[Consider use composition instead of private inheritance]]></name>
		<configKey><![CDATA[Consider use composition instead of private inheritance]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Consider use composition instead of private inheritance]]></description>
	</rule>
	<rule key="OOP-15" priority="BLOCKER">
		<name><![CDATA[Don't change default arguments of virtual functions]]></name>
		<configKey><![CDATA[Don't change default arguments of virtual functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't change default arguments of virtual functions]]></description>
	</rule>
	<rule key="OOP-16" priority="BLOCKER">
		<name><![CDATA[Avoid calling virtual functions from constructors and destructors]]></name>
		<configKey><![CDATA[Avoid calling virtual functions from constructors and destructors]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid calling virtual functions from constructors and destructors]]></description>
	</rule>
	<rule key="OOP-17" priority="MINOR">
		<name><![CDATA[Write a using declaration to redeclare overloaded functions]]></name>
		<configKey><![CDATA[Write a using declaration to redeclare overloaded functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Write a using declaration to redeclare overloaded functions]]></description>
	</rule>
	<rule key="OOP-18" priority="CRITICAL">
		<name><![CDATA[Avoid "public" data members]]></name>
		<configKey><![CDATA[Avoid "public" data members]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid "public" data members]]></description>
	</rule>
	<rule key="OOP-19" priority="CRITICAL">
		<name><![CDATA[Avoid 'protected' data members]]></name>
		<configKey><![CDATA[Avoid 'protected' data members]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid 'protected' data members]]></description>
	</rule>
	<rule key="OOP-20" priority="MAJOR">
		<name><![CDATA[Avoid unnecessary explicit cast from derived to a base class]]></name>
		<configKey><![CDATA[Avoid unnecessary explicit cast from derived to a base class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid unnecessary explicit cast from derived to a base class]]></description>
	</rule>
	<rule key="OOP-21" priority="MAJOR">
		<name><![CDATA[Use the virtual keyword if a subclass implements a virtual function]]></name>
		<configKey><![CDATA[Use the virtual keyword if a subclass implements a virtual function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use the virtual keyword if a subclass implements a virtual function]]></description>
	</rule>
	<rule key="OOP-22" priority="BLOCKER">
		<name><![CDATA[Define a virtual destructor in classes used as base classes which have virtual functions]]></name>
		<configKey><![CDATA[Define a virtual destructor in classes used as base classes which have virtual functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Define a virtual destructor in classes used as base classes which have virtual functions]]></description>
	</rule>
	<rule key="OOP-23" priority="CRITICAL">
		<name><![CDATA[If a class has virtual functions it shall have a virtual destructor]]></name>
		<configKey><![CDATA[If a class has virtual functions it shall have a virtual destructor]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If a class has virtual functions it shall have a virtual destructor]]></description>
	</rule>
	<rule key="OOP-24" priority="BLOCKER">
		<name><![CDATA[Make destructors virtual in base classes]]></name>
		<configKey><![CDATA[Make destructors virtual in base classes]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Make destructors virtual in base classes]]></description>
	</rule>
	<rule key="OOP-25" priority="MAJOR">
		<name><![CDATA[Avoid declaring virtual functions inline]]></name>
		<configKey><![CDATA[Avoid declaring virtual functions inline]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid declaring virtual functions inline]]></description>
	</rule>
	<rule key="OOP-26" priority="MAJOR">
		<name><![CDATA[Never convert pointers to objects of a derived class to pointers to objects of a virtual base class]]></name>
		<configKey><![CDATA[Never convert pointers to objects of a derived class to pointers to objects of a virtual base class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Never convert pointers to objects of a derived class to pointers to objects of a virtual base class]]></description>
	</rule>
	<rule key="OOP-27" priority="MAJOR">
		<name><![CDATA[Declare copy assignment operator for class with reference or const members]]></name>
		<configKey><![CDATA[Declare copy assignment operator for class with reference or const members]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Declare copy assignment operator for class with reference or const members]]></description>
	</rule>
	<rule key="OOP-28" priority="MINOR">
		<name><![CDATA[A pointer to a class may not be converted to a pointer of a second class unless the first class inherits from the second]]></name>
		<configKey><![CDATA[A pointer to a class may not be converted to a pointer of a second class unless the first class inherits from the second]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A pointer to a class may not be converted to a pointer of a second class unless the first class inherits from the second]]></description>
	</rule>
	<rule key="OOP-29" priority="BLOCKER">
		<name><![CDATA[A pointer to an abstract class shall not be converted to a pointer of a class that inherits from that abstract class]]></name>
		<configKey><![CDATA[A pointer to an abstract class shall not be converted to a pointer of a class that inherits from that abstract class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A pointer to an abstract class shall not be converted to a pointer of a class that inherits from that abstract class]]></description>
	</rule>
	<rule key="OOP-30" priority="MAJOR">
		<name><![CDATA[Declare the copy constructor and copy assignment operator private not in class itself, but in a specifically designed base class]]></name>
		<configKey><![CDATA[Declare the copy constructor and copy assignment operator private not in class itself, but in a specifically designed base class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Declare the copy constructor and copy assignment operator private not in class itself, but in a specifically designed base class]]></description>
	</rule>
	<rule key="OOP-31" priority="BLOCKER">
		<name><![CDATA[Make base class destructors public and virtual, or protected and nonvirtual]]></name>
		<configKey><![CDATA[Make base class destructors public and virtual, or protected and nonvirtual]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Make base class destructors public and virtual, or protected and nonvirtual]]></description>
	</rule>
	<rule key="OOP-32" priority="MAJOR">
		<name><![CDATA[Never redefine an inherited nonvirtual function]]></name>
		<configKey><![CDATA[Never redefine an inherited nonvirtual function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Never redefine an inherited nonvirtual function]]></description>
	</rule>
	<rule key="OOP-33" priority="MAJOR">
		<name><![CDATA[Do not redefine an inherited nonvirtual function with template parameter]]></name>
		<configKey><![CDATA[Do not redefine an inherited nonvirtual function with template parameter]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not redefine an inherited nonvirtual function with template parameter]]></description>
	</rule>
	<rule key="OOP-34" priority="MINOR">
		<name><![CDATA[Check for assignment to self in operator=]]></name>
		<configKey><![CDATA[Check for assignment to self in operator=]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Check for assignment to self in operator=]]></description>
	</rule>
	<rule key="OOP-35" priority="INFO">
		<name><![CDATA[Avoid casts down the inheritance hierarchy]]></name>
		<configKey><![CDATA[Avoid casts down the inheritance hierarchy]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid casts down the inheritance hierarchy]]></description>
	</rule>
	<rule key="OOP-36" priority="MAJOR">
		<name><![CDATA[Public member functions shall not return non-const handles to private/protected class-data]]></name>
		<configKey><![CDATA[Public member functions shall not return non-const handles to private/protected class-data]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Public member functions shall not return non-const handles to private/protected class-data]]></description>
	</rule>
	<rule key="OOP-37" priority="INFO">
		<name><![CDATA[Prefer composition when don't need inheritance]]></name>
		<configKey><![CDATA[Prefer composition when don't need inheritance]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer composition when don't need inheritance]]></description>
	</rule>
	<rule key="OOP-38" priority="BLOCKER">
		<name><![CDATA[If a class destructor is called and the class has virtual functions it shall have a virtual destructor]]></name>
		<configKey><![CDATA[If a class destructor is called and the class has virtual functions it shall have a virtual destructor]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If a class destructor is called and the class has virtual functions it shall have a virtual destructor]]></description>
	</rule>
	<rule key="OOP-39" priority="CRITICAL">
		<name><![CDATA[A stateful virtual base shall be explicitly declared in each derived class that accesses it]]></name>
		<configKey><![CDATA[A stateful virtual base shall be explicitly declared in each derived class that accesses it]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A stateful virtual base shall be explicitly declared in each derived class that accesses it]]></description>
	</rule>
	<rule key="OOP-40" priority="MINOR">
		<name><![CDATA[Hierarchies should be based on abstract classes]]></name>
		<configKey><![CDATA[Hierarchies should be based on abstract classes]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Hierarchies should be based on abstract classes]]></description>
	</rule>
	<rule key="OOP-41" priority="CRITICAL">
		<name><![CDATA[A base class shall not be both virtual and non-virtual in the same hierarchy]]></name>
		<configKey><![CDATA[A base class shall not be both virtual and non-virtual in the same hierarchy]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A base class shall not be both virtual and non-virtual in the same hierarchy]]></description>
	</rule>
	<rule key="OOP-42" priority="MAJOR">
		<name><![CDATA[The copy assignment operator shall be declared protected or private in an abstract class]]></name>
		<configKey><![CDATA[The copy assignment operator shall be declared protected or private in an abstract class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The copy assignment operator shall be declared protected or private in an abstract class]]></description>
	</rule>
	<rule key="OOP-43" priority="MINOR">
		<name><![CDATA[A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual]]></name>
		<configKey><![CDATA[A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual]]></description>
	</rule>
	<rule key="OOP-44" priority="MAJOR">
		<name><![CDATA[There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy]]></name>
		<configKey><![CDATA[There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy]]></description>
	</rule>
	<rule key="OOP-45" priority="MAJOR">
		<name><![CDATA[All constructors that are callable with a single argument of fundamental type shall be declared explicit]]></name>
		<configKey><![CDATA[All constructors that are callable with a single argument of fundamental type shall be declared explicit]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All constructors that are callable with a single argument of fundamental type shall be declared explicit]]></description>
	</rule>
	<rule key="OOP-46" priority="MAJOR">
		<name><![CDATA[A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member]]></name>
		<configKey><![CDATA[A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member]]></description>
	</rule>
	<rule key="OOP-47" priority="MAJOR">
		<name><![CDATA[Classes should not be derived from virtual bases]]></name>
		<configKey><![CDATA[Classes should not be derived from virtual bases]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Classes should not be derived from virtual bases]]></description>
	</rule>
	<rule key="OOP-48" priority="MAJOR">
		<name><![CDATA[Member data in non-POD class types shall be private]]></name>
		<configKey><![CDATA[Member data in non-POD class types shall be private]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Member data in non-POD class types shall be private]]></description>
	</rule>
	<rule key="OOP-49" priority="BLOCKER">
		<name><![CDATA[Casts from a base class to a derived class should not be performed on polymorphic types]]></name>
		<configKey><![CDATA[Casts from a base class to a derived class should not be performed on polymorphic types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Casts from a base class to a derived class should not be performed on polymorphic types]]></description>
	</rule>
	<rule key="OOP-50" priority="MAJOR">
		<name><![CDATA[A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast]]></name>
		<configKey><![CDATA[A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast]]></description>
	</rule>
	<rule key="OOP-51" priority="INFO">
		<name><![CDATA[Use namespace instead of class or structure containing only static functions]]></name>
		<configKey><![CDATA[Use namespace instead of class or structure containing only static functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use namespace instead of class or structure containing only static functions]]></description>
	</rule>
	<rule key="OPT-01" priority="MAJOR">
		<name><![CDATA[Declare variables as locally as possible]]></name>
		<configKey><![CDATA[Declare variables as locally as possible]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Declare variables as locally as possible]]></description>
	</rule>
	<rule key="OPT-02" priority="MINOR">
		<name><![CDATA[Avoid unused local variables]]></name>
		<configKey><![CDATA[Avoid unused local variables]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid unused local variables]]></description>
	</rule>
	<rule key="OPT-03" priority="CRITICAL">
		<name><![CDATA[Eliminate unused parameters]]></name>
		<configKey><![CDATA[Eliminate unused parameters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Eliminate unused parameters]]></description>
	</rule>
	<rule key="OPT-04" priority="MAJOR">
		<name><![CDATA[Prefer canonical form of ++ and --. Prefer calling the prefix forms]]></name>
		<configKey><![CDATA[Prefer canonical form of ++ and --. Prefer calling the prefix forms]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer canonical form of ++ and --. Prefer calling the prefix forms]]></description>
	</rule>
	<rule key="OPT-05" priority="MAJOR">
		<name><![CDATA[Eliminate unused private member variables]]></name>
		<configKey><![CDATA[Eliminate unused private member variables]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Eliminate unused private member variables]]></description>
	</rule>
	<rule key="OPT-06" priority="MINOR">
		<name><![CDATA[Avoid unused local variables or variables which have no side effect]]></name>
		<configKey><![CDATA[Avoid unused local variables or variables which have no side effect]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid unused local variables or variables which have no side effect]]></description>
	</rule>
	<rule key="OPT-07" priority="MAJOR">
		<name><![CDATA[Prefer "a @= b" than "a = a @ b", where "@" is +, -, *, /, %]]></name>
		<configKey><![CDATA[Prefer "a @= b" than "a = a @ b", where "@" is +, -, *, /, %]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer "a @= b" than "a = a @ b", where "@" is +, -, *, /, %]]></description>
	</rule>
	<rule key="OPT-08" priority="MAJOR">
		<name><![CDATA[Prefer "a @= b" than "a = a @ b", where "@" is &amp;, |, ^, &lt;&lt;, &gt;&gt;]]></name>
		<configKey><![CDATA[Prefer "a @= b" than "a = a @ b", where "@" is &amp;, |, ^, &lt;&lt;, &gt;&gt;]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer "a @= b" than "a = a @ b", where "@" is &amp;, |, ^, &lt;&lt;, &gt;&gt;]]></description>
	</rule>
	<rule key="OPT-09" priority="INFO">
		<name><![CDATA[Remove unnecessary '== true' in Boolean functions]]></name>
		<configKey><![CDATA[Remove unnecessary '== true' in Boolean functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Remove unnecessary '== true' in Boolean functions]]></description>
	</rule>
	<rule key="OPT-10" priority="MAJOR">
		<name><![CDATA[Do not declare variables in "if", "for", "while", and "do while" statement]]></name>
		<configKey><![CDATA[Do not declare variables in "if", "for", "while", and "do while" statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not declare variables in "if", "for", "while", and "do while" statement]]></description>
	</rule>
	<rule key="OPT-11" priority="MAJOR">
		<name><![CDATA[If a file-level static variable is used/referenced in one function only then include that variable in the function itself]]></name>
		<configKey><![CDATA[If a file-level static variable is used/referenced in one function only then include that variable in the function itself]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If a file-level static variable is used/referenced in one function only then include that variable in the function itself]]></description>
	</rule>
	<rule key="OPT-12" priority="MAJOR">
		<name><![CDATA[If a file-level static variable is used/referenced in one class only then include that variable in the class itself]]></name>
		<configKey><![CDATA[If a file-level static variable is used/referenced in one class only then include that variable in the class itself]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If a file-level static variable is used/referenced in one class only then include that variable in the class itself]]></description>
	</rule>
	<rule key="OPT-13" priority="MAJOR">
		<name><![CDATA[Declare member variables in the descending size order]]></name>
		<configKey><![CDATA[Declare member variables in the descending size order]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Declare member variables in the descending size order]]></description>
	</rule>
	<rule key="OPT-14" priority="MAJOR">
		<name><![CDATA[Pass objects by reference instead of by value]]></name>
		<configKey><![CDATA[Pass objects by reference instead of by value]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Pass objects by reference instead of by value]]></description>
	</rule>
	<rule key="OPT-15" priority="MAJOR">
		<name><![CDATA[Consider overloading to avoid implicit type conversions]]></name>
		<configKey><![CDATA[Consider overloading to avoid implicit type conversions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Consider overloading to avoid implicit type conversions]]></description>
	</rule>
	<rule key="OPT-16" priority="MAJOR">
		<name><![CDATA[Global function containing recursion, loops or virtual function call should not be inlined]]></name>
		<configKey><![CDATA[Global function containing recursion, loops or virtual function call should not be inlined]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Global function containing recursion, loops or virtual function call should not be inlined]]></description>
	</rule>
	<rule key="OPT-17" priority="MAJOR">
		<name><![CDATA[Avoid inline constructors and destructors]]></name>
		<configKey><![CDATA[Avoid inline constructors and destructors]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid inline constructors and destructors]]></description>
	</rule>
	<rule key="OPT-18" priority="MAJOR">
		<name><![CDATA[Member function containing recursion or loops should not be inlined]]></name>
		<configKey><![CDATA[Member function containing recursion or loops should not be inlined]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Member function containing recursion or loops should not be inlined]]></description>
	</rule>
	<rule key="OPT-19" priority="MAJOR">
		<name><![CDATA[Consider using op= instead of stand-alone op]]></name>
		<configKey><![CDATA[Consider using op= instead of stand-alone op]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Consider using op= instead of stand-alone op]]></description>
	</rule>
	<rule key="OPT-20" priority="MAJOR">
		<name><![CDATA[Postpone variable definitions as long as possible]]></name>
		<configKey><![CDATA[Postpone variable definitions as long as possible]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Postpone variable definitions as long as possible]]></description>
	</rule>
	<rule key="OPT-21" priority="MAJOR">
		<name><![CDATA[switch statement which results are invariant shall not be permitted]]></name>
		<configKey><![CDATA[switch statement which results are invariant shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[switch statement which results are invariant shall not be permitted]]></description>
	</rule>
	<rule key="OPT-22" priority="MAJOR">
		<name><![CDATA[Useless case statement shall not be permitted]]></name>
		<configKey><![CDATA[Useless case statement shall not be permitted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Useless case statement shall not be permitted]]></description>
	</rule>
	<rule key="OPT-23" priority="MINOR">
		<name><![CDATA[Trivial accessor and mutator functions should be inlined]]></name>
		<configKey><![CDATA[Trivial accessor and mutator functions should be inlined]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Trivial accessor and mutator functions should be inlined]]></description>
	</rule>
	<rule key="OPT-24" priority="MINOR">
		<name><![CDATA[Trivial forwarding functions should be inlined]]></name>
		<configKey><![CDATA[Trivial forwarding functions should be inlined]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Trivial forwarding functions should be inlined]]></description>
	</rule>
	<rule key="OPT-25" priority="MINOR">
		<name><![CDATA[Only functions with 1 or 2 statements should be considered candidates for inline functions]]></name>
		<configKey><![CDATA[Only functions with 1 or 2 statements should be considered candidates for inline functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Only functions with 1 or 2 statements should be considered candidates for inline functions]]></description>
	</rule>
	<rule key="OPT-26" priority="CRITICAL">
		<name><![CDATA[Variables will not be introduced until they can be initialized with meaningful values]]></name>
		<configKey><![CDATA[Variables will not be introduced until they can be initialized with meaningful values]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Variables will not be introduced until they can be initialized with meaningful values]]></description>
	</rule>
	<rule key="OPT-27" priority="MINOR">
		<name><![CDATA[The number of accessor and mutator functions should be minimized]]></name>
		<configKey><![CDATA[The number of accessor and mutator functions should be minimized]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The number of accessor and mutator functions should be minimized]]></description>
	</rule>
	<rule key="OPT-28" priority="MAJOR">
		<name><![CDATA['strlen' function should not be used to check string against NULL/non-NULL]]></name>
		<configKey><![CDATA['strlen' function should not be used to check string against NULL/non-NULL]]></configKey>
		<category name="Reliability" />
		<description><![CDATA['strlen' function should not be used to check string against NULL/non-NULL]]></description>
	</rule>
	<rule key="OPT-29" priority="MINOR">
		<name><![CDATA[Redundant cast to the same type is not allowed]]></name>
		<configKey><![CDATA[Redundant cast to the same type is not allowed]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Redundant cast to the same type is not allowed]]></description>
	</rule>
	<rule key="OPT-30" priority="MAJOR">
		<name><![CDATA[Every defined function shall be called at least once]]></name>
		<configKey><![CDATA[Every defined function shall be called at least once]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Every defined function shall be called at least once]]></description>
	</rule>
	<rule key="OPT-31" priority="MAJOR">
		<name><![CDATA[There shall be no unused parameters (named or unnamed) in non-virtual functions]]></name>
		<configKey><![CDATA[There shall be no unused parameters (named or unnamed) in non-virtual functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[There shall be no unused parameters (named or unnamed) in non-virtual functions]]></description>
	</rule>
	<rule key="OPT-32" priority="MAJOR">
		<name><![CDATA[All functions with void return type shall have external side effect(s)]]></name>
		<configKey><![CDATA[All functions with void return type shall have external side effect(s)]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All functions with void return type shall have external side effect(s)]]></description>
	</rule>
	<rule key="OPT-33" priority="INFO">
		<name><![CDATA[Consider returning object by reference instead of by value]]></name>
		<configKey><![CDATA[Consider returning object by reference instead of by value]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Consider returning object by reference instead of by value]]></description>
	</rule>
	<rule key="PB-01" priority="MAJOR">
		<name><![CDATA[Do not dereference pointer type expressions]]></name>
		<configKey><![CDATA[Do not dereference pointer type expressions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not dereference pointer type expressions]]></description>
	</rule>
	<rule key="PB-02" priority="MAJOR">
		<name><![CDATA[Do not use assignments inside a(b), a[b], and cast]]></name>
		<configKey><![CDATA[Do not use assignments inside a(b), a[b], and cast]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use assignments inside a(b), a[b], and cast]]></description>
	</rule>
	<rule key="PB-03" priority="MAJOR">
		<name><![CDATA[Using mixed types in ternary operator is not allowed]]></name>
		<configKey><![CDATA[Using mixed types in ternary operator is not allowed]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Using mixed types in ternary operator is not allowed]]></description>
	</rule>
	<rule key="PB-05" priority="MAJOR">
		<name><![CDATA[Return value of a function must match declared return type]]></name>
		<configKey><![CDATA[Return value of a function must match declared return type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Return value of a function must match declared return type]]></description>
	</rule>
	<rule key="PB-06" priority="MAJOR">
		<name><![CDATA[Do not assign incompatible variable types]]></name>
		<configKey><![CDATA[Do not assign incompatible variable types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not assign incompatible variable types]]></description>
	</rule>
	<rule key="PB-07" priority="MAJOR">
		<name><![CDATA[Do not assign function return value to a variable of incompatible type]]></name>
		<configKey><![CDATA[Do not assign function return value to a variable of incompatible type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not assign function return value to a variable of incompatible type]]></description>
	</rule>
	<rule key="PB-08" priority="MAJOR">
		<name><![CDATA[Do not assign signed constants to unsigned integer variables]]></name>
		<configKey><![CDATA[Do not assign signed constants to unsigned integer variables]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not assign signed constants to unsigned integer variables]]></description>
	</rule>
	<rule key="PB-09" priority="CRITICAL">
		<name><![CDATA[Operators should not return value by reference]]></name>
		<configKey><![CDATA[Operators should not return value by reference]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Operators should not return value by reference]]></description>
	</rule>
	<rule key="PB-10" priority="MAJOR">
		<name><![CDATA[Don't treat arrays polymorphically]]></name>
		<configKey><![CDATA[Don't treat arrays polymorphically]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't treat arrays polymorphically]]></description>
	</rule>
	<rule key="PB-11" priority="MAJOR">
		<name><![CDATA[Declared types of formal and actual parameters to functions must match]]></name>
		<configKey><![CDATA[Declared types of formal and actual parameters to functions must match]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Declared types of formal and actual parameters to functions must match]]></description>
	</rule>
	<rule key="PB-12" priority="MAJOR">
		<name><![CDATA[Do not cast a signed char to an unsigned int]]></name>
		<configKey><![CDATA[Do not cast a signed char to an unsigned int]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not cast a signed char to an unsigned int]]></description>
	</rule>
	<rule key="PB-13" priority="BLOCKER">
		<name><![CDATA[Do not call delete on non-pointers]]></name>
		<configKey><![CDATA[Do not call delete on non-pointers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not call delete on non-pointers]]></description>
	</rule>
	<rule key="PB-14" priority="MAJOR">
		<name><![CDATA[Incorrect End-Of-String (EOS) definition]]></name>
		<configKey><![CDATA[Incorrect End-Of-String (EOS) definition]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Incorrect End-Of-String (EOS) definition]]></description>
	</rule>
	<rule key="PB-15" priority="MAJOR">
		<name><![CDATA[Don't assign the dividend of two integers to a floating-point type]]></name>
		<configKey><![CDATA[Don't assign the dividend of two integers to a floating-point type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't assign the dividend of two integers to a floating-point type]]></description>
	</rule>
	<rule key="PB-16" priority="MAJOR">
		<name><![CDATA[Avoid assigning out-of-range value to char type]]></name>
		<configKey><![CDATA[Avoid assigning out-of-range value to char type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid assigning out-of-range value to char type]]></description>
	</rule>
	<rule key="PB-17" priority="MAJOR">
		<name><![CDATA[Avoid assigning out-of-range value to unsigned char type]]></name>
		<configKey><![CDATA[Avoid assigning out-of-range value to unsigned char type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid assigning out-of-range value to unsigned char type]]></description>
	</rule>
	<rule key="PB-18" priority="MAJOR">
		<name><![CDATA[Avoid overloading on a pointer and a numerical type]]></name>
		<configKey><![CDATA[Avoid overloading on a pointer and a numerical type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid overloading on a pointer and a numerical type]]></description>
	</rule>
	<rule key="PB-19" priority="MAJOR">
		<name><![CDATA[Do not create inline non-member functions that contain local static data]]></name>
		<configKey><![CDATA[Do not create inline non-member functions that contain local static data]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not create inline non-member functions that contain local static data]]></description>
	</rule>
	<rule key="PB-20" priority="MAJOR">
		<name><![CDATA[Avoid slicing function arguments / return value]]></name>
		<configKey><![CDATA[Avoid slicing function arguments / return value]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid slicing function arguments / return value]]></description>
	</rule>
	<rule key="PB-21" priority="BLOCKER">
		<name><![CDATA[Properly terminate character strings]]></name>
		<configKey><![CDATA[Properly terminate character strings]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Properly terminate character strings]]></description>
	</rule>
	<rule key="PB-22" priority="MAJOR">
		<name><![CDATA[Do not use increment and decrement expressions inside a(b), a[b], and cast]]></name>
		<configKey><![CDATA[Do not use increment and decrement expressions inside a(b), a[b], and cast]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use increment and decrement expressions inside a(b), a[b], and cast]]></description>
	</rule>
	<rule key="PB-23" priority="BLOCKER">
		<name><![CDATA[The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor]]></name>
		<configKey><![CDATA[The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor]]></description>
	</rule>
	<rule key="PB-24" priority="CRITICAL">
		<name><![CDATA[The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor]]></name>
		<configKey><![CDATA[The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor]]></description>
	</rule>
	<rule key="PB-25" priority="CRITICAL">
		<name><![CDATA[Unsigned arithmetic shall not be used]]></name>
		<configKey><![CDATA[Unsigned arithmetic shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Unsigned arithmetic shall not be used]]></description>
	</rule>
	<rule key="PB-26" priority="CRITICAL">
		<name><![CDATA[Public and protected methods should not be invoked by class constructor]]></name>
		<configKey><![CDATA[Public and protected methods should not be invoked by class constructor]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Public and protected methods should not be invoked by class constructor]]></description>
	</rule>
	<rule key="PB-27" priority="CRITICAL">
		<name><![CDATA[A string literal shall not be modified]]></name>
		<configKey><![CDATA[A string literal shall not be modified]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A string literal shall not be modified]]></description>
	</rule>
	<rule key="PB-28" priority="CRITICAL">
		<name><![CDATA[The following character sequences shall not appear in header file names: ', \, /*, //, or "]]></name>
		<configKey><![CDATA[The following character sequences shall not appear in header file names: ', \, /*, //, or "]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The following character sequences shall not appear in header file names: ', \, /*, //, or "]]></description>
	</rule>
	<rule key="PB-29" priority="CRITICAL">
		<name><![CDATA[The left-hand operand of a right-shift operator shall not have a negative value]]></name>
		<configKey><![CDATA[The left-hand operand of a right-shift operator shall not have a negative value]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The left-hand operand of a right-shift operator shall not have a negative value]]></description>
	</rule>
	<rule key="PB-30" priority="MAJOR">
		<name><![CDATA[More than one 'enum' type shall not be used as a switch condition or a label in a case statement]]></name>
		<configKey><![CDATA[More than one 'enum' type shall not be used as a switch condition or a label in a case statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[More than one 'enum' type shall not be used as a switch condition or a label in a case statement]]></description>
	</rule>
	<rule key="PB-31" priority="MAJOR">
		<name><![CDATA[Do not call 'sizeof' on constants]]></name>
		<configKey><![CDATA[Do not call 'sizeof' on constants]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not call 'sizeof' on constants]]></description>
	</rule>
	<rule key="PB-32" priority="MAJOR">
		<name><![CDATA[Do not call 'sizeof' on a pointer type]]></name>
		<configKey><![CDATA[Do not call 'sizeof' on a pointer type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not call 'sizeof' on a pointer type]]></description>
	</rule>
	<rule key="PB-33" priority="MAJOR">
		<name><![CDATA[Avoid implicit type conversions involving enum types]]></name>
		<configKey><![CDATA[Avoid implicit type conversions involving enum types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid implicit type conversions involving enum types]]></description>
	</rule>
	<rule key="PB-34" priority="MAJOR">
		<name><![CDATA[Third parameter to 'memcpy'/'strncpy'/'memmove' should not depend on second]]></name>
		<configKey><![CDATA[Third parameter to 'memcpy'/'strncpy'/'memmove' should not depend on second]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Third parameter to 'memcpy'/'strncpy'/'memmove' should not depend on second]]></description>
	</rule>
	<rule key="PB-35" priority="MAJOR">
		<name><![CDATA[Assignment operators shall not be used in conditions without brackets]]></name>
		<configKey><![CDATA[Assignment operators shall not be used in conditions without brackets]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Assignment operators shall not be used in conditions without brackets]]></description>
	</rule>
	<rule key="PB-36" priority="MAJOR">
		<name><![CDATA[An object's dynamic type shall not be used from the body of its constructor or destructor]]></name>
		<configKey><![CDATA[An object's dynamic type shall not be used from the body of its constructor or destructor]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An object's dynamic type shall not be used from the body of its constructor or destructor]]></description>
	</rule>
	<rule key="PB-37" priority="MAJOR">
		<name><![CDATA[The unbounded functions of library &lt;cstring&gt; shall not be used]]></name>
		<configKey><![CDATA[The unbounded functions of library &lt;cstring&gt; shall not be used]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The unbounded functions of library &lt;cstring&gt; shall not be used]]></description>
	</rule>
	<rule key="PB-38" priority="MAJOR">
		<name><![CDATA[Narrow and wide string literals shall not be concatenated]]></name>
		<configKey><![CDATA[Narrow and wide string literals shall not be concatenated]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Narrow and wide string literals shall not be concatenated]]></description>
	</rule>
	<rule key="PB-39" priority="MAJOR">
		<name><![CDATA[A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference]]></name>
		<configKey><![CDATA[A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference]]></description>
	</rule>
	<rule key="PB-40" priority="MAJOR">
		<name><![CDATA[A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function]]></name>
		<configKey><![CDATA[A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function]]></description>
	</rule>
	<rule key="PB-41" priority="MAJOR">
		<name><![CDATA[An identifier with array type passed as a function argument shall not decay to a pointer]]></name>
		<configKey><![CDATA[An identifier with array type passed as a function argument shall not decay to a pointer]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An identifier with array type passed as a function argument shall not decay to a pointer]]></description>
	</rule>
	<rule key="PB-42" priority="MAJOR">
		<name><![CDATA[An object shall not be assigned to an overlapping object]]></name>
		<configKey><![CDATA[An object shall not be assigned to an overlapping object]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An object shall not be assigned to an overlapping object]]></description>
	</rule>
	<rule key="PB-43" priority="MAJOR">
		<name><![CDATA[All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes]]></name>
		<configKey><![CDATA[All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes]]></description>
	</rule>
	<rule key="PB-44" priority="MAJOR">
		<name><![CDATA[The terminate() function shall not be called implicitly]]></name>
		<configKey><![CDATA[The terminate() function shall not be called implicitly]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The terminate() function shall not be called implicitly]]></description>
	</rule>
	<rule key="PFO-01" priority="MAJOR">
		<name><![CDATA[Don't define entities with linkage in a header file]]></name>
		<configKey><![CDATA[Don't define entities with linkage in a header file]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't define entities with linkage in a header file]]></description>
	</rule>
	<rule key="PFO-02" priority="MAJOR">
		<name><![CDATA[Use multiple include guards]]></name>
		<configKey><![CDATA[Use multiple include guards]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use multiple include guards]]></description>
	</rule>
	<rule key="PFO-03" priority="MAJOR">
		<name><![CDATA[An include file should not contain more than one class definition]]></name>
		<configKey><![CDATA[An include file should not contain more than one class definition]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[An include file should not contain more than one class definition]]></description>
	</rule>
	<rule key="PFO-04" priority="MAJOR">
		<name><![CDATA[Include constant string describing file]]></name>
		<configKey><![CDATA[Include constant string describing file]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Include constant string describing file]]></description>
	</rule>
	<rule key="PFO-05" priority="MAJOR">
		<name><![CDATA[File with extension '.c' may not include other files with extension '.c']]></name>
		<configKey><![CDATA[File with extension '.c' may not include other files with extension '.c']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[File with extension '.c' may not include other files with extension '.c']]></description>
	</rule>
	<rule key="PFO-06" priority="MAJOR">
		<name><![CDATA[Never include other files in a file with extension '.icc']]></name>
		<configKey><![CDATA[Never include other files in a file with extension '.icc']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Never include other files in a file with extension '.icc']]></description>
	</rule>
	<rule key="PFO-07" priority="MAJOR">
		<name><![CDATA[Use multiple include guards with pattern based on the header file name]]></name>
		<configKey><![CDATA[Use multiple include guards with pattern based on the header file name]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use multiple include guards with pattern based on the header file name]]></description>
	</rule>
	<rule key="PFO-08" priority="MAJOR">
		<name><![CDATA[Use mechanism that prevents multiple inclusion of the file i.e. include guards or "#pragma once" preprocessor directive]]></name>
		<configKey><![CDATA[Use mechanism that prevents multiple inclusion of the file i.e. include guards or "#pragma once" preprocessor directive]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use mechanism that prevents multiple inclusion of the file i.e. include guards or "#pragma once" preprocessor directive]]></description>
	</rule>
	<rule key="PFO-09" priority="MAJOR">
		<name><![CDATA["#pragma once" preprocessor directive should not be used in source files]]></name>
		<configKey><![CDATA["#pragma once" preprocessor directive should not be used in source files]]></configKey>
		<category name="Reliability" />
		<description><![CDATA["#pragma once" preprocessor directive should not be used in source files]]></description>
	</rule>
	<rule key="PORT-01" priority="INFO">
		<name><![CDATA[Use capital 'L' instead of lowercase 'l' to indicate long]]></name>
		<configKey><![CDATA[Use capital 'L' instead of lowercase 'l' to indicate long]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use capital 'L' instead of lowercase 'l' to indicate long]]></description>
	</rule>
	<rule key="PORT-02" priority="MAJOR">
		<name><![CDATA[Assigning result of ints operation to long without casting at least one of the ints is not allowed]]></name>
		<configKey><![CDATA[Assigning result of ints operation to long without casting at least one of the ints is not allowed]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Assigning result of ints operation to long without casting at least one of the ints is not allowed]]></description>
	</rule>
	<rule key="PORT-03" priority="CRITICAL">
		<name><![CDATA[Don't use hard coded value of offset in structures]]></name>
		<configKey><![CDATA[Don't use hard coded value of offset in structures]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't use hard coded value of offset in structures]]></description>
	</rule>
	<rule key="PORT-04" priority="MAJOR">
		<name><![CDATA[Don't use hex constants]]></name>
		<configKey><![CDATA[Don't use hex constants]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't use hex constants]]></description>
	</rule>
	<rule key="PORT-05" priority="CRITICAL">
		<name><![CDATA[A pointer to a long should not be casted to an int pointer]]></name>
		<configKey><![CDATA[A pointer to a long should not be casted to an int pointer]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A pointer to a long should not be casted to an int pointer]]></description>
	</rule>
	<rule key="PORT-06" priority="MAJOR">
		<name><![CDATA[Do not assign a long int to an int]]></name>
		<configKey><![CDATA[Do not assign a long int to an int]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not assign a long int to an int]]></description>
	</rule>
	<rule key="PORT-07" priority="MAJOR">
		<name><![CDATA[Do not pass long casted to an int in function call]]></name>
		<configKey><![CDATA[Do not pass long casted to an int in function call]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not pass long casted to an int in function call]]></description>
	</rule>
	<rule key="PORT-08" priority="MAJOR">
		<name><![CDATA[Constant assignment to long should not involve int literals]]></name>
		<configKey><![CDATA[Constant assignment to long should not involve int literals]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Constant assignment to long should not involve int literals]]></description>
	</rule>
	<rule key="PORT-09" priority="MAJOR">
		<name><![CDATA[The type char shall always be declared as unsigned char or signed char]]></name>
		<configKey><![CDATA[The type char shall always be declared as unsigned char or signed char]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The type char shall always be declared as unsigned char or signed char]]></description>
	</rule>
	<rule key="PORT-10" priority="MAJOR">
		<name><![CDATA[Do not initialize a long int with int literals]]></name>
		<configKey><![CDATA[Do not initialize a long int with int literals]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not initialize a long int with int literals]]></description>
	</rule>
	<rule key="PORT-11" priority="CRITICAL">
		<name><![CDATA[Do not cast an int pointer to a long pointer]]></name>
		<configKey><![CDATA[Do not cast an int pointer to a long pointer]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not cast an int pointer to a long pointer]]></description>
	</rule>
	<rule key="PORT-12" priority="MAJOR">
		<name><![CDATA[Do not assign the value from 32 bit multiplication to long type]]></name>
		<configKey><![CDATA[Do not assign the value from 32 bit multiplication to long type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not assign the value from 32 bit multiplication to long type]]></description>
	</rule>
	<rule key="PORT-13" priority="MAJOR">
		<name><![CDATA[The type int shall always be declared as unsigned int or signed int]]></name>
		<configKey><![CDATA[The type int shall always be declared as unsigned int or signed int]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The type int shall always be declared as unsigned int or signed int]]></description>
	</rule>
	<rule key="PORT-14" priority="MAJOR">
		<name><![CDATA[Avoid conversions from "shorter" type to "longer" type in assignment]]></name>
		<configKey><![CDATA[Avoid conversions from "shorter" type to "longer" type in assignment]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid conversions from "shorter" type to "longer" type in assignment]]></description>
	</rule>
	<rule key="PORT-15" priority="MAJOR">
		<name><![CDATA[Do not cast from "shorter" type to "longer" type]]></name>
		<configKey><![CDATA[Do not cast from "shorter" type to "longer" type]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not cast from "shorter" type to "longer" type]]></description>
	</rule>
	<rule key="PORT-16" priority="MAJOR">
		<name><![CDATA[Avoid conversions from a "shorter" type to a "longer" type in function calls]]></name>
		<configKey><![CDATA[Avoid conversions from a "shorter" type to a "longer" type in function calls]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid conversions from a "shorter" type to a "longer" type in function calls]]></description>
	</rule>
	<rule key="PORT-17" priority="MAJOR">
		<name><![CDATA[Don't use i64 or L suffixes directly]]></name>
		<configKey><![CDATA[Don't use i64 or L suffixes directly]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't use i64 or L suffixes directly]]></description>
	</rule>
	<rule key="PORT-18" priority="MAJOR">
		<name><![CDATA[Don't define i64 or L suffixes directly]]></name>
		<configKey><![CDATA[Don't define i64 or L suffixes directly]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't define i64 or L suffixes directly]]></description>
	</rule>
	<rule key="PORT-19" priority="MAJOR">
		<name><![CDATA[Instead of casting a long type operand of an expression to int cast the result of the expression]]></name>
		<configKey><![CDATA[Instead of casting a long type operand of an expression to int cast the result of the expression]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Instead of casting a long type operand of an expression to int cast the result of the expression]]></description>
	</rule>
	<rule key="PORT-20" priority="MAJOR">
		<name><![CDATA[Do not declare variables of long type directly]]></name>
		<configKey><![CDATA[Do not declare variables of long type directly]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not declare variables of long type directly]]></description>
	</rule>
	<rule key="PORT-21" priority="MAJOR">
		<name><![CDATA[Do not assign a long value to a double]]></name>
		<configKey><![CDATA[Do not assign a long value to a double]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not assign a long value to a double]]></description>
	</rule>
	<rule key="PORT-22" priority="INFO">
		<name><![CDATA[Use arrays of int types instead of large arrays of longs]]></name>
		<configKey><![CDATA[Use arrays of int types instead of large arrays of longs]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use arrays of int types instead of large arrays of longs]]></description>
	</rule>
	<rule key="PORT-23" priority="INFO">
		<name><![CDATA[Use arrays of int types instead of dynamic allocated large arrays of longs]]></name>
		<configKey><![CDATA[Use arrays of int types instead of dynamic allocated large arrays of longs]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use arrays of int types instead of dynamic allocated large arrays of longs]]></description>
	</rule>
	<rule key="PORT-24" priority="INFO">
		<name><![CDATA[Don't use large arrays of pointers to bool, char, short, int and float types]]></name>
		<configKey><![CDATA[Don't use large arrays of pointers to bool, char, short, int and float types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't use large arrays of pointers to bool, char, short, int and float types]]></description>
	</rule>
	<rule key="PORT-25" priority="CRITICAL">
		<name><![CDATA[User-specified identifiers (internal and external) will not rely on significance of more than 64 characters]]></name>
		<configKey><![CDATA[User-specified identifiers (internal and external) will not rely on significance of more than 64 characters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[User-specified identifiers (internal and external) will not rely on significance of more than 64 characters]]></description>
	</rule>
	<rule key="PORT-26" priority="CRITICAL">
		<name><![CDATA[Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier]]></name>
		<configKey><![CDATA[Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier]]></description>
	</rule>
	<rule key="PREPROC-01" priority="MAJOR">
		<name><![CDATA[Avoid macros]]></name>
		<configKey><![CDATA[Avoid macros]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid macros]]></description>
	</rule>
	<rule key="PREPROC-02" priority="CRITICAL">
		<name><![CDATA[Don't use macros in include statement]]></name>
		<configKey><![CDATA[Don't use macros in include statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't use macros in include statement]]></description>
	</rule>
	<rule key="PREPROC-03" priority="MINOR">
		<name><![CDATA[Don't redefine primitive types]]></name>
		<configKey><![CDATA[Don't redefine primitive types]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't redefine primitive types]]></description>
	</rule>
	<rule key="PREPROC-04" priority="MINOR">
		<name><![CDATA[Don't define part of statement]]></name>
		<configKey><![CDATA[Don't define part of statement]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't define part of statement]]></description>
	</rule>
	<rule key="PREPROC-05" priority="CRITICAL">
		<name><![CDATA[In a macro function, use parentheses before and after multiplication or division]]></name>
		<configKey><![CDATA[In a macro function, use parentheses before and after multiplication or division]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[In a macro function, use parentheses before and after multiplication or division]]></description>
	</rule>
	<rule key="PREPROC-06" priority="CRITICAL">
		<name><![CDATA[Do not allow relative path names in #include statements]]></name>
		<configKey><![CDATA[Do not allow relative path names in #include statements]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not allow relative path names in #include statements]]></description>
	</rule>
	<rule key="PREPROC-07" priority="INFO">
		<name><![CDATA[Incorrect 'NULL' definition]]></name>
		<configKey><![CDATA[Incorrect 'NULL' definition]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Incorrect 'NULL' definition]]></description>
	</rule>
	<rule key="PREPROC-08" priority="MAJOR">
		<name><![CDATA[The #include pre-processor directive will only be used to include header (*.h) files]]></name>
		<configKey><![CDATA[The #include pre-processor directive will only be used to include header (*.h) files]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The #include pre-processor directive will only be used to include header (*.h) files]]></description>
	</rule>
	<rule key="PREPROC-09" priority="CRITICAL">
		<name><![CDATA[The #include directive shall use the &lt;filename.h&gt; notation to include header files]]></name>
		<configKey><![CDATA[The #include directive shall use the &lt;filename.h&gt; notation to include header files]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The #include directive shall use the &lt;filename.h&gt; notation to include header files]]></description>
	</rule>
	<rule key="PREPROC-10" priority="MAJOR">
		<name><![CDATA[The #ifndef and #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file]]></name>
		<configKey><![CDATA[The #ifndef and #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The #ifndef and #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file]]></description>
	</rule>
	<rule key="PREPROC-11" priority="CRITICAL">
		<name><![CDATA[Only the following pre-processor directives shall be used: #ifndef, #define, #endif, #include]]></name>
		<configKey><![CDATA[Only the following pre-processor directives shall be used: #ifndef, #define, #endif, #include]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Only the following pre-processor directives shall be used: #ifndef, #define, #endif, #include]]></description>
	</rule>
	<rule key="PREPROC-12" priority="MAJOR">
		<name><![CDATA[C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers]]></name>
		<configKey><![CDATA[C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers]]></description>
	</rule>
	<rule key="PREPROC-13" priority="MAJOR">
		<name><![CDATA[Macro should not contain token pasting, variable argument list nor recursive macro calls]]></name>
		<configKey><![CDATA[Macro should not contain token pasting, variable argument list nor recursive macro calls]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Macro should not contain token pasting, variable argument list nor recursive macro calls]]></description>
	</rule>
	<rule key="PREPROC-14" priority="MAJOR">
		<name><![CDATA[All macros must expand into complete syntactic units]]></name>
		<configKey><![CDATA[All macros must expand into complete syntactic units]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All macros must expand into complete syntactic units]]></description>
	</rule>
	<rule key="PREPROC-15" priority="MAJOR">
		<name><![CDATA[Pointer dereference operations may not be hidden in macro definitions]]></name>
		<configKey><![CDATA[Pointer dereference operations may not be hidden in macro definitions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Pointer dereference operations may not be hidden in macro definitions]]></description>
	</rule>
	<rule key="QT-01" priority="MAJOR">
		<name><![CDATA[Every QObject subclass should contain a Q_OBJECT macro]]></name>
		<configKey><![CDATA[Every QObject subclass should contain a Q_OBJECT macro]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Every QObject subclass should contain a Q_OBJECT macro]]></description>
	</rule>
	<rule key="QT-02" priority="MAJOR">
		<name><![CDATA[QObject must not be inherited more than one time]]></name>
		<configKey><![CDATA[QObject must not be inherited more than one time]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[QObject must not be inherited more than one time]]></description>
	</rule>
	<rule key="QT-03" priority="MAJOR">
		<name><![CDATA[It's only possible to connect a signal to a slot or a signal to another signal]]></name>
		<configKey><![CDATA[It's only possible to connect a signal to a slot or a signal to another signal]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[It's only possible to connect a signal to a slot or a signal to another signal]]></description>
	</rule>
	<rule key="QT-04" priority="BLOCKER">
		<name><![CDATA[The methods inside the SIGNAL and SLOT macros have to exist]]></name>
		<configKey><![CDATA[The methods inside the SIGNAL and SLOT macros have to exist]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The methods inside the SIGNAL and SLOT macros have to exist]]></description>
	</rule>
	<rule key="QT-05" priority="MAJOR">
		<name><![CDATA[Mark signal emissions with the keyword "emit" to distinguish a signal emission from a normal method call]]></name>
		<configKey><![CDATA[Mark signal emissions with the keyword "emit" to distinguish a signal emission from a normal method call]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Mark signal emissions with the keyword "emit" to distinguish a signal emission from a normal method call]]></description>
	</rule>
	<rule key="QT-06" priority="MAJOR">
		<name><![CDATA[Do not set Idle or Critical priority to QThreads. Use High/Low/Med only]]></name>
		<configKey><![CDATA[Do not set Idle or Critical priority to QThreads. Use High/Low/Med only]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not set Idle or Critical priority to QThreads. Use High/Low/Med only]]></description>
	</rule>
	<rule key="QT-07" priority="BLOCKER">
		<name><![CDATA[Do not force thread termination by calling QThread::terminate()]]></name>
		<configKey><![CDATA[Do not force thread termination by calling QThread::terminate()]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not force thread termination by calling QThread::terminate()]]></description>
	</rule>
	<rule key="QT-08" priority="MAJOR">
		<name><![CDATA[If using lock on a mutex in a function, release the lock in the same function]]></name>
		<configKey><![CDATA[If using lock on a mutex in a function, release the lock in the same function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If using lock on a mutex in a function, release the lock in the same function]]></description>
	</rule>
	<rule key="QT-09" priority="BLOCKER">
		<name><![CDATA[Do not call new on QMutexLocker]]></name>
		<configKey><![CDATA[Do not call new on QMutexLocker]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not call new on QMutexLocker]]></description>
	</rule>
	<rule key="QT-10" priority="MAJOR">
		<name><![CDATA[Declare a copy constructor and operator= for any Qt - inherited objects that have pointers]]></name>
		<configKey><![CDATA[Declare a copy constructor and operator= for any Qt - inherited objects that have pointers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Declare a copy constructor and operator= for any Qt - inherited objects that have pointers]]></description>
	</rule>
	<rule key="QT-11" priority="MINOR">
		<name><![CDATA[Do not use setWindowFlags function on a Widget]]></name>
		<configKey><![CDATA[Do not use setWindowFlags function on a Widget]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use setWindowFlags function on a Widget]]></description>
	</rule>
	<rule key="QT-12" priority="BLOCKER">
		<name><![CDATA[Do not directly set specific Widget attributes that are set by Qt kernel]]></name>
		<configKey><![CDATA[Do not directly set specific Widget attributes that are set by Qt kernel]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not directly set specific Widget attributes that are set by Qt kernel]]></description>
	</rule>
	<rule key="QT-13" priority="MAJOR">
		<name><![CDATA[Never mix const and non-const iterators in assignment]]></name>
		<configKey><![CDATA[Never mix const and non-const iterators in assignment]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Never mix const and non-const iterators in assignment]]></description>
	</rule>
	<rule key="QT-14" priority="MAJOR">
		<name><![CDATA[If you use Q_DECLARE_FLAGS, you must also use Q_DECLARE_OPERATORS_FOR_FLAGS]]></name>
		<configKey><![CDATA[If you use Q_DECLARE_FLAGS, you must also use Q_DECLARE_OPERATORS_FOR_FLAGS]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If you use Q_DECLARE_FLAGS, you must also use Q_DECLARE_OPERATORS_FOR_FLAGS]]></description>
	</rule>
	<rule key="QT-15" priority="MAJOR">
		<name><![CDATA[Q_DECLARE_OPERATORS_FOR_FLAGS must be in the global namespace, Q_DECLARE_FLAGS inside the enum's namespace]]></name>
		<configKey><![CDATA[Q_DECLARE_OPERATORS_FOR_FLAGS must be in the global namespace, Q_DECLARE_FLAGS inside the enum's namespace]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Q_DECLARE_OPERATORS_FOR_FLAGS must be in the global namespace, Q_DECLARE_FLAGS inside the enum's namespace]]></description>
	</rule>
	<rule key="QT-16" priority="MAJOR">
		<name><![CDATA[The getters and setters of a Q_PROPERTY must exist and the types must match]]></name>
		<configKey><![CDATA[The getters and setters of a Q_PROPERTY must exist and the types must match]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The getters and setters of a Q_PROPERTY must exist and the types must match]]></description>
	</rule>
	<rule key="QT-17" priority="MAJOR">
		<name><![CDATA[Properties of enum types must use Q_ENUMS]]></name>
		<configKey><![CDATA[Properties of enum types must use Q_ENUMS]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Properties of enum types must use Q_ENUMS]]></description>
	</rule>
	<rule key="QT-18" priority="MAJOR">
		<name><![CDATA[Non-const function should not be called on the Qt object]]></name>
		<configKey><![CDATA[Non-const function should not be called on the Qt object]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Non-const function should not be called on the Qt object]]></description>
	</rule>
	<rule key="SECURITY-01" priority="CRITICAL">
		<name><![CDATA[Avoid functions which use time from standard C library]]></name>
		<configKey><![CDATA[Avoid functions which use time from standard C library]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid functions which use time from standard C library]]></description>
	</rule>
	<rule key="SECURITY-02" priority="CRITICAL">
		<name><![CDATA[Avoid functions which use random numbers from standard C library]]></name>
		<configKey><![CDATA[Avoid functions which use random numbers from standard C library]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid functions which use random numbers from standard C library]]></description>
	</rule>
	<rule key="SECURITY-03" priority="CRITICAL">
		<name><![CDATA[Usage of system properties should be restricted]]></name>
		<configKey><![CDATA[Usage of system properties should be restricted]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Usage of system properties should be restricted]]></description>
	</rule>
	<rule key="SECURITY-04" priority="CRITICAL">
		<name><![CDATA[Avoid loading Dynamic Link Libraries]]></name>
		<configKey><![CDATA[Avoid loading Dynamic Link Libraries]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid loading Dynamic Link Libraries]]></description>
	</rule>
	<rule key="SECURITY-05" priority="CRITICAL">
		<name><![CDATA[Avoid using functions printf/wprintf with only one variable parameter]]></name>
		<configKey><![CDATA[Avoid using functions printf/wprintf with only one variable parameter]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using functions printf/wprintf with only one variable parameter]]></description>
	</rule>
	<rule key="SECURITY-06" priority="MAJOR">
		<name><![CDATA[Avoid functions which use time from MFC library]]></name>
		<configKey><![CDATA[Avoid functions which use time from MFC library]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid functions which use time from MFC library]]></description>
	</rule>
	<rule key="SECURITY-07" priority="MAJOR">
		<name><![CDATA[Don't use unsafe C functions that do write to range-unchecked buffers]]></name>
		<configKey><![CDATA[Don't use unsafe C functions that do write to range-unchecked buffers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't use unsafe C functions that do write to range-unchecked buffers]]></description>
	</rule>
	<rule key="SECURITY-08" priority="CRITICAL">
		<name><![CDATA[Avoid using functions fprintf/fwprintf with only two parameters, when second parameter is a variable]]></name>
		<configKey><![CDATA[Avoid using functions fprintf/fwprintf with only two parameters, when second parameter is a variable]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using functions fprintf/fwprintf with only two parameters, when second parameter is a variable]]></description>
	</rule>
	<rule key="SECURITY-09" priority="CRITICAL">
		<name><![CDATA[Avoid using data() function from 'string' class of standard library]]></name>
		<configKey><![CDATA[Avoid using data() function from 'string' class of standard library]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using data() function from 'string' class of standard library]]></description>
	</rule>
	<rule key="SECURITY-10" priority="CRITICAL">
		<name><![CDATA[Avoid using vfork() function]]></name>
		<configKey><![CDATA[Avoid using vfork() function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using vfork() function]]></description>
	</rule>
	<rule key="SECURITY-11" priority="CRITICAL">
		<name><![CDATA[Avoid using unsecured shell functions that may be affected by shell metacharacters]]></name>
		<configKey><![CDATA[Avoid using unsecured shell functions that may be affected by shell metacharacters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using unsecured shell functions that may be affected by shell metacharacters]]></description>
	</rule>
	<rule key="SECURITY-12" priority="CRITICAL">
		<name><![CDATA[Avoid using unsafe string functions which may cause buffer overflows]]></name>
		<configKey><![CDATA[Avoid using unsafe string functions which may cause buffer overflows]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using unsafe string functions which may cause buffer overflows]]></description>
	</rule>
	<rule key="SECURITY-13" priority="CRITICAL">
		<name><![CDATA[Avoid using unsafe string functions that do not check bounds]]></name>
		<configKey><![CDATA[Avoid using unsafe string functions that do not check bounds]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using unsafe string functions that do not check bounds]]></description>
	</rule>
	<rule key="SECURITY-14" priority="CRITICAL">
		<name><![CDATA[Do not use scanf and fscanf functions without specifying variable size in format string]]></name>
		<configKey><![CDATA[Do not use scanf and fscanf functions without specifying variable size in format string]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use scanf and fscanf functions without specifying variable size in format string]]></description>
	</rule>
	<rule key="SECURITY-15" priority="CRITICAL">
		<name><![CDATA[Do not print potentially sensitive information, resulting from an application error into exception messages]]></name>
		<configKey><![CDATA[Do not print potentially sensitive information, resulting from an application error into exception messages]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not print potentially sensitive information, resulting from an application error into exception messages]]></description>
	</rule>
	<rule key="SECURITY-16" priority="BLOCKER">
		<name><![CDATA[Never use gets()]]></name>
		<configKey><![CDATA[Never use gets()]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Never use gets()]]></description>
	</rule>
	<rule key="SECURITY-17" priority="CRITICAL">
		<name><![CDATA[Avoid passing non-const parameters or variables into exec]]></name>
		<configKey><![CDATA[Avoid passing non-const parameters or variables into exec]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid passing non-const parameters or variables into exec]]></description>
	</rule>
	<rule key="SECURITY-18" priority="CRITICAL">
		<name><![CDATA[Avoid passing dynamically created strings into exec]]></name>
		<configKey><![CDATA[Avoid passing dynamically created strings into exec]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid passing dynamically created strings into exec]]></description>
	</rule>
	<rule key="SECURITY-19" priority="CRITICAL">
		<name><![CDATA[Usage of functions prone to race is not allowed]]></name>
		<configKey><![CDATA[Usage of functions prone to race is not allowed]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Usage of functions prone to race is not allowed]]></description>
	</rule>
	<rule key="SECURITY-20" priority="CRITICAL">
		<name><![CDATA[Avoid passing user input into methods as parameters]]></name>
		<configKey><![CDATA[Avoid passing user input into methods as parameters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid passing user input into methods as parameters]]></description>
	</rule>
	<rule key="SECURITY-21" priority="CRITICAL">
		<name><![CDATA[Do not use 'syslog' function for logging purposes]]></name>
		<configKey><![CDATA[Do not use 'syslog' function for logging purposes]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use 'syslog' function for logging purposes]]></description>
	</rule>
	<rule key="SECURITY-22" priority="CRITICAL">
		<name><![CDATA[Do not use mbstowcs() function]]></name>
		<configKey><![CDATA[Do not use mbstowcs() function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use mbstowcs() function]]></description>
	</rule>
	<rule key="SECURITY-23" priority="CRITICAL">
		<name><![CDATA[Beware of functions which may return the current directory or the windows directory]]></name>
		<configKey><![CDATA[Beware of functions which may return the current directory or the windows directory]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Beware of functions which may return the current directory or the windows directory]]></description>
	</rule>
	<rule key="SECURITY-24" priority="CRITICAL">
		<name><![CDATA[Avoid using InitializeCriticalSection]]></name>
		<configKey><![CDATA[Avoid using InitializeCriticalSection]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using InitializeCriticalSection]]></description>
	</rule>
	<rule key="SECURITY-25" priority="CRITICAL">
		<name><![CDATA[Avoid using thread-unsafe functions]]></name>
		<configKey><![CDATA[Avoid using thread-unsafe functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using thread-unsafe functions]]></description>
	</rule>
	<rule key="SECURITY-26" priority="CRITICAL">
		<name><![CDATA[Do not use 'setuid' in source code]]></name>
		<configKey><![CDATA[Do not use 'setuid' in source code]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use 'setuid' in source code]]></description>
	</rule>
	<rule key="SECURITY-27" priority="CRITICAL">
		<name><![CDATA[Don't use chmod(), chown(), chgrp()]]></name>
		<configKey><![CDATA[Don't use chmod(), chown(), chgrp()]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't use chmod(), chown(), chgrp()]]></description>
	</rule>
	<rule key="SECURITY-28" priority="CRITICAL">
		<name><![CDATA[Standard random number generators should not be used to generate randomness for security reasons]]></name>
		<configKey><![CDATA[Standard random number generators should not be used to generate randomness for security reasons]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Standard random number generators should not be used to generate randomness for security reasons]]></description>
	</rule>
	<rule key="SECURITY-29" priority="CRITICAL">
		<name><![CDATA[Do not use obsolete C routine ulimit()]]></name>
		<configKey><![CDATA[Do not use obsolete C routine ulimit()]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use obsolete C routine ulimit()]]></description>
	</rule>
	<rule key="SECURITY-30" priority="CRITICAL">
		<name><![CDATA[Avoid using 'getpw' function in program code]]></name>
		<configKey><![CDATA[Avoid using 'getpw' function in program code]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using 'getpw' function in program code]]></description>
	</rule>
	<rule key="SECURITY-31" priority="CRITICAL">
		<name><![CDATA[Do not use 'cuserid' function]]></name>
		<configKey><![CDATA[Do not use 'cuserid' function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use 'cuserid' function]]></description>
	</rule>
	<rule key="SECURITY-32" priority="CRITICAL">
		<name><![CDATA[Avoid using obsolete C routine 'usleep']]></name>
		<configKey><![CDATA[Avoid using obsolete C routine 'usleep']]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using obsolete C routine 'usleep']]></description>
	</rule>
	<rule key="SECURITY-33" priority="CRITICAL">
		<name><![CDATA[Usage of functions which do not properly handle non-NULL terminated strings is not allowed]]></name>
		<configKey><![CDATA[Usage of functions which do not properly handle non-NULL terminated strings is not allowed]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Usage of functions which do not properly handle non-NULL terminated strings is not allowed]]></description>
	</rule>
	<rule key="SECURITY-34" priority="CRITICAL">
		<name><![CDATA[Avoid using environment variables]]></name>
		<configKey><![CDATA[Avoid using environment variables]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using environment variables]]></description>
	</rule>
	<rule key="SECURITY-35" priority="CRITICAL">
		<name><![CDATA[Don't trust any value of command line if attacker can set them]]></name>
		<configKey><![CDATA[Don't trust any value of command line if attacker can set them]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't trust any value of command line if attacker can set them]]></description>
	</rule>
	<rule key="SECURITY-36" priority="CRITICAL">
		<name><![CDATA[Never use unfiltered data from an untrusted user as the format parameter]]></name>
		<configKey><![CDATA[Never use unfiltered data from an untrusted user as the format parameter]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Never use unfiltered data from an untrusted user as the format parameter]]></description>
	</rule>
	<rule key="SECURITY-37" priority="CRITICAL">
		<name><![CDATA[Do not use weak encryption functions]]></name>
		<configKey><![CDATA[Do not use weak encryption functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use weak encryption functions]]></description>
	</rule>
	<rule key="SECURITY-38" priority="CRITICAL">
		<name><![CDATA[Untrusted data is used as a loop boundary]]></name>
		<configKey><![CDATA[Untrusted data is used as a loop boundary]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Untrusted data is used as a loop boundary]]></description>
	</rule>
	<rule key="STL-01" priority="INFO">
		<name><![CDATA[Instead of trying to write the container-independent code use class encapsulation]]></name>
		<configKey><![CDATA[Instead of trying to write the container-independent code use class encapsulation]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Instead of trying to write the container-independent code use class encapsulation]]></description>
	</rule>
	<rule key="STL-02" priority="MAJOR">
		<name><![CDATA[To make copying efficient, correct, and immune to the slicing problem create containers of pointers instead of containers of objects]]></name>
		<configKey><![CDATA[To make copying efficient, correct, and immune to the slicing problem create containers of pointers instead of containers of objects]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[To make copying efficient, correct, and immune to the slicing problem create containers of pointers instead of containers of objects]]></description>
	</rule>
	<rule key="STL-03" priority="MAJOR">
		<name><![CDATA[Call empty instead of checking size() against zero]]></name>
		<configKey><![CDATA[Call empty instead of checking size() against zero]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Call empty instead of checking size() against zero]]></description>
	</rule>
	<rule key="STL-04" priority="MAJOR">
		<name><![CDATA[Avoid using iterative calls to insert in an explicit loop]]></name>
		<configKey><![CDATA[Avoid using iterative calls to insert in an explicit loop]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using iterative calls to insert in an explicit loop]]></description>
	</rule>
	<rule key="STL-05" priority="MAJOR">
		<name><![CDATA[Almost all uses of copy where the destination range is specified using an insert iterator should be replaced with calls to range member functions]]></name>
		<configKey><![CDATA[Almost all uses of copy where the destination range is specified using an insert iterator should be replaced with calls to range member functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Almost all uses of copy where the destination range is specified using an insert iterator should be replaced with calls to range member functions]]></description>
	</rule>
	<rule key="STL-06" priority="MAJOR">
		<name><![CDATA[Instead of anonymous istream_iterator objects use istream_iterator names when used as function parameters]]></name>
		<configKey><![CDATA[Instead of anonymous istream_iterator objects use istream_iterator names when used as function parameters]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Instead of anonymous istream_iterator objects use istream_iterator names when used as function parameters]]></description>
	</rule>
	<rule key="STL-07" priority="MAJOR">
		<name><![CDATA[When using containers of newed pointers, remember to delete the pointers before the container is destroyed]]></name>
		<configKey><![CDATA[When using containers of newed pointers, remember to delete the pointers before the container is destroyed]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[When using containers of newed pointers, remember to delete the pointers before the container is destroyed]]></description>
	</rule>
	<rule key="STL-08" priority="MAJOR">
		<name><![CDATA[Never create containers of auto_ptrs]]></name>
		<configKey><![CDATA[Never create containers of auto_ptrs]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Never create containers of auto_ptrs]]></description>
	</rule>
	<rule key="STL-09" priority="MAJOR">
		<name><![CDATA[Avoid using remove algorithm with list and standard associative containers]]></name>
		<configKey><![CDATA[Avoid using remove algorithm with list and standard associative containers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using remove algorithm with list and standard associative containers]]></description>
	</rule>
	<rule key="STL-10" priority="MAJOR">
		<name><![CDATA[Prefer vector and string to dynamically allocated arrays]]></name>
		<configKey><![CDATA[Prefer vector and string to dynamically allocated arrays]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer vector and string to dynamically allocated arrays]]></description>
	</rule>
	<rule key="STL-11" priority="MINOR">
		<name><![CDATA[Consider using vector&lt;char&gt; instead of string]]></name>
		<configKey><![CDATA[Consider using vector&lt;char&gt; instead of string]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Consider using vector&lt;char&gt; instead of string]]></description>
	</rule>
	<rule key="STL-12" priority="MAJOR">
		<name><![CDATA[Use reserve to avoid unnecessary reallocations]]></name>
		<configKey><![CDATA[Use reserve to avoid unnecessary reallocations]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use reserve to avoid unnecessary reallocations]]></description>
	</rule>
	<rule key="STL-13" priority="MAJOR">
		<name><![CDATA[Each vector and string should be checked if it is not empty before it is passed to C function]]></name>
		<configKey><![CDATA[Each vector and string should be checked if it is not empty before it is passed to C function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each vector and string should be checked if it is not empty before it is passed to C function]]></description>
	</rule>
	<rule key="STL-14" priority="MAJOR">
		<name><![CDATA[Avoid using vector&lt;bool&gt;]]></name>
		<configKey><![CDATA[Avoid using vector&lt;bool&gt;]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using vector&lt;bool&gt;]]></description>
	</rule>
	<rule key="STL-15" priority="MAJOR">
		<name><![CDATA[Specify comparison types for associative containers of pointers]]></name>
		<configKey><![CDATA[Specify comparison types for associative containers of pointers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Specify comparison types for associative containers of pointers]]></description>
	</rule>
	<rule key="STL-16" priority="MAJOR">
		<name><![CDATA[For associative containers never use comparison function returning true for equal values]]></name>
		<configKey><![CDATA[For associative containers never use comparison function returning true for equal values]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[For associative containers never use comparison function returning true for equal values]]></description>
	</rule>
	<rule key="STL-17" priority="MAJOR">
		<name><![CDATA[For associative containers never use comparison function returning true for equal values]]></name>
		<configKey><![CDATA[For associative containers never use comparison function returning true for equal values]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[For associative containers never use comparison function returning true for equal values]]></description>
	</rule>
	<rule key="STL-18" priority="MAJOR">
		<name><![CDATA[Prefer iterator to const iterator, reverse_iterator, and const_reverse_iterator]]></name>
		<configKey><![CDATA[Prefer iterator to const iterator, reverse_iterator, and const_reverse_iterator]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer iterator to const iterator, reverse_iterator, and const_reverse_iterator]]></description>
	</rule>
	<rule key="STL-19" priority="MAJOR">
		<name><![CDATA[Use distance and advance to convert a container's const_iterators to iterators]]></name>
		<configKey><![CDATA[Use distance and advance to convert a container's const_iterators to iterators]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use distance and advance to convert a container's const_iterators to iterators]]></description>
	</rule>
	<rule key="STL-20" priority="MINOR">
		<name><![CDATA[It is necessary to be careful when using reverse_iterator's base iterator for erasure purposes]]></name>
		<configKey><![CDATA[It is necessary to be careful when using reverse_iterator's base iterator for erasure purposes]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[It is necessary to be careful when using reverse_iterator's base iterator for erasure purposes]]></description>
	</rule>
	<rule key="STL-21" priority="MINOR">
		<name><![CDATA[Consider istreambuf_iterators for character-by-character input]]></name>
		<configKey><![CDATA[Consider istreambuf_iterators for character-by-character input]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Consider istreambuf_iterators for character-by-character input]]></description>
	</rule>
	<rule key="STL-22" priority="MAJOR">
		<name><![CDATA[Make sure destination ranges are big enough]]></name>
		<configKey><![CDATA[Make sure destination ranges are big enough]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Make sure destination ranges are big enough]]></description>
	</rule>
	<rule key="STL-23" priority="MAJOR">
		<name><![CDATA[Follow remove-like algorithms by erase if you really want to remove something]]></name>
		<configKey><![CDATA[Follow remove-like algorithms by erase if you really want to remove something]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Follow remove-like algorithms by erase if you really want to remove something]]></description>
	</rule>
	<rule key="STL-24" priority="MAJOR">
		<name><![CDATA[Avoid using remove and similar algorithms (i.e., remove_if and unique) on containers of dynamically allocated pointers]]></name>
		<configKey><![CDATA[Avoid using remove and similar algorithms (i.e., remove_if and unique) on containers of dynamically allocated pointers]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Avoid using remove and similar algorithms (i.e., remove_if and unique) on containers of dynamically allocated pointers]]></description>
	</rule>
	<rule key="STL-25" priority="MINOR">
		<name><![CDATA[If you pass a sorted range to an algorithm that also takes a comparison function, be sure that the comparison function you pass behaves the same as the one you used to sort the range]]></name>
		<configKey><![CDATA[If you pass a sorted range to an algorithm that also takes a comparison function, be sure that the comparison function you pass behaves the same as the one you used to sort the range]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If you pass a sorted range to an algorithm that also takes a comparison function, be sure that the comparison function you pass behaves the same as the one you used to sort the range]]></description>
	</rule>
	<rule key="STL-26" priority="MAJOR">
		<name><![CDATA[Proper implementation of copy_if should not be based on returning the remove_copy_if with a not1 in front of the predicate]]></name>
		<configKey><![CDATA[Proper implementation of copy_if should not be based on returning the remove_copy_if with a not1 in front of the predicate]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Proper implementation of copy_if should not be based on returning the remove_copy_if with a not1 in front of the predicate]]></description>
	</rule>
	<rule key="STL-27" priority="MAJOR">
		<name><![CDATA[If accumulate() is used on a container of floating point values, use floating point value as initial one]]></name>
		<configKey><![CDATA[If accumulate() is used on a container of floating point values, use floating point value as initial one]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[If accumulate() is used on a container of floating point values, use floating point value as initial one]]></description>
	</rule>
	<rule key="STL-28" priority="MAJOR">
		<name><![CDATA[Design functor classes for pass-by-value]]></name>
		<configKey><![CDATA[Design functor classes for pass-by-value]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Design functor classes for pass-by-value]]></description>
	</rule>
	<rule key="STL-29" priority="MAJOR">
		<name><![CDATA[Make predicates const pure functions]]></name>
		<configKey><![CDATA[Make predicates const pure functions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Make predicates const pure functions]]></description>
	</rule>
	<rule key="STL-30" priority="MAJOR">
		<name><![CDATA[Each functor class should has only one operator() function, and it's parameter and return types should be passed to unary_function or binary_function]]></name>
		<configKey><![CDATA[Each functor class should has only one operator() function, and it's parameter and return types should be passed to unary_function or binary_function]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Each functor class should has only one operator() function, and it's parameter and return types should be passed to unary_function or binary_function]]></description>
	</rule>
	<rule key="STL-31" priority="MAJOR">
		<name><![CDATA[You must employ ptr_fun, mem_fun, or mem_fun_ref whenever you pass a function to an STL component]]></name>
		<configKey><![CDATA[You must employ ptr_fun, mem_fun, or mem_fun_ref whenever you pass a function to an STL component]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[You must employ ptr_fun, mem_fun, or mem_fun_ref whenever you pass a function to an STL component]]></description>
	</rule>
	<rule key="STL-32" priority="MAJOR">
		<name><![CDATA[Make sure less&lt;T&gt; means operator&lt;]]></name>
		<configKey><![CDATA[Make sure less&lt;T&gt; means operator&lt;]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Make sure less&lt;T&gt; means operator&lt;]]></description>
	</rule>
	<rule key="STL-33" priority="MAJOR">
		<name><![CDATA[Prefer algorithm calls to hand-written loops]]></name>
		<configKey><![CDATA[Prefer algorithm calls to hand-written loops]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer algorithm calls to hand-written loops]]></description>
	</rule>
	<rule key="STL-34" priority="MAJOR">
		<name><![CDATA[Prefer member functions to algorithms with the same names]]></name>
		<configKey><![CDATA[Prefer member functions to algorithms with the same names]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Prefer member functions to algorithms with the same names]]></description>
	</rule>
	<rule key="STL-35" priority="MAJOR">
		<name><![CDATA[Do not rely on the conversion of count()'s nonzero values to true and zero to false]]></name>
		<configKey><![CDATA[Do not rely on the conversion of count()'s nonzero values to true and zero to false]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not rely on the conversion of count()'s nonzero values to true and zero to false]]></description>
	</rule>
	<rule key="STL-36" priority="MAJOR">
		<name><![CDATA[Do not use an iterator range that isn't really a range]]></name>
		<configKey><![CDATA[Do not use an iterator range that isn't really a range]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not use an iterator range that isn't really a range]]></description>
	</rule>
	<rule key="STL-37" priority="MAJOR">
		<name><![CDATA[Use vector and string instead of arrays]]></name>
		<configKey><![CDATA[Use vector and string instead of arrays]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use vector and string instead of arrays]]></description>
	</rule>
	<rule key="STL-38" priority="MAJOR">
		<name><![CDATA[Use != instead of &lt; to compare iterators]]></name>
		<configKey><![CDATA[Use != instead of &lt; to compare iterators]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use != instead of &lt; to compare iterators]]></description>
	</rule>
	<rule key="STL-39" priority="MAJOR">
		<name><![CDATA[Use traits classes in conjunction with overloading]]></name>
		<configKey><![CDATA[Use traits classes in conjunction with overloading]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Use traits classes in conjunction with overloading]]></description>
	</rule>
	<rule key="STL-40" priority="MAJOR">
		<name><![CDATA[When calling swap, employ a using declaration for std::swap, then call swap without namespace qualification]]></name>
		<configKey><![CDATA[When calling swap, employ a using declaration for std::swap, then call swap without namespace qualification]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[When calling swap, employ a using declaration for std::swap, then call swap without namespace qualification]]></description>
	</rule>
	<rule key="STL-41" priority="MAJOR">
		<name><![CDATA[Do not declare the non-member to be an overloading of std::swap]]></name>
		<configKey><![CDATA[Do not declare the non-member to be an overloading of std::swap]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not declare the non-member to be an overloading of std::swap]]></description>
	</rule>
	<rule key="STL-42" priority="MAJOR">
		<name><![CDATA[Member version of swap should never throw exceptions]]></name>
		<configKey><![CDATA[Member version of swap should never throw exceptions]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Member version of swap should never throw exceptions]]></description>
	</rule>
	<rule key="TEMPL-01" priority="MAJOR">
		<name><![CDATA[Factor parameter-independent code out of templates]]></name>
		<configKey><![CDATA[Factor parameter-independent code out of templates]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Factor parameter-independent code out of templates]]></description>
	</rule>
	<rule key="TEMPL-02" priority="MAJOR">
		<name><![CDATA[Define non-member functions inside templates when type conversions are desired]]></name>
		<configKey><![CDATA[Define non-member functions inside templates when type conversions are desired]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Define non-member functions inside templates when type conversions are desired]]></description>
	</rule>
	<rule key="TEMPL-03" priority="MAJOR">
		<name><![CDATA[Do not overload functions within a template class]]></name>
		<configKey><![CDATA[Do not overload functions within a template class]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Do not overload functions within a template class]]></description>
	</rule>
	<rule key="TEMPL-04" priority="MAJOR">
		<name><![CDATA[In template global functions use 'typename' to identify nested dependent type names]]></name>
		<configKey><![CDATA[In template global functions use 'typename' to identify nested dependent type names]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[In template global functions use 'typename' to identify nested dependent type names]]></description>
	</rule>
	<rule key="TEMPL-05" priority="MAJOR">
		<name><![CDATA[In template classes use 'typename' to identify nested dependent type names]]></name>
		<configKey><![CDATA[In template classes use 'typename' to identify nested dependent type names]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[In template classes use 'typename' to identify nested dependent type names]]></description>
	</rule>
	<rule key="TEMPL-06" priority="MAJOR">
		<name><![CDATA[Don't change default arguments of virtual functions in template classes]]></name>
		<configKey><![CDATA[Don't change default arguments of virtual functions in template classes]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Don't change default arguments of virtual functions in template classes]]></description>
	</rule>
	<rule key="TEMPL-07" priority="MAJOR">
		<name><![CDATA[A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter]]></name>
		<configKey><![CDATA[A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter]]></description>
	</rule>
	<rule key="TEMPL-08" priority="MAJOR">
		<name><![CDATA[The viable function set for a function call should either contain no function specializations, or only contain function specializations]]></name>
		<configKey><![CDATA[The viable function set for a function call should either contain no function specializations, or only contain function specializations]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[The viable function set for a function call should either contain no function specializations, or only contain function specializations]]></description>
	</rule>
	<rule key="TEMPL-09" priority="MAJOR">
		<name><![CDATA[Overloaded function templates shall not be explicitly specialized]]></name>
		<configKey><![CDATA[Overloaded function templates shall not be explicitly specialized]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[Overloaded function templates shall not be explicitly specialized]]></description>
	</rule>
	<rule key="TEMPL-10" priority="MAJOR">
		<name><![CDATA[All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template]]></name>
		<configKey><![CDATA[All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template]]></description>
	</rule>
	<rule key="TEMPL-11" priority="MAJOR">
		<name><![CDATA[A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter]]></name>
		<configKey><![CDATA[A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter]]></description>
	</rule>
	<rule key="TEMPL-12" priority="MAJOR">
		<name><![CDATA[In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-&gt;]]></name>
		<configKey><![CDATA[In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-&gt;]]></configKey>
		<category name="Reliability" />
		<description><![CDATA[In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this-&gt;]]></description>
	</rule>
</rules>
